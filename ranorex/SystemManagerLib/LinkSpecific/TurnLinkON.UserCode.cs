///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using System.Windows.Forms;

using Ranorex;
using Ranorex.Core;

namespace SystemManagerLib.LinkSpecific
{
	/// <summary>
	/// The TurnLinkON recording.
	/// </summary>
	public partial class TurnLinkON
	{
		
		public static string LinkType;
		public static bool Terminal = false;
		public static bool NTDS = false;

		
		public void GetLinkType()
		{
			Accessible accElement = new Accessible(repo.FormSystem_Manager___UNCLASS.CellLinkType);
			LinkType = accElement.Value;
			Report.Info("Link type = " + LinkType);	
			
			if ((LinkType == "Link 11A") || (LinkType == "Link 11B"))
				{
				TacViewLib.LinkSpecific.Surveillance.Air.ValidateTrack.ValidateAirTrackSimple.Link11 = true;
				TacViewLib.LinkSpecific.Surveillance.Surface.ValidateTrack.ValidateSurfaceTrackSimple.Link11 = true;
				TacViewLib.LinkSpecific.Surveillance.Subsurface.ValidateTrack.ValidateSubSurfaceTrackSimple.Link11 = true;
				TacViewLib.LinkSpecific.Surveillance.Land.ValidateTrack.ValidateLandTrackSimple.Link11 = true;
				TacViewLib.LinkSpecific.Surveillance.Space.ValidateTrack.ValidateSpaceTrackSimple.Link11 = true;
				}
		}
		
		
		public void TurnLinksOn()
		{
			Duration durr = 40000;  	// set timeout to 40 seconds
			Ranorex.Adapter.DefaultSearchTimeout = durr;
			
			
			switch(LinkType)
			{
				case "Link 16":
				case "Link 11A":
					
				if (Terminal == true)
					
					{
					Report.Info("Turning on Link " + currentLinkNum);
					Report.Info("Clicking FormSystem_Manager___UNCLASS1.CellOFF");
					repo.FormSystem_Manager___UNCLASS.CellOFF.Click();
					Report.Info("Validating Link " + currentLinkNum + " was turned On");	
					Validate.Exists(repo.FormSystem_Manager___UNCLASS.CellON);
					Report.Info("Validating Link " + currentLinkNum + " reflects a Down state");				
					Validate.Exists(repo.FormSystem_Manager___UNCLASS.CellDOWN);
					}
				
				else if (NTDS == true)
					
					{
					Report.Info("Turning on Link " + currentLinkNum);
					Report.Info("Clicking FormSystem_Manager___UNCLASS1.CellOFF");
					repo.FormSystem_Manager___UNCLASS.CellOFF.Click();
					Report.Info("Validating Link " + currentLinkNum + " was turned On");	
					Validate.Exists(repo.FormSystem_Manager___UNCLASS.CellON);
					}
				
				else
					
					{
					Report.Info("Turning on Link " + currentLinkNum);
					Report.Info("Clicking FormSystem_Manager___UNCLASS1.CellOFF");
					repo.FormSystem_Manager___UNCLASS.CellOFF.Click();
					Report.Info("Validating Link " + currentLinkNum + " was turned On");	
					Validate.Exists(repo.FormSystem_Manager___UNCLASS.CellON);
					Report.Info("Validating Link " + currentLinkNum + " goes Operational");				
					Validate.Exists(repo.FormSystem_Manager___UNCLASS.CellOPER);
					}
				
				break;
				
				
				case "Link 11B":
				case "NATO Link-1":
			    case "ATDL1-1":
				
				Report.Info("Turning on Link " + currentLinkNum);
				Report.Info("Clicking FormSystem_Manager___UNCLASS1.CellOFF");
				repo.FormSystem_Manager___UNCLASS.CellOFF.Click();
				Report.Info("Validating Link " + currentLinkNum + " was turned On");	
				Validate.Exists(repo.FormSystem_Manager___UNCLASS.CellON);
				Report.Info("Validating Link " + currentLinkNum + " becomes Active");	
				Validate.Exists(repo.FormSystem_Manager___UNCLASS.CellACTIVE);
				Report.Info("Validating Link " + currentLinkNum + " goes Operational");				
				Validate.Exists(repo.FormSystem_Manager___UNCLASS.CellOPER);
				
				break;
					
				default:
				Report.Error("Valid link type not specified, check parameters entered");
				break;
			}
		}


		private void Init()
		{
			// Your recording specific initialization code goes here.
		}

		public void TurnOffLinks()
		{
			int LinkNum = Convert.ToInt32(currentLinkNum);
			
			LinkNum--;
			
			Duration OrigDur = repo.FormSystem_Manager___UNCLASS.CellOPERInfo.SearchTimeout;
			repo.FormSystem_Manager___UNCLASS.CellOPERInfo.SearchTimeout = 500;	
			Duration OrigDur1 = repo.FormSystem_Manager___UNCLASS.CellONInfo.SearchTimeout;
			repo.FormSystem_Manager___UNCLASS.CellONInfo.SearchTimeout = 500;
			Duration OrigDur2 = repo.FormSystem_Manager___UNCLASS.CellACTIVEInfo.SearchTimeout;
			repo.FormSystem_Manager___UNCLASS.CellACTIVEInfo.SearchTimeout = 500;
			Duration OrigDur3 = repo.FormSystem_Manager___UNCLASS.CellDOWNInfo.SearchTimeout;
			repo.FormSystem_Manager___UNCLASS.CellDOWNInfo.SearchTimeout = 500;
			Duration OrigDur4 = repo.FormSystem_Manager___UNCLASS.SearchTimeout;
			repo.FormSystem_Manager___UNCLASS.SearchTimeout = 500;
			
			if (repo.FormSystem_Manager___UNCLASS.CellOPERInfo.Exists())
				{
				Report.Info("Link is currently OPER, Turning off link " + currentLinkNum);
				repo.FormSystem_Manager___UNCLASS.CellOPER.Click();
				Validate.Exists(repo.FormSystem_Manager___UNCLASS.CellOFF);
				}
			else if (repo.FormSystem_Manager___UNCLASS.CellONInfo.Exists())
				{
				Report.Info("Link is currently ON, Turning off link " + currentLinkNum);
				repo.FormSystem_Manager___UNCLASS.CellON.Click();
				Validate.Exists(repo.FormSystem_Manager___UNCLASS.CellOFF);
				}
			else if (repo.FormSystem_Manager___UNCLASS.CellACTIVEInfo.Exists())
				{
				Report.Info("Link is currently ACTIVE, Turning off link " + currentLinkNum);
				repo.FormSystem_Manager___UNCLASS.CellACTIVE.Click();
				Validate.Exists(repo.FormSystem_Manager___UNCLASS.CellOFF);
				}
			else if (repo.FormSystem_Manager___UNCLASS.CellDOWNInfo.Exists())
				{
				Report.Info("Link is currently DOWN, Turning off link " + currentLinkNum);
				repo.FormSystem_Manager___UNCLASS.CellDOWN.Click();
				Validate.Exists(repo.FormSystem_Manager___UNCLASS.CellOFF);
				}
			
			LinkNum++;
			repo.FormSystem_Manager___UNCLASS.CellOPERInfo.SearchTimeout = OrigDur;
			repo.FormSystem_Manager___UNCLASS.CellONInfo.SearchTimeout = OrigDur1;
			repo.FormSystem_Manager___UNCLASS.CellACTIVEInfo.SearchTimeout = OrigDur2;
			repo.FormSystem_Manager___UNCLASS.CellDOWNInfo.SearchTimeout = OrigDur3;
			repo.FormSystem_Manager___UNCLASS.SearchTimeout = OrigDur4;
			
		}
		
	}
}