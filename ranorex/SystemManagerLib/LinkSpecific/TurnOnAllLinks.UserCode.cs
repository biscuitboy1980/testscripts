///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using System.Windows.Forms;

using Ranorex;
using Ranorex.Core;

namespace SystemManagerLib.LinkSpecific
{
	/// <summary>
	/// The TurnOnAllLinks recording.
	/// </summary>
	public partial class TurnOnAllLinks
	{
		
		public static int NumLinks;

		public void FindNumLinks()
		{
			
			NumLinks = (repo.FormSystem_Manager___UNCLASS.LinkTable.Rows.Count - 1);
			Report.Info("Number of Links is:" + NumLinks);
			
		}

		public void TurnAllLinksON()
		{

			Report.Info("Turning on " + NumLinks + " Links.");
			
			Duration OrigDur = repo.FormSystem_Manager___UNCLASS.CellOFFInfo.SearchTimeout;
			repo.FormSystem_Manager___UNCLASS.CellOFFInfo.SearchTimeout = 1000;			
			Duration OrigDur1 = repo.FormSystem_Manager___UNCLASS.SearchTimeout;
			repo.FormSystem_Manager___UNCLASS.SearchTimeout = 1000;	
			
			
			for (int linknum = Convert.ToInt32(currentLinkNum); linknum<=NumLinks; linknum++)
			{
				currentLinkNum = Convert.ToString(linknum);
				if (repo.FormSystem_Manager___UNCLASS.CellOFFInfo.Exists())
					{
					Report.Info("Turning On Link " + linknum);
					repo.FormSystem_Manager___UNCLASS.CellOFF.Click();
					}
				else
					{
					Accessible accElement = new Accessible(repo.FormSystem_Manager___UNCLASS.LinkStateCell);  
					string LinkState = accElement.Value;
					Report.Info("Link " + linknum + " is currently " + LinkState);
					}	
				
			repo.FormSystem_Manager___UNCLASS.CellOFFInfo.SearchTimeout = OrigDur;
			repo.FormSystem_Manager___UNCLASS.SearchTimeout = OrigDur1;

			}
		}
			


		private void Init()
		{
			// Your recording specific initialization code goes here.
		}

	}
}
