///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////



using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using System.Windows.Forms;
using System.Configuration;
using Ranorex;
using Ranorex.Core;
namespace SystemManagerLib.LinkSpecific.PPLIRegression.J2_4PPLI
{
	/// <summary>
	/// The CreateSite recording.
	/// </summary>
	public partial class J2_4CreateSite
	{
		static J2_4CreateSite()
		{
			//Your recording specific initialization code goes here.
		}
		
		//************************************************************************************//
		//***********************Populates Variable with Unit Number**************************//
		//************************************************************************************//
		
		public void UnitNumber()
		{		
			Accessible accElement = new Accessible(repo.FormSystem_Manager___UNCLASS.TextUnit);  
		   	string UnitNum = accElement.Name;
		   	UnitNum = UnitNum.Remove(0, 6);
		   	UnitNum = UnitNum.Trim();
		   	TacViewLib.LinkSpecific.PPLIRegression.J2_4PPLI.J2_4ValidateSite.UnitNum = UnitNum;
		}
		
		//************************************************************************************//
		//*******************************Checks Indirect PPLI*********************************//
		//************************************************************************************//		

		public void CheckBoxIndirect_PPLI()
		{
			if (repo.FormSystem_Manager___UNCLASS.CheckBoxIndirect_PPLI.Checked == true)
			{
				Report.Info("Mouse Left Click item 'FormSystem_Manager___UNCLASS.CheckBoxIndirect_PPLI' at Center.");
				repo.FormSystem_Manager___UNCLASS.CheckBoxIndirect_PPLI.Click("Center");
			}
		}		
		
		//************************************************************************************//
		//**************************Enters Random Environment Value***************************//
		//************************************************************************************//
		
		public void Environment()
		{
			int x = 0;
			
			while (x < 2)
			{
				try
				{
				    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List listBox = "/form[@title='sm']/element/element/list[@accessiblerole='List']";
		       		listBox.Items[1].Select();
		       		listBox.Items[1].Click();
		   			Accessible accElement = new Accessible(repo.FormSystem_Manager___UNCLASS.ComboBox_Environment);  
	   				string EnvValue = accElement.Value;
		   			TacViewLib.LinkSpecific.PPLIRegression.J2_4PPLI.J2_4ValidateSite.Env = EnvValue;
	   				Report.Info("Environment Value Entered = " + EnvValue);
		       		TacViewLib.LinkSpecific.PPLIRegression.J2_4PPLI.J2_4ValidateSite.Env_OOO = false;
		   			x=2;		   			
				}
				catch (ArgumentOutOfRangeException e)
				{								   			
			   		x++;
			   		if (x == 1)
			   		{
			   			Report.Debug("List Count Out of Range for Environment, Re-Executing Function");
			   			Report.Debug(e.ToString());	
			   		}
			   		else if (x == 2)
			   		{
			   			Report.Debug("List Count Out of Range for Environment, List Item Will Not be Validated");
			   			Report.Debug(e.ToString());
			   			TacViewLib.LinkSpecific.PPLIRegression.J2_4PPLI.J2_4ValidateSite.Env_OOO = true;
			   		}
				}					
			}			
		}
		
		//************************************************************************************//
		//****************************Enters Random Platform Value****************************//
		//************************************************************************************//
		
		public void Platform()
		{
			int x = 0;
			
			while (x < 2)
			{
				try
				{
				    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List listBox = "/form[@title='sm']/element/element/list[@accessiblerole='List']";
					int count = listBox.Children.Count;
		            Random ASvalue = new Random();
					int ASnum = ASvalue.Next(1, count);
					listBox.Items[ASnum].Select();
					listBox.Items[ASnum].Click();
		   			Accessible accElement = new Accessible(repo.FormSystem_Manager___UNCLASS.ComboBox_Platform);  
	   				string PlatValue = accElement.Value;
		   			TacViewLib.LinkSpecific.PPLIRegression.J2_4PPLI.J2_4ValidateSite.Plat = PlatValue;
	   				Report.Info("Platform Value Entered = " + PlatValue);
		       		TacViewLib.LinkSpecific.PPLIRegression.J2_4PPLI.J2_4ValidateSite.Plat_OOO = false;
		   			x=2;		   			
				}
				catch (ArgumentOutOfRangeException e)
				{								   			
			   		x++;
			   		if (x == 1)
			   		{
			   			Report.Debug("List Count Out of Range for Platform, Re-Executing Function");
			   			Report.Debug(e.ToString());	
			   		}
			   		else if (x == 2)
			   		{
			   			Report.Debug("List Count Out of Range for Platform, List Item Will Not be Validated");
			   			Report.Debug(e.ToString());
			   			TacViewLib.LinkSpecific.PPLIRegression.J2_4PPLI.J2_4ValidateSite.Plat_OOO = true;
			   		}
				}					
			}			
		}	
		
		//************************************************************************************//
		//***********************Enters Random Platform Activity Value************************//
		//************************************************************************************//
		
		public void PlatformActivity()
		{
			int x = 0;
			
			while (x < 2)
			{
				try
				{
				    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List listBox = "/form[@title='sm']/element/element/list[@accessiblerole='List']";
					int count = listBox.Children.Count;
		            Random ASvalue = new Random();
					int ASnum = ASvalue.Next(1, count);
					listBox.Items[ASnum].Select();
					listBox.Items[ASnum].Click();
		   			Accessible accElement = new Accessible(repo.FormSystem_Manager___UNCLASS.ComboBox_PlatformActivity);  
	   				string PlatActValue = accElement.Value;
		   			TacViewLib.LinkSpecific.PPLIRegression.J2_4PPLI.J2_4ValidateSite.PlatAct = PlatActValue;
	   				Report.Info("Platform Activity Value Entered = " + PlatActValue);
		       		TacViewLib.LinkSpecific.PPLIRegression.J2_4PPLI.J2_4ValidateSite.PlatAct_OOO = false;
		   			x=2;		   			
				}
				catch (ArgumentOutOfRangeException e)
				{								   			
			   		x++;
			   		if (x == 1)
			   		{
			   			Report.Debug("List Count Out of Range for Platform Activity, Re-Executing Function");
			   			Report.Debug(e.ToString());	
			   		}
			   		else if (x == 2)
			   		{
			   			Report.Debug("List Count Out of Range for Platform Activity, List Item Will Not be Validated");
			   			Report.Debug(e.ToString());
			   			TacViewLib.LinkSpecific.PPLIRegression.J2_4PPLI.J2_4ValidateSite.PlatAct_OOO = true;
			   		}
				}					
			}			
		}			
		
		//************************************************************************************//
		//*******************************Enters Random NPS Value******************************//
		//************************************************************************************//
		
		public void NPS()
		{
			int x = 0;
			
			while (x < 2)
			{
				try
				{
				    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List listBox = "/form[@title='sm']/element/element/list[@accessiblerole='List']";
					int count = listBox.Children.Count;
		            Random ASvalue = new Random();
					int ASnum = ASvalue.Next(1, count);
					listBox.Items[ASnum].Select();
					listBox.Items[ASnum].Click();
					if (ASnum == 3)
					{
						NPS();
					}
		   			Accessible accElement = new Accessible(repo.FormSystem_Manager___UNCLASS.ComboBox_NPS);  
	   				string NPSValue = accElement.Value;
	   				TacViewLib.LinkSpecific.PPLIRegression.J2_4PPLI.J2_4ValidateSite.NPS = NPSValue.ToUpper();
	   				Report.Info("NPS Value Entered = " + NPSValue);
		       		TacViewLib.LinkSpecific.PPLIRegression.J2_4PPLI.J2_4ValidateSite.NPS_OOO = false;
		   			x=2;		   			
				}
				catch (ArgumentOutOfRangeException e)
				{								   			
			   		x++;
			   		if (x == 1)
			   		{
			   			Report.Debug("List Count Out of Range for NPS, Re-Executing Function");
			   			Report.Debug(e.ToString());	
			   		}
			   		else if (x == 2)
			   		{
			   			Report.Debug("List Count Out of Range for NPS, List Item Will Not be Validated");
			   			Report.Debug(e.ToString());
			   			TacViewLib.LinkSpecific.PPLIRegression.J2_4PPLI.J2_4ValidateSite.NPS_OOO = true;
			   		}
				}					
			}			
		}	
		
		//************************************************************************************//
		//***************************Enters Random Site Type Value****************************//
		//************************************************************************************//
		
		public void SiteType()
		{
			int x = 0;
			
			while (x < 2)
			{
				try
				{
				    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List listBox = "/form[@title='sm']/element/element/list[@accessiblerole='List']";
					int count = listBox.Children.Count;
		            Random ASvalue = new Random();
					int ASnum = ASvalue.Next(1, count);
					listBox.Items[ASnum].Select();
					listBox.Items[ASnum].Click();
		   			Accessible accElement = new Accessible(repo.FormSystem_Manager___UNCLASS.ComboBox_SiteType);  
	   				string SiteTypeValue = accElement.Value;
		   			TacViewLib.LinkSpecific.PPLIRegression.J2_4PPLI.J2_4ValidateSite.SiteType = SiteTypeValue;
	   				Report.Info("Site Type Value Entered = " + SiteTypeValue);
		       		TacViewLib.LinkSpecific.PPLIRegression.J2_4PPLI.J2_4ValidateSite.SiteType_OOO = false;
		   			x=2;		   			
				}
				catch (ArgumentOutOfRangeException e)
				{								   			
			   		x++;
			   		if (x == 1)
			   		{
			   			Report.Debug("List Count Out of Range for Site Type, Re-Executing Function");
			   			Report.Debug(e.ToString());	
			   		}
			   		else if (x == 2)
			   		{
			   			Report.Debug("List Count Out of Range for Site Type, List Item Will Not be Validated");
			   			Report.Debug(e.ToString());
			   			TacViewLib.LinkSpecific.PPLIRegression.J2_4PPLI.J2_4ValidateSite.SiteType_OOO = true;
			   		}
				}					
			}			
		}
		
		//************************************************************************************//
		//***********************Enters Random Generic Unit Type Value************************//
		//************************************************************************************//
		
		public void GenericUnitType()
		{
			int x = 0;
			
			while (x < 2)
			{
				try
				{
				    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List listBox = "/form[@title='sm']/element/element/list[@accessiblerole='List']";
					int count = listBox.Children.Count;
		            Random ASvalue = new Random();
					int ASnum = ASvalue.Next(1, count);
					listBox.Items[ASnum].Select();
					listBox.Items[ASnum].Click();
		   			Accessible accElement = new Accessible(repo.FormSystem_Manager___UNCLASS.ComboBox_GenericUnitType);  
	   				string GenericUnitTypeValue = accElement.Value;
	   				TacViewLib.LinkSpecific.PPLIRegression.J2_4PPLI.J2_4ValidateSite.GenericUnitType = GenericUnitTypeValue.ToUpper();
	   				Report.Info("Generic Unit Type Value Entered = " + GenericUnitTypeValue);
		       		TacViewLib.LinkSpecific.PPLIRegression.J2_4PPLI.J2_4ValidateSite.GenericUnitType_OOO = false;
		   			x=2;		   			
				}
				catch (ArgumentOutOfRangeException e)
				{								   			
			   		x++;
			   		if (x == 1)
			   		{
			   			Report.Debug("List Count Out of Range for Generic Unit Type, Re-Executing Function");
			   			Report.Debug(e.ToString());	
			   		}
			   		else if (x == 2)
			   		{
			   			Report.Debug("List Count Out of Range for Generic Unit Type, List Item Will Not be Validated");
			   			Report.Debug(e.ToString());
			   			TacViewLib.LinkSpecific.PPLIRegression.J2_4PPLI.J2_4ValidateSite.GenericUnitType_OOO = true;
			   		}
				}					
			}			
		}
		
		//************************************************************************************//
		//****************************Enters Random Strength Value****************************//
		//************************************************************************************//
		
		public void Strength()
		{
			int x = 0;
			
			while (x < 2)
			{
				try
				{
				    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List listBox = "/form[@title='sm']/element/element/list[@accessiblerole='List']";
					int count = listBox.Children.Count;
		            Random ASvalue = new Random();
					int ASnum = ASvalue.Next(1, count);
					listBox.Items[ASnum].Select();
					listBox.Items[ASnum].Click();
		   			Accessible accElement = new Accessible(repo.FormSystem_Manager___UNCLASS.ComboBox_Strength);  
	   				string StrengthValue = accElement.Value;
	   				StrengthValue = StrengthValue.Remove(StrengthValue.Length - 6, 6);				
		   			TacViewLib.LinkSpecific.PPLIRegression.J2_4PPLI.J2_4ValidateSite.Strength = StrengthValue;
	   				Report.Info("Strength Value Entered = " + StrengthValue);
		       		TacViewLib.LinkSpecific.PPLIRegression.J2_4PPLI.J2_4ValidateSite.Strength_OOO = false;
		       		x=2;
				}
				catch (ArgumentOutOfRangeException e)
				{								   			
			   		x++;
			   		if (x == 1)
			   		{
			   			Report.Debug("List Count Out of Range for Strength, Re-Executing Function");
			   			Report.Debug(e.ToString());	
			   		}
			   		else if (x == 2)
			   		{
			   			Report.Debug("List Count Out of Range for Strength, List Item Will Not be Validated");
			   			Report.Debug(e.ToString());
			   			TacViewLib.LinkSpecific.PPLIRegression.J2_4PPLI.J2_4ValidateSite.Strength_OOO = true;
			   		}
				}					
			}			
		}
		
		//************************************************************************************//
		//**************************Enters Random Mode 1 Value********************************//
		//************************************************************************************//
		
		public void Mode1()
		{		
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			string a = SharedFunctions.Random(0, 8);
			string b = SharedFunctions.Random(0, 4);
			string c = a + b;
			Keyboard.Press(c);
			TacViewLib.LinkSpecific.PPLIRegression.J2_2PPLI.J2_2ValidateSite.Mode1 = c.PadLeft(2, '0');
			Report.Info("Mode 1 Code Value Entered = " + c);
		}		
		
		//************************************************************************************//
		//**************************Enters Random Mode 2 Value********************************//
		//************************************************************************************//
		
		public void Mode2()
		{
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			string a = SharedFunctions.Random(1, 4095);
			string b = SharedFunctions.DecimalToBase(Convert.ToInt32(a), 8);
			Keyboard.Press(b);
			int c = Convert.ToInt32(b);
			string d = c.ToString("D4");
			TacViewLib.LinkSpecific.PPLIRegression.J2_4PPLI.J2_4ValidateSite.Mode2 = d;
   			Report.Info("Mode 2 Code Value Entered = " + b);
		}		
		
		//************************************************************************************//
		//**************************Enters Random Mode 3 Value********************************//
		//************************************************************************************//
		
		public void Mode3()
		{
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			string a = SharedFunctions.Random(1, 4095);
			string b = SharedFunctions.DecimalToBase(Convert.ToInt32(a), 8);
			Keyboard.Press(b);
			int c = Convert.ToInt32(b);
			string d = c.ToString("D4");
			TacViewLib.LinkSpecific.PPLIRegression.J2_4PPLI.J2_4ValidateSite.Mode3 = d;
   			Report.Info("Mode 3 Code Value Entered = " + b);
		}

		private void Init()
		{
			// Your recording specific initialization code goes here.
		}			
	}
}
