///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using System.Windows.Forms;
using System.IO;
using System.Net;
using System.Xml;
using System.Diagnostics;
using System.Management;
using Microsoft.Win32;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;

namespace InstallerLib.Install
{
	public partial class InstallWindowsAfterReboot
	{
		public string Wsvn;
		public string Wfile;
		public string TVversion;
		
		
		private void Init()
		{
			// Your recording specific initialization code goes here.
		}
		
		public void GetRevision()
			
		{		
			
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			
			WebClient Client2 = new WebClient ();
			
			
			switch(buildtype)
			{
				case "nightly":
				Client2.DownloadFile("http://hudsonserver:8080/job/ADSI-Win-Trunk-BAK/lastSuccessfulBuild/artifact/trunk/FILENAME.txt", "./BuildInfo/WinRevInfo.txt");
				break;
				
				case "incremental":
				Client2.DownloadFile("http://hudsonserver:8080/job/ADSI-Win-Trunk-Incremental/lastSuccessfulBuild/artifact/trunk/FILENAME.txt", "./BuildInfo/WinRevInfo.txt");
				break;
				
				case "promoted":
				Client2.DownloadFile("http://hudsonserver:8080/job/ADSI-Win-Trunk-BAK/PCI%20ADSI%20Test/artifact/trunk/FILENAME.txt", "./BuildInfo/WinRevInfo.txt");
				break;	
				
				default:
				Report.Error("No build type specified, check parameters entered");
				break;
			}
			
			Wsvn = SharedFunctions.GetLine(@".\BuildInfo\WinRevInfo.txt", 2);
			Wsvn = Wsvn.Trim();
			Report.Info("Windows SVN number = "+ Wsvn);
			
			
			
			/// Determines Windows Filename ///
			
	        Wfile = SharedFunctions.GetLine(@".\BuildInfo\WinRevInfo.txt", 1);
	        Wfile = Wfile.Trim();
			Report.Info("Windows Filename = "+ Wfile);

		}
				
		
		public void InstallLatestWin()
				{
				System.Diagnostics.Process InstallWin = new System.Diagnostics.Process();
				InstallWin.EnableRaisingEvents=false;
				InstallWin.StartInfo.FileName=@"/InstallCDS/ADSI/LatestWinBuild/V15WinSoftware.exe";
				InstallWin.StartInfo.Arguments=@"/qb /Lime ADSI_install.log";
				InstallWin.Start();
				
				Delay.Seconds(5);
				
				Report.Info("LeftClick FormSoftware_Update_Installa.ButtonFinish");
				repo.FormVersion_15_Windows_Softw.ButtonFinish.Click();
						
					if (repo.FormVersion_15_Windows_Softw.ButtonYesInfo.Exists())
							
						{
						Report.Info("LeftClick FormVersion_15_Windows_Softw.ButtonYes");
						repo.FormVersion_15_Windows_Softw.ButtonYes.Click();
						Report.Info("Installing ADSI software");
						}	

					InstallWin.WaitForInputIdle();
					InstallWin.WaitForExit();
						
				}
			
				public void DownloadTacView()
				{
				CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
				WebClient Client4 = new WebClient();
				Client4.DownloadFile("http://hudsonserver:8080/job/RealView-SprintBuilds/lastSuccessfulBuild/artifact/source/artifacts/svnversion.txt", "./BuildInfo/TVversion.txt");
				TVversion = SharedFunctions.GetLine(@".\BuildInfo\TVversion.txt", 2);
				TVversion = TVversion.Remove(0, 56);
				Report.Info("Downloading Latest Tacview Sprint Build, version " + TVversion);                 
				WebClient Client5 = new WebClient ();
				Client5.DownloadFile("http://hudsonserver:8080/job/RealView-SprintBuilds/lastSuccessfulBuild/artifact/source/artifacts/TacViewC2InstallCD.zip", "./InstallCDS/TacView/TacViewInstaller.zip");
				}
				
				public void UnzipTacView()
				{
				////// Unzip TacView zip file //////
				
				Console.WriteLine("Unzipping TacView Installer");
				Report.Info("Unzipping TacView Installer");
				System.Diagnostics.Process unzipTV = new System.Diagnostics.Process();
				unzipTV.EnableRaisingEvents=false;
				unzipTV.StartInfo.FileName=@"c:/Program Files/7-Zip/7z.exe";
				unzipTV.StartInfo.Arguments=@"x -y .\InstallCDS\TacView\TacViewInstaller.zip -oInstallCDS/TacView/" + TVversion;
				unzipTV.Start();
				unzipTV.WaitForExit();
				}
			
				public void InstallTacView()
				{
				///// Installs Latest Hudson TacViewC2 Software //////
				
				Console.WriteLine("Installing Latest Stable version of TacViewC2");
				Report.Info("Installing Latest Stable version of TacViewC2");
				System.Diagnostics.Process InstallTV = new System.Diagnostics.Process();
				InstallTV.EnableRaisingEvents=false;
				InstallTV.StartInfo.FileName=@"InstallCDS\TacView\" + TVversion + @"\TacViewC2InstallCD\Setup.exe";
				InstallTV.StartInfo.Arguments=@"/qb /Lime TacView_install.log";
				InstallTV.Start();
				InstallTV.WaitForExit();
				}
				
				
				
				public void Check7zip()
					
				{
					  Report.Info("Checking to see if 7-zip is installed");
				      RegistryKey key = Registry.LocalMachine;
				      RegistryKey ZipKey = key.OpenSubKey("SOFTWARE\\7-Zip");
				      bool ZipInstalled = ZipKey == null ? false : true;
				
				      if (!ZipInstalled)
				      	{
						Report.Info("7-zip not installed, installing 7-zip now");
						System.Diagnostics.Process Install7Zip = new System.Diagnostics.Process();
						Install7Zip.StartInfo.FileName=@"Apps\7z465.exe";
						Install7Zip.StartInfo.Arguments=@"/S";
						Install7Zip.Start();
				      	}
				      else
					    {
					    Report.Info("7-zip is installed");
					    }
				}


		public void DeleteService()
		{
			System.Diagnostics.Process RemoveService = new System.Diagnostics.Process();
			RemoveService.EnableRaisingEvents=false;
			RemoveService.StartInfo.FileName=@"DataFiles\UninstallService.bat";
			RemoveService.Start();
			RemoveService.WaitForExit();
			
		}

		public void KillDuplicateInstaller()
		{
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			SharedFunctions.KillProcess("V15WinSoftware.exe");
			
		}

		public void InstallLatestTV()
		{
			// Your code goes here. Code inside this method will not be changed by the code generator.
			
		}



	}
}
