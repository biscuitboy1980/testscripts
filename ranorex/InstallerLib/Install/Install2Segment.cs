///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;

namespace InstallerLib.Install
{
    /// <summary>
    /// The Install2Segment recording.
    /// </summary>
    [TestModule("e1ae6987-3073-4187-a8f3-b30f3f46de23", ModuleType.Recording, 1)]
    public partial class Install2Segment : ITestModule
    {
        /// <summary>
        /// Holds an instance of the InstallerLib.InstallHudsonRepository repository.
        /// </summary>
        public static InstallerLib.InstallHudsonRepository repo = InstallerLib.InstallHudsonRepository.Instance;

        static Install2Segment instance = new Install2Segment();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Install2Segment()
        {
            LinuxIP = "";
            LinuxUser = "";
            LinuxPass = "";
            buildtype = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Install2Segment Instance
        {
            get { return instance; }
        }

#region Variables

        string _LinuxIP;

        /// <summary>
        /// Gets or sets the value of variable LinuxIP.
        /// </summary>
        [TestVariable("c49834c5-097e-49ea-9639-f109520789ef")]
        public string LinuxIP
        {
            get { return _LinuxIP; }
            set { _LinuxIP = value; }
        }

        string _LinuxUser;

        /// <summary>
        /// Gets or sets the value of variable LinuxUser.
        /// </summary>
        [TestVariable("4edd1cce-eac3-46f7-b44b-50c6c1730fff")]
        public string LinuxUser
        {
            get { return _LinuxUser; }
            set { _LinuxUser = value; }
        }

        string _LinuxPass;

        /// <summary>
        /// Gets or sets the value of variable LinuxPass.
        /// </summary>
        [TestVariable("66d2071f-900b-449b-bc3e-3b5dc1a431ca")]
        public string LinuxPass
        {
            get { return _LinuxPass; }
            set { _LinuxPass = value; }
        }

        string _buildtype;

        /// <summary>
        /// Gets or sets the value of variable buildtype.
        /// </summary>
        [TestVariable("a28b2f96-5706-4db4-8c6e-1147ebdf5ebf")]
        public string buildtype
        {
            get { return _buildtype; }
            set { _buildtype = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "3.1.1")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "3.1.1")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 250;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.0;

            Init();

            GetCurrentDirectory();
            Delay.Milliseconds(0);
            
            CreateDirs();
            Delay.Milliseconds(0);
            
            GetRevision();
            Delay.Milliseconds(0);
            
            CompareSVN();
            Delay.Milliseconds(0);
            
            Is64BitSystem();
            Delay.Milliseconds(0);
            
            Check7zip();
            Delay.Milliseconds(0);
            
            DownloadLatestWin();
            Delay.Milliseconds(0);
            
            UnzipLatestWin();
            Delay.Milliseconds(0);
            
            InstallLatestWin();
            Delay.Milliseconds(0);
            
            DownloadTacView();
            Delay.Milliseconds(0);
            
            UnzipTacView();
            Delay.Milliseconds(0);
            
            InstallTacView();
            Delay.Milliseconds(0);
            
            PingLinux();
            Delay.Milliseconds(0);
            
            InstallLinux();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Success, "User", "2 Segment Installation was successfull", new RecordItemIndex(14));
            
        }

#region Image Feature Data
#endregion
    }
}
