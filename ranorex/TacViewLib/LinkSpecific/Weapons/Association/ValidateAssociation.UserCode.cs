///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
// 
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;

namespace TacViewLib.LinkSpecific.Weapons.Association
{
    public partial class ValidateAssociation
    {
		public static string track1;	
		public static string track2;	
		
		public static bool ZoomFlag;
		
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void Validate_AssociationLine()
        {
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (AccessibleName='Associate') on item 'FormTacViewC2.PictureAssociate'.", repo.FormTacViewC2.PictureAssociateInfo, new RecordItemIndex(-1));
            Validate.Attribute(repo.FormTacViewC2.PictureAssociateInfo, "AccessibleName", "Associate", Validate.DefaultMessage, false);
        }
        
		//************************************************************************************//
		//*****************************Sets Track Number in Repo******************************//
		//************************************************************************************//
		
		public void SetTrack1NumberInRepo()
		{
			tracknumber = track1;	
			Report.Info("Setting tracknumber to " + tracknumber);
		}        
		
		//************************************************************************************//
		//*******************************Right Clicks on Track********************************//
		//************************************************************************************//		
		
		public void RightClickTrack()
		{			
			Duration OrigDur = repo.FormTacViewC2.PictureTrackInfo.SearchTimeout;
			repo.FormTacViewC2.PictureTrackInfo.SearchTimeout = 2000;			
			
			if (repo.FormTacViewC2.PictureTrackInfo.Exists())
			{
				Report.Info("Mouse Right Click item 'FormTacViewC2.PictureTrack' at Center.");
				repo.FormTacViewC2.PictureTrack.Click(MouseButtons.Right);
			}
			else
			{
				ZoomFlag = true;
				Report.Info("Track # " + track1 + " not found on the current display, going to world wide view");
				Report.Screenshot();
				repo.FormTacViewC2.ButtonZoom_Out_Max.Click();
				
				if (repo.FormTacViewC2.PictureTrackInfo.Exists())
				{
					Report.Info("Mouse Right Click item 'FormTacViewC2.PictureTrack' at Center.");
					repo.FormTacViewC2.PictureTrack.Click(MouseButtons.Right);
				}
				else
				{
					Report.Error("Unable to find Track # " + track1 + " anywhere in the world");
					Report.Screenshot();
					return;
				}				
			}
			
			repo.FormTacViewC2.PictureTrackInfo.SearchTimeout = OrigDur;
		}	
		
		//************************************************************************************//
		//********************Opens Track Dialog For Corresponding Track**********************//
		//************************************************************************************//
		
		public void ViewTrack1Properties()
		{			
			Duration OrigDur = repo.FormRealView.MenuItemTracksInfo.SearchTimeout;
			repo.FormRealView.MenuItemTracksInfo.SearchTimeout = 1000;
			Duration OrigDur1 = repo.FormRealView.MenuItemTrackNumberInfo.SearchTimeout;
			repo.FormRealView.MenuItemTrackNumberInfo.SearchTimeout = 1000;			
			
			if (repo.FormRealView.MenuItemTracksInfo.Exists())
			{
				Report.Info("Mouse Left Click item 'FormRealView.MenuItemTracks'");
			    repo.FormRealView.MenuItemTracks.Click();
			    Report.Info("Mouse Left Click item 'FormTracks.MenuItemC2_HOST_Track'");
		        repo.FormTracks.MenuItemC2_HOST_Track.Click();
		       	Report.Info("Mouse Left Click item 'FormTOAD.MenuItemTrack_Properties");
				repo.FormTOAD.MenuItemTrack_Properties.Click();
			}			
			else if (repo.FormRealView.MenuItemTrackNumberInfo.Exists())
			{
			    Report.Info("Mouse Left Click item 'repo.FormRealView.MenuItemTrackNumber'");
		        repo.FormRealView.MenuItemTrackNumber.Click();
		       	Report.Info("Mouse Left Click item 'FormTOAD.MenuItemTrack_Properties");
				repo.FormTOAD.MenuItemTrack_Properties.Click();
			}
			
			repo.FormRealView.MenuItemTracksInfo.SearchTimeout = OrigDur;
			repo.FormRealView.MenuItemTrackNumberInfo.SearchTimeout = OrigDur1;
		}

		//************************************************************************************//
		//*******************************Validates Track Number*******************************//
		//************************************************************************************//
		
        public void Validate_ListItemTrack1_Number()
        {
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (AccessibleValue='track1') on item 'FormAssociations.ListItemTrack_Number'.", repo.FormAssociations.ListItemTrack_NumberInfo, new RecordItemIndex(-1));
            Validate.Attribute(repo.FormAssociations.ListItemTrack_NumberInfo, "AccessibleValue", track1, Validate.DefaultMessage, false);
        }

		//************************************************************************************//
		//************************Validates Associated Track Number***************************//
		//************************************************************************************//
		
        public void Validate_ListItemAssociated_Track1_Number()
        {
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (AccessibleValue='track2') on item 'FormAssociations.ListItemAssociated_Track_Number'.", repo.FormAssociations.ListItemAssociated_Track_NumberInfo, new RecordItemIndex(-1));
            Validate.Attribute(repo.FormAssociations.ListItemAssociated_Track_NumberInfo, "AccessibleValue", track2, Validate.DefaultMessage, false);
        }
        
		//************************************************************************************//
		//*****************************Sets Track Number in Repo******************************//
		//************************************************************************************//
		
		public void SetTrack2NumberInRepo()
		{
			tracknumber = track2;	
			Report.Info("Setting tracknumber to " + tracknumber);
		}	
	
		//************************************************************************************//
		//********************Opens Track Dialog For Corresponding Track**********************//
		//************************************************************************************//
		
		public void ViewTrack2Properties()
		{			
			Duration OrigDur = repo.FormRealView.MenuItemTracksInfo.SearchTimeout;
			repo.FormRealView.MenuItemTracksInfo.SearchTimeout = 1000;
			Duration OrigDur1 = repo.FormRealView.MenuItemTrackNumber2Info.SearchTimeout;
			repo.FormRealView.MenuItemTrackNumberInfo.SearchTimeout = 1000;			
			
			if (repo.FormRealView.MenuItemTracksInfo.Exists())
			{
				Report.Info("Mouse Left Click item 'FormRealView.MenuItemTracks'");
			    repo.FormRealView.MenuItemTracks.Click();
			    Report.Info("Mouse Left Click item 'FormTracks.MenuItemC2_HOST_Track'");
		        repo.FormTracks.MenuItemC2_HOST_2_Track.Click();
		       	Report.Info("Mouse Left Click item 'FormTOAD.MenuItemTrack_Properties");
				repo.FormTOAD.MenuItemTrack_Properties.Click();
			}			
			else if (repo.FormRealView.MenuItemTrackNumberInfo.Exists())
			{
			    Report.Info("Mouse Left Click item 'repo.FormRealView.MenuItemTrackNumber'");
		        repo.FormRealView.MenuItemTrackNumber2.Click();
		       	Report.Info("Mouse Left Click item 'FormTOAD.MenuItemTrack_Properties");
				repo.FormTOAD.MenuItemTrack_Properties.Click();
			}
			
			repo.FormRealView.MenuItemTracksInfo.SearchTimeout = OrigDur;
			repo.FormRealView.MenuItemTrackNumber2Info.SearchTimeout = OrigDur1;
		}

		//************************************************************************************//
		//*******************************Validates Track Number*******************************//
		//************************************************************************************//
		
        public void Validate_ListItemTrack2_Number()
        {
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (AccessibleValue='track1') on item 'FormAssociations.ListItemTrack_Number'.", repo.FormAssociations.ListItemTrack_NumberInfo, new RecordItemIndex(-1));
            Validate.Attribute(repo.FormAssociations.ListItemTrack_NumberInfo, "AccessibleValue", track1, Validate.DefaultMessage, false);
        }

		//************************************************************************************//
		//************************Validates Associated Track Number***************************//
		//************************************************************************************//
		
        public void Validate_ListItemAssociated_Track2_Number()
        {
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (AccessibleValue='track2') on item 'FormAssociations.ListItemAssociated_Track_Number'.", repo.FormAssociations.ListItemAssociated_Track_NumberInfo, new RecordItemIndex(-1));
            Validate.Attribute(repo.FormAssociations.ListItemAssociated_Track_NumberInfo, "AccessibleValue", track2, Validate.DefaultMessage, false);
        }      
        
		//************************************************************************************//
		//****************************Drops Corresponding Track*******************************//
		//************************************************************************************//
		
		public void DropTrack()
		{			
			Weapons.DropTrack.DropTrack.Start();			
		}	        
        
		//************************************************************************************//
		//*****************************Sets Track Number in Repo******************************//
		//************************************************************************************//
		
		public void SetDropTrack1NumberInRepo()
		{
			tracknumber = track1;	
			Report.Info("Setting tracknumber to " + tracknumber);
		}
		
		//************************************************************************************//
		//****************************Drops Corresponding Track*******************************//
		//************************************************************************************//
		
		public void DropTrack2()
		{			
			Weapons.DropTrack.DropTrack.multidrop = true;
			Weapons.DropTrack.DropTrack.Start();			
		}		
		
		//************************************************************************************//
		//***************************Validates Track is Dropped*******************************//
		//************************************************************************************//
		
		public void Validate_DropTrack1()
		{
			Duration OrigDur = repo.FormTacViewC2.PictureTrackInfo.SearchTimeout;
			repo.FormTacViewC2.PictureTrackInfo.SearchTimeout = 4000;

			Report.Info("Validating Track #" + track1 + " was dropped");
	
			bool result = Validate.NotExists(repo.FormTacViewC2.PictureTrackInfo, Validate.DefaultMessage, false);
			
			if (result == true)
			{
				Report.Success("Successfully dropped track #" + track1);
			}
			else
			{
				Report.Debug("Track #" + track1 + " failed to drop within 4 seconds, proceeding to next track creation.");
				Report.Screenshot();				
			}
			
			repo.FormTacViewC2.PictureTrackInfo.SearchTimeout = OrigDur;
		}	   
		
		//************************************************************************************//
		//***************************Validates Track is Dropped*******************************//
		//************************************************************************************//
		
		public void Validate_DropTrack2()
		{
			Duration OrigDur = repo.FormTacViewC2.PictureTrackInfo.SearchTimeout;
			repo.FormTacViewC2.PictureTrackInfo.SearchTimeout = 4000;

			Report.Info("Validating Track #" + track2 + " was dropped");
	
			bool result = Validate.NotExists(repo.FormTacViewC2.PictureTrackInfo, Validate.DefaultMessage, false);
			
			if (result == true)
			{
				Report.Success("Successfully dropped track #" + track2);
			}
			else
			{
				Report.Debug("Track #" + track2 + " failed to drop within 4 seconds, proceeding to next track creation.");
				Report.Screenshot();				
			}
			
			repo.FormTacViewC2.PictureTrackInfo.SearchTimeout = OrigDur;
		}	  		
		
		//************************************************************************************//
		//*****************************Sets Track Number in Repo******************************//
		//************************************************************************************//
		
		public void SetDropTrack2NumberInRepo()
		{
			tracknumber = track2;	
			Report.Info("Setting tracknumber to " + tracknumber);
		}
    }
}