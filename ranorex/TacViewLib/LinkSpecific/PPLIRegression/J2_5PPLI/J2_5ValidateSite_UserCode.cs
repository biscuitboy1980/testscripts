///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////



using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using System.Windows.Forms;

using Ranorex;
using Ranorex.Core;

namespace TacViewLib.LinkSpecific.PPLIRegression.J2_5PPLI
{
	/// <summary>
	/// The ValidateSite recording.
	/// </summary>
	public partial class J2_5ValidateSite
	{		
		//Variables
		public static string UnitNum;
		public static bool ZoomFlag = false;
		
		public static string Env;
		public static string Plat;
		public static string PlatAct;
		public static string NPS;
		public static string SiteType;
		public static string GenericUnitType;
		public static string Strength;
		public static string Mode1;
		public static string Mode2;
		public static string Mode3;
		public static string SpecType;
		public static string ActiveInd;
		public static string PosTimeQuality;
		
		//Out of Range Flags
		public static bool Env_OOO;
		public static bool Plat_OOO;
		public static bool PlatAct_OOO;
		public static bool NPS_OOO;
		public static bool SiteType_OOO;
		public static bool GenericUnitType_OOO;
		public static bool Strength_OOO;
		public static bool SpecType_OOO;
		public static bool ActiveInd_OOO;
		
		static J2_5ValidateSite()
		{
			//Your recording specific initialization code goes here.
		}
		
		//************************************************************************************//
		//********************************Enters Unit Number**********************************//
		//************************************************************************************//
		
		public void KeyboardUnit()
		{
			Report.Info("Key 'UnitNum' Press.");
			tracknumber = UnitNum;
			Keyboard.Press(UnitNum);
		}			
		
		//************************************************************************************//
		//**********************************Centers On Unit***********************************//
		//************************************************************************************//
		
		public void JUCenter()
		{
			Duration OrigDur1 = repo.FormRealView.MenuItemTrackNumsInfo.SearchTimeout;
			repo.FormRealView.MenuItemTrackNumsInfo.SearchTimeout = 500;
			
			Duration OrigDur2 = repo.FormRealView.MenuItemTracksInfo.SearchTimeout;
			repo.FormRealView.MenuItemTracksInfo.SearchTimeout = 500;
			
			if (repo.FormRealView.MenuItemTracksInfo.Exists())
			{
				Report.Info("Mouse Left Click item 'FormRealView.MenuItemTracks' at Center.");
				repo.FormRealView.MenuItemTracks.Click("Center");
				Report.Info("Mouse Left Click item 'FormRealView.MenuItemTrackNums' at Center.");
				Accessible site = @"/form[@title='Tracks']/contextmenu[1]/menuitem[@accessiblename~'.*Track#" + UnitNum + "$']";
   				Accessible accElement = new Accessible(site);  
				site.Click("Center");	
				repo.FormConnection1.MenuItemCenter_On_Track.Click("Center");
			}			
			else if (repo.FormRealView.MenuItemTrackNumsInfo.Exists())
				{
				Report.Info("Mouse Left Click item 'FormRealView.MenuItemTrackNums' at Center.");
				Accessible site = @"/form[@title='' and @processname='RealView' and @class~'Afx:00*']/contextmenu[1]/menuitem[@accessiblename~'.*Track#" + UnitNum + "']";
   				Accessible accElement = new Accessible(site);  
				site.Click("Center");	
				repo.FormConnection1.MenuItemCenter_On_Track.Click("Center");
				}
			else
				{
				Report.Info("Mouse Left Click item 'FormRealView.MenuItemCenter_On_Track' at Center.");
				repo.FormRealView.MenuItemCenter_On_Track.Click();
				}
			
			repo.FormRealView.MenuItemTrackNumsInfo.SearchTimeout = OrigDur1;	
			repo.FormRealView.MenuItemTracksInfo.SearchTimeout = OrigDur2;	
		}		
		
		//************************************************************************************//
		//***************************Creates Run-Time Repo Items******************************//
		//************************************************************************************//		

		public void CreateTrackRepoItems()
		{			
			string currentPath = repo.FormTacViewC2.PictureSiteInfo.Path.ToString();
			repo.FormTacViewC2.PictureSiteInfo.Path = currentPath.Replace("%track%", UnitNum);
			Report.Info("Setting repo item FormTacViewC2.PictureSite to " + repo.FormTacViewC2.PictureSiteInfo.Path.ToString());							
			
			string currentPath2 = repo.FormRealView.MenuItemSiteNumber2Info.Path.ToString();
			repo.FormRealView.MenuItemSiteNumber2Info.Path = currentPath2.Replace("%track%", UnitNum);
			Report.Info("Setting repo item FormRealView.MenuItemSiteNumber2 to " + repo.FormRealView.MenuItemSiteNumber2Info.Path.ToString());		
		}
		
		//************************************************************************************//
		//********************************Right Clicks Track**********************************//
		//************************************************************************************//		
		
		public void RightClickTrack()
		{			
			Duration OrigDur = repo.FormTacViewC2.PictureSiteInfo.SearchTimeout;
			repo.FormTacViewC2.PictureSiteInfo.SearchTimeout = 2000;			
			
			if (repo.FormTacViewC2.PictureSiteInfo.Exists())
			{
				Report.Info("Mouse Right Click item 'FormTacViewC2.PictureSite' at Center.");
				repo.FormTacViewC2.PictureSite.Click(MouseButtons.Right);
			}
			else
			{
				ZoomFlag = true;
				Report.Info("Site # " + UnitNum + " not found on the current display, going to world wide view");
				Report.Screenshot();
				repo.FormTacViewC2.ButtonZoom_Out_Max.Click();
				
				if (repo.FormTacViewC2.PictureSiteInfo.Exists())
				{
					Report.Info("Mouse Right Click item 'FormTacViewC2.PictureSite' at Center.");
					repo.FormTacViewC2.PictureSite.Click(MouseButtons.Right);
				}
				else
				{
					Report.Error("Unable to find Site # " + UnitNum + " anywhere in the world");
					Report.Screenshot();
					return;
				}				
			}
			
			repo.FormTacViewC2.PictureSiteInfo.SearchTimeout = OrigDur;
		}		
		
		//************************************************************************************//
		//*******************Opens Track Dialog For Corresponding Track***********************//
		//************************************************************************************//
		
		public void ViewTrackProperties()
		{			
			Duration OrigDur = repo.FormRealView.MenuItemTracksInfo.SearchTimeout;
			repo.FormRealView.MenuItemTracksInfo.SearchTimeout = 1000;
			Duration OrigDur1 = repo.FormRealView.MenuItemTrackNumber2Info.SearchTimeout;
			repo.FormRealView.MenuItemTrackNumber2Info.SearchTimeout = 1000;			
			
			if (repo.FormRealView.MenuItemTracksInfo.Exists())
			{
				Report.Info("Mouse Left Click item 'FormRealView.MenuItemTracks'");
			    repo.FormRealView.MenuItemTracks.Click();
			    Report.Info("Mouse Left Click item 'FormTracks.MenuItemC2_HOST_2_Track'");
		        repo.FormTracks.MenuItemConnection2_Track.Click();
		       	Report.Info("Mouse Left Click item 'FormTOAD2.MenuItemTrack_Properties");
				repo.FormConnection2.MenuItemTrack_Properties.Click();
			}			
			else if (repo.FormRealView.MenuItemTrackNumber2Info.Exists())
			{
			    Report.Info("Mouse Left Click item 'repo.FormRealView.MenuItemTrackNumber2'");
		        repo.FormRealView.MenuItemTrackNumber2.Click();
		       	Report.Info("Mouse Left Click item 'FormTOAD2.MenuItemTrack_Properties");
				repo.FormConnection2.MenuItemTrack_Properties.Click();
			}
			
			repo.FormRealView.MenuItemTracksInfo.SearchTimeout = OrigDur;
			repo.FormRealView.MenuItemTrackNumber2Info.SearchTimeout = OrigDur1;
		}	
		
		//************************************************************************************//
		//******************************Validates Track Number********************************//
		//************************************************************************************//
				
		public void ValidateTrackNumber()
		{
			Report.Info("Validating AttributeEqual (Text='(Unit Number)') on item 'repo.FormMain__Site_TN.ListItemTrack_NumberInfo'.");
			Report.Info("Value Entered = " + UnitNum);
			Validate.Attribute(repo.FormMain__Site_TN.ListItemTrack_NumberInfo, "AccessibleValue", UnitNum, Validate.DefaultMessage, false);
		}
		
		//************************************************************************************//
		//*******************************Validates Track Type*********************************//
		//************************************************************************************//
				
		public void ValidateTrackType()
		{
			Report.Info("Validating AttributeEqual (Text='Site') on item 'repo.FormMain__Site_TN.ListItemTrack_TypeInfo'.");
			Report.Info("Value Entered = Site");
			Validate.Attribute(repo.FormMain__Site_TN.ListItemTrack_TypeInfo, "AccessibleValue", "Site", Validate.DefaultMessage, false);
		}		
		
		//************************************************************************************//
		//***************************Validates Site Environment*******************************//
		//************************************************************************************//
				
		public void ValidateSiteEnvironment()
		{
			if (!Env_OOO)
			{		
				Report.Info("Validating AttributeEqual (Text='(Env)') on item 'repo.FormMain__Site_TN.ListItemSite_Environ_CategoryInfo'.");
				Report.Info("Value Entered = " + Env);
				Validate.Attribute(repo.FormMain__Site_TN.ListItemSite_Environ_CategoryInfo, "AccessibleValue", Env, Validate.DefaultMessage, false);
			}
		}			
		
		//************************************************************************************//
		//********************************Validates Platform**********************************//
		//************************************************************************************//
				
		public void ValidatePlatform()
		{
			if (!Plat_OOO)
			{
				Report.Info("Validating AttributeEqual (Text='(Plat)') on item 'repo.FormMain__Site_TN.ListItemPlatformInfo'.");
				Report.Info("Value Entered = " + Plat);
				Validate.Attribute(repo.FormMain__Site_TN.ListItemPlatformInfo, "AccessibleValue", Plat, Validate.DefaultMessage, false);
			}
		}			
		
		//************************************************************************************//
		//********************************Validates Activity**********************************//
		//************************************************************************************//
				
		public void ValidateActivity()
		{
			if (!PlatAct_OOO)
			{
				Report.Info("Validating AttributeEqual (Text='(PlatAct)') on item 'repo.FormMain__Site_TN.ListItemActivityInfo'.");
				Report.Info("Value Entered = " + PlatAct);
				Validate.Attribute(repo.FormMain__Site_TN.ListItemActivityInfo, "AccessibleValue", PlatAct, Validate.DefaultMessage, false);
			}
		}			
		
		//************************************************************************************//
		//********************************Validates Strength**********************************//
		//************************************************************************************//
				
		public void ValidateStrength()
		{
			if (!Strength_OOO)
			{
				Report.Info("Validating AttributeEqual (Text='(Strength)') on item 'repo.FormMain__Site_TN.ListItemStrengthInfo'.");
				Report.Info("Value Entered = " + Strength);
				Validate.Attribute(repo.FormMain__Site_TN.ListItemStrengthInfo, "AccessibleValue", Strength, Validate.DefaultMessage, false);
			}
		}		

		//************************************************************************************//
		//*******************************Validates Mode 1 Code********************************//
		//************************************************************************************//
				
		public void ValidateMode1()
		{
			Report.Info("Validating AttributeEqual (Text='(Mode1)') on item 'repo.FormMain__Site_TN.ListItemMode_1_Code'.");
			Report.Info("Value Entered = " + Mode1);
			Validate.Attribute(repo.FormMain__Site_TN.ListItemMode_1_CodeInfo, "AccessibleValue", Mode1, Validate.DefaultMessage, false);
		}	
		
		//************************************************************************************//
		//*******************************Validates Mode 2 Code********************************//
		//************************************************************************************//
				
		public void ValidateMode2()
		{
			Report.Info("Validating AttributeEqual (Text='(Mode2)') on item 'repo.FormMain__Site_TN.ListItemMode_2_Code'.");
			Report.Info("Value Entered = " + Mode2);
			Validate.Attribute(repo.FormMain__Site_TN.ListItemMode_2_CodeInfo, "AccessibleValue".TrimStart('0'), Mode2, Validate.DefaultMessage, false);
		}					
		
		//************************************************************************************//
		//*******************************Validates Mode 3 Code********************************//
		//************************************************************************************//
				
		public void ValidateMode3()
		{
			Report.Info("Validating AttributeEqual (Text='(Mode3)') on item 'repo.FormMain__Site_TN.ListItemMode_3_Code'.");
			Report.Info("Value Entered = " + Mode3);
			Validate.Attribute(repo.FormMain__Site_TN.ListItemMode_3_CodeInfo, "AccessibleValue", Mode3, Validate.DefaultMessage, false);
		}		
		
		//************************************************************************************//
		//*******************Validates Network Participation Status Indicator*****************//
		//************************************************************************************//
				
		public void ValidateNPS()
		{
//			if (!NPS_OOO)
//			{
//				Report.Info("Validating AttributeEqual (Text='(NPS)') on item 'repo.FormMain__Site_TN.ListItemNetwork_Participation_Status_Ind'.");
//				Report.Info("Value Entered = " + NPS);
//				Validate.Attribute(repo.FormMain__Site_TN.ListItemNetwork_Participation_Status_Ind, "AccessibleValue", NPS, Validate.DefaultMessage, false);
//			}
		}		
		
		//************************************************************************************//
		//******************************Validates Indirect Indicator**************************//
		//************************************************************************************//
				
		public void ValidateIndirectIndicator()
		{
			Report.Info("Validating AttributeEqual (Text='Indirect') on item 'repo.FormMain__Site_TN.ListItemIndirect_IndicatorInfo'.");
			Report.Info("Value Entered = Direct");
			Validate.Attribute(repo.FormMain__Site_TN.ListItemIndirect_IndicatorInfo, "AccessibleValue", "Direct", Validate.DefaultMessage, false);
		}

		private void Init()
		{
			// Your recording specific initialization code goes here.
		}	
	}
}
