///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using System.Windows.Forms;

using CommonUtilLib;
using Ranorex;
using Ranorex.Core;

namespace TacViewLib.LinkSpecific.Surveillance.EW.ValidateTrack
{
	/// <summary>
	/// The ValidateTrackRegression recording.
	/// </summary>

	public partial class EWValidateTrackRegression
	{	
		public static bool ZoomFlag = false;
		
		public static string TrackNum;
		
		//Basic Info
		public static string FoB;
		public static string ID;
		public static string EC;
		public static string Plat;		
		public static string Act;	
		public static string SType;	
		
		public static bool PosVelFlag;
		public static bool AOPFlag;
		public static bool BearFlag;
		
		//Position & Velocity
		public static string Alt;
		public static string Vel;
		public static string Crs;
		public static string MagCrs;
		public static string ElAng;
		
		//Interface Info
		public static string Hi;
		public static string RU;
		
		public static bool HIFlag;

		//Indicators
		public static string SPI;
		public static string HR;
		public static string MN;
		
		public static bool SPIFlag;

		//EW Tactical Info
		public static string ModeN;
		public static string Bear;
		public static string BearAcc;
		public static string BearOrig;
		public static string EmitFun;
		public static string EmitNI;
		public static string EmitNum;
		public static string EmitCon;
		public static string WRM;
		public static string PEC;
		
		public static bool OrigFlag;
		
		//Frequency
		public static string FRI;
		public static string Freq1;
		public static string Freq1U;
		public static string Freq2;
		public static string Freq2U;
		
		public static bool FRIFlag;
		
		//AOP Info
		public static string CirSq;
		public static string AxisMaj;
		public static string AxisMin;
		public static string Orient;
				
		//Other TNs
		public static string IDL;
		public static string TADIL;
		public static string ATDL1;
		public static string NL1;
		public static string TADILJ;
		public static string Ext;	
		
		//Out of Range Flags
		public static bool FoB_OOR;
		public static bool ID_OOR;
		public static bool EnvCat_OOR;
		public static bool Plat_OOR;
		public static bool Stype_OOR;
		public static bool HiPri_OOR;
		public static bool SPI_OOR;
		public static bool BearOr_OOR;
		public static bool BearAcc_OOR;
		public static bool ENI_OOR;
		public static bool EMCon_OOR;
		public static bool RWRM_OOR;
		public static bool PlatEvalCon_OOR;
		public static bool FRI_OOR;
		public static bool Freq1Un_OOR;
		public static bool CirSqr_OOR;
		
		//************************************************************************************//
		//***************************Validates Fix or Bearing Value***************************//
		//************************************************************************************//
				
		public void ValidateFoB()
		{
			if (!FoB_OOR)
			{
			Report.Info("Validating AttributeEqual (Text='(Fix or Bearing)') on item 'repo.FormMain__EW_TN.ListItemFix_Or_Bearing_Descripto'.");
			Report.Info("Value Entered = " + FoB);
			Validate.Attribute(repo.FormMain__EW_TN.ListItemFix_Or_Bearing_Descripto, "AccessibleValue", FoB, Validate.DefaultMessage, false);
			}
		}			
		
		//************************************************************************************//
		//******************************Validates Identity Value******************************//
		//************************************************************************************//
				
		public void ValidateId()
		{
			if (!ID_OOR)
			{
			Report.Info("Validating AttributeEqual (Text='(Identity)') on item 'repo.FormMain__EW_TN.ListItemIdentity'.");
			Report.Info("Value Entered = " + ID);
			Validate.Attribute(repo.FormMain__EW_TN.ListItemIdentity, "AccessibleValue", ID, Validate.DefaultMessage, false);
			}
		}		

		//************************************************************************************//
		//***********************Validates Environment/Categoty Value*************************//
		//************************************************************************************//
				
		public void ValidateEnvCat()
		{
			if (!EnvCat_OOR)
			{
			Report.Info("Validating AttributeEqual (Text='(Environment/Category)') on item 'repo.FormMain__EW_TN.ListItemEnviron_Category'.");
			Report.Info("Value Entered = " + EC);
			Validate.Attribute(repo.FormMain__EW_TN.ListItemEnviron_Category, "AccessibleValue", EC, Validate.DefaultMessage, false);
			}
		}		
		
		//************************************************************************************//
		//******************************Validates Platform Value******************************//
		//************************************************************************************//
				
		public void ValidatePlat()
		{
			if (!Plat_OOR)
			{
			Report.Info("Validating AttributeEqual (Text='(Platform)') on item 'repo.FormMain__EW_TN.ListItemPlatform'.");
			Report.Info("Value Entered = " + Plat);
			Validate.Attribute(repo.FormMain__EW_TN.ListItemPlatform, "AccessibleValue", Plat, Validate.DefaultMessage, false);
			}
		}	
		
		//************************************************************************************//
		//***************************Validates Specific Type Value****************************//
		//************************************************************************************//
				
		public void ValidateSType()
		{
			if (!Stype_OOR)
			{
			Report.Info("Validating AttributeEqual (Text='(Specific Type)') on item 'repo.FormMain__EW_TN.ListItemSpecific_Type'.");
			Report.Info("Value Entered = " + SType);
			Validate.Attribute(repo.FormMain__EW_TN.ListItemSpecific_Type, "AccessibleValue", SType, Validate.DefaultMessage, false);
			}
		}	
		
		//************************************************************************************//
		//**************************Validates Elevation Angle Value***************************//
		//************************************************************************************//
				
		public void ValidateElAng()
		{
			if (BearFlag)
			{
				Accessible accElement = new Accessible(repo.FormMain__EW_TN.ListItemElevation_Angle);
				string RxElAng = accElement.Value;
				Report.Info("Validating AttributeEqual (Text='(Elevation Angle)') on item 'repo.FormMain__EW_TN.ListItemElevation_Angle'.");
				Report.Info("Value Entered = " + ElAng);
				Report.Info("Value Received = " + RxElAng);
				Report.Info("Allowable Deviation = +/- 1 Units");
				Validate.IsTrue((Convert.ToDouble(RxElAng) > Convert.ToDouble(ElAng) - 1) && (Convert.ToDouble(RxElAng) < Convert.ToDouble(ElAng) + 1), Validate.DefaultMessage, false);
			}
		}			

		//************************************************************************************//
		//***************Validates Altitude, Velocity, Course Values if Exist*****************//
		//************************************************************************************//
				
		public void ValidateAltVelCrs()
		{
			if (PosVelFlag)
			{
				// Validate Altitude
				Accessible accElement = new Accessible(repo.FormMain__EW_TN.ListItemAltitude);
				string RxAlt= accElement.Value;
				Report.Info("Validating AttributeEqual (Text='(Altitude)') on item 'repo.FormMain__EW_TN.ListItemAltitude'.");
				Report.Info("Value Entered = " + Alt);
				Report.Info("Value Received = " + RxAlt);
				Report.Info("Allowable Deviation = +/- 15 Units");
				Validate.IsTrue((Convert.ToInt32(RxAlt) > Convert.ToInt32(Alt) - 15) && (Convert.ToInt32(RxAlt) < Convert.ToInt32(Alt) + 15), Validate.DefaultMessage, false);
		
				// Validate Velocity
				Accessible accElement1 = new Accessible(repo.FormMain__EW_TN.ListItemSpeedVelocity);
				string RxVel = accElement1.Value;
				Report.Info("Validating AttributeEqual (Text='(Velocity)') on item 'repo.FormMain__EW_TN.ListItemVelocity'.");
				Report.Info("Value Entered = " + Vel);
				Report.Info("Value Received = " + RxVel);
				Report.Info("Allowable Deviation = +/- 5 Units");
				Validate.IsTrue((Convert.ToDouble(RxVel) > Convert.ToDouble(Vel) - 5) && (Convert.ToDouble(RxVel) < Convert.ToDouble(Vel) + 5), Validate.DefaultMessage, false);

				// Validate True Course
				Accessible accElement2 = new Accessible(repo.FormMain__EW_TN.ListItemTrue_Course);
				string RxCrs = accElement2.Value;
				Report.Info("Validating AttributeEqual (Text='(True Course)') on item 'repo.FormMain__EW_TN.ListItemTrue_Course'.");
				Report.Info("Value Entered = " + Crs);
				Report.Info("Value Received = " + RxCrs );
				Report.Info("Allowable Deviation = +/- 5 Units");
				Validate.IsTrue((Convert.ToDouble(RxCrs) > Convert.ToDouble(Crs) - 5) && (Convert.ToDouble(RxCrs) < Convert.ToDouble(Crs) + 5), Validate.DefaultMessage, false);
		
				// Validate Magnetic Course
				Report.Info("Validating AttributeEqual (Text='Magnetic Course') on item 'FormMain__Air_TN.ListItemMagnetic_Course'.");
				Report.Info("Value Entered = " + MagCrs);
				Report.Info("Magnetic Course is a local value and will not be validated on the remote interface");
			}
		}

		//************************************************************************************//
		//****************************Validates Hi Priority Value*****************************//
		//************************************************************************************//
				
		public void ValidateHiPriority()
		{
			if (!HiPri_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(Hi Priority)') on item 'FormMain__EW_TN.ListItemHi_PriorityInfo'.");
				Report.Info("Value Entered = " + Hi);
				Report.Info("Hi Priority is a local value and will not be validated on the remote interface");
				//Validate.Attribute(repo.FormMain__EW_TN.ListItemHi_PriorityInfo, "AccessibleValue", Hi, Validate.DefaultMessage, false);
			}
		}				

		//************************************************************************************//
		//*********************************Validates SPI Value********************************//
		//************************************************************************************//
				
		public void ValidateSPI()
		{
			if (SPIFlag && !SPI_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(SPI)') on item 'repo.FormMain__EW_TN.ListItemSPI'.");
				Report.Info("Value Entered = " + SPI);
				Validate.Attribute(repo.FormMain__EW_TN.ListItemSPI, "AccessibleValue", SPI, Validate.DefaultMessage, false);
			}		
		}
		
		//************************************************************************************//
		//******************************Validates Time Hour Value*****************************//
		//************************************************************************************//
				
		public void ValidateHR()
		{		
			bool Defect = true;
					
			if (Defect == false)
			{
				Report.Info("Validating AttributeEqual (Text='(Hour)') on item 'FormMain__EW_TN.ListItemHour'.");
				Report.Info("Value Entered = " + HR);
				Validate.Attribute(repo.FormMain__EW_TN.ListItemHour, "AccessibleValue", HR, Validate.DefaultMessage, false);
			}
			else
			{
				Report.Debug("Hour field is currently not functioning and is written up in R-02099");
			}
		}

		//************************************************************************************//
		//*****************************Validates Time Minute Value****************************//
		//************************************************************************************//
				
		public void ValidateMN()
		{
			bool Defect = true;
					
			if (Defect == false)
			{
				Report.Info("Validating AttributeEqual (Text='(Minute)') on item 'FormMain__EW_TN.ListItemMinute'.");
				Report.Info("Value Entered = " + MN);
				Validate.Attribute(repo.FormMain__EW_TN.ListItemMinute, "AccessibleValue", MN, Validate.DefaultMessage, false);
			}	
			else
			{
				Report.Debug("Hour field is currently not functioning and is written up in R-02099");
			}
		}
		
		//************************************************************************************//
		//**************************Validates Bearing Value if Exists*************************//
		//************************************************************************************//
				
		public void ValidateBear()
		{
			if (BearFlag)
			{
				// Validates Bearing Origin
				if (!BearOr_OOR)
				{
					Report.Info("Validating AttributeEqual (Text='(Bearing Origin)') on item 'FormMain__EW_TN.ListItemBearing_Origin'.");
					Report.Info("Value Entered = " + BearOrig);
					Validate.Attribute(repo.FormMain__EW_TN.ListItemBearing_Origin, "AccessibleValue", BearOrig, Validate.DefaultMessage, false);			
				}
					
				// Validates Bearing			
				Accessible accElement = new Accessible(repo.FormMain__EW_TN.ListItemBearing);
				string RxBear = accElement.Value;
				Report.Info("Validating AttributeEqual (Text='(Bearing)') on item 'repo.FormMain__EW_TN.ListItemBearing'.");
				Report.Info("Value Entered = " + Bear);
				Report.Info("Value Received = " + RxBear);
				Report.Info("Allowable Deviation = +/- 1 Units");
				Validate.IsTrue((Convert.ToDouble(RxBear) > Convert.ToDouble(Bear) - 1) && (Convert.ToDouble(RxBear) < Convert.ToDouble(Bear) + 1), Validate.DefaultMessage, false);
				
				// Validates Bearing Accurracy
				if (!BearAcc_OOR)
				{
					Report.Info("Validating AttributeEqual (Text='(Bearing Accurracy)') on item 'FormMain__EW_TN.ListItemBearing_Accuracy'.");
					Report.Info("Value Entered = " + BearAcc);
					Validate.Attribute(repo.FormMain__EW_TN.ListItemBearing_Accuracy, "AccessibleValue", BearAcc, Validate.DefaultMessage, false);			
				}
			}		
		}
			
		//************************************************************************************//
		//***********************Validates Emitter Number Indicator Value*********************//
		//************************************************************************************//
				
		public void ValidateEmitNI()
		{
			if (!ENI_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(Emitter Number Indicator)') on item 'FormMain__EW_TN.ListItemEmitter_Number_Indicator'.");
				Report.Info("Value Entered = " + EmitNI);
				Validate.Attribute(repo.FormMain__EW_TN.ListItemEmitter_Number_Indicator, "AccessibleValue", EmitNI, Validate.DefaultMessage, false);
			}
		}			

		//************************************************************************************//
		//****************************Validates Emitter Number Value**************************//
		//************************************************************************************//
				
		public void ValidateEmitNum()
		{
			Report.Info("Validating AttributeEqual (Text='(Emitter Number)') on item 'FormMain__EW_TN.ListItemEmitter_Number'.");
			int val = Int32.Parse (EmitNum);
			string EmitNum1 = val.ToString("D5");			
			Report.Info("Value Entered = " + EmitNum1);
			Validate.Attribute(repo.FormMain__EW_TN.ListItemEmitter_Number, "AccessibleValue", EmitNum1, Validate.DefaultMessage, false);
		}		
		
		//************************************************************************************//
		//****************************Validates Emitter Number Value**************************//
		//************************************************************************************//
				
		public void ValidateEmitCon()
		{
			if (!EMCon_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(Emitter Confidence)') on item 'FormMain__EW_TN.ListItemEmitter_Confidence'.");
				Report.Info("Value Entered = " + EmitCon);
				Validate.Attribute(repo.FormMain__EW_TN.ListItemEmitter_Confidence, "AccessibleValue", EmitCon, Validate.DefaultMessage, false);
			}
		}		

		//************************************************************************************//
		//************************Validates Wartime Reserve Mode Value************************//
		//************************************************************************************//
				
		public void ValidateWRM()
		{
			if (!RWRM_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(Wartime Reserve Mode)') on item 'FormMain__EW_TN.ListItemWartime_Reserve_Mode'.");
				Report.Info("Value Entered = " + WRM);
				Validate.Attribute(repo.FormMain__EW_TN.ListItemWartime_Reserve_Mode, "AccessibleValue", WRM, Validate.DefaultMessage, false);
			}
		}		
		
		//************************************************************************************//
		//*****************Validates Platfrom Evaluation Confidenece Value********************//
		//************************************************************************************//
				
		public void ValidatePEC()
		{
			if (!PlatEvalCon_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(Platfrom Evaluation Confidenece)') on item 'FormMain__EW_TN.ListItemPlatform_Evaluation_Conf'.");
				Report.Info("Value Entered = " + PEC);
				Validate.Attribute(repo.FormMain__EW_TN.ListItemPlatform_Evaluation_Conf, "AccessibleValue", PEC, Validate.DefaultMessage, false);
			}
		}			
		
		//************************************************************************************//
		//*********************Validates Frequency Range Indicator Value**********************//
		//************************************************************************************//
				
		public void ValidateFRI()
		{
			Report.Info("Validating AttributeEqual (Text='(Frequency Range Indicator)') on item 'FormMain__EW_TN.ListItemFrequency_Range_Indicato'.");
			Report.Info("Value Entered = " + FRI);
			Validate.Attribute(repo.FormMain__EW_TN.ListItemFrequency_Range_Indicato, "AccessibleValue", FRI, Validate.DefaultMessage, false);
		}	
		
		//************************************************************************************//
		//****************************Validates Frequency 1 Value*****************************//
		//************************************************************************************//
				
		public void ValidateFreq1()
		{	
			Accessible accElement = new Accessible(repo.FormMain__EW_TN.ListItemFrequency_1);
			string RxFreq1 = accElement.Value;
			Report.Info("Validating AttributeEqual (Text='(Frequency 1)') on item 'FormMain__EW_TN.ListItemFrequency_1'.");
			Report.Info("Value Entered = " + Freq1 + ".00");
			Report.Info("Value Received = " + RxFreq1);
			Report.Info("Allowable Deviation = +/- 10 Units");
			Validate.IsTrue((Convert.ToDouble(RxFreq1) > Convert.ToDouble(Freq1) - 10) && (Convert.ToDouble(RxFreq1) < Convert.ToDouble(Freq1) + 10), Validate.DefaultMessage, false);
		}				
		
		//************************************************************************************//
		//*************************Validates Frequency 1 Units Value**************************//
		//************************************************************************************//
				
		public void ValidateFreq1U()
		{
			if (Freq1Un_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(Frequency 1 Units)') on item 'FormMain__EW_TN.ListItemFrequency_1_Units'.");
				Report.Info("Value Entered = " + Freq1U);
				Validate.Attribute(repo.FormMain__EW_TN.ListItemFrequency_1_Units, "AccessibleValue", Freq1U, Validate.DefaultMessage, false);
			}
		}			
		
		//************************************************************************************//
		//****************************Validates Frequency 2 Value*****************************//
		//************************************************************************************//
				
		public void ValidateFreq2()
		{
			if (FRIFlag)
			{
				Accessible accElement = new Accessible(repo.FormMain__EW_TN.ListItemFrequency_2);
				string RxFreq2 = accElement.Value;
				Report.Info("Validating AttributeEqual (Text='(Frequency 2)') on item 'FormMain__EW_TN.ListItemFrequency_2'.");
				Report.Info("Value Entered = " + Freq2 + ".00");
				Report.Info("Value Received = " + RxFreq2);
				Report.Info("Allowable Deviation = +/- 10 Units");
				Validate.IsTrue((Convert.ToDouble(RxFreq2) > Convert.ToDouble(Freq2) - 10) && (Convert.ToDouble(RxFreq2) < Convert.ToDouble(Freq2) + 10), Validate.DefaultMessage, false);
			}
		}	
		
		//************************************************************************************//
		//*************************Validates Frequency 2 Units Value**************************//
		//************************************************************************************//
				
		public void ValidateFreq2U()
		{
			if (FRIFlag && !Freq1Un_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(Frequency 2 Units)') on item 'FormMain__EW_TN.ListItemFrequency_2_Units'.");
				Report.Info("Value Entered = " + Freq2U);
				Validate.Attribute(repo.FormMain__EW_TN.ListItemFrequency_2_Units, "AccessibleValue", Freq2U, Validate.DefaultMessage, false);
			}
		}		
		
		//************************************************************************************//
		//***************************Validates AOP Values if Exist****************************//
		//************************************************************************************//
				
		public void ValidateAOP()
		{		
			if (AOPFlag)
			{
				// Validates Circle/Square Switch
				if (!CirSqr_OOR)
				{
					Report.Info("Validating AttributeEqual (Text='(Circle/Square)') on item 'FormMain__EW_TN.ListItemAOP_Circle_Square_Switch'.");
					Report.Info("Value Entered = " + CirSq);
					Validate.Attribute(repo.FormMain__EW_TN.ListItemAOP_Circle_Square_Switch, "AccessibleValue", CirSq, Validate.DefaultMessage, false);
				}
				
				// Validates AOP Major Axis
				Accessible accElement = new Accessible(repo.FormMain__EW_TN.ListItemAOP_Major_Axis);
				string RxAxisMag = accElement.Value;
				Report.Info("Validating AttributeEqual (Text='(AOP Major)') on item 'FormMain__EW_TN.ListItemAOP_Major_Axis'.");
				Report.Info("Value Entered = " + AxisMaj);
				Report.Info("Value Received = " + RxAxisMag);
				Report.Info("Allowable Deviation = +/- 5 Unit");
				Validate.IsTrue((Convert.ToDouble(RxAxisMag) > Convert.ToDouble(AxisMaj) - 5) && (Convert.ToDouble(RxAxisMag) < Convert.ToDouble(AxisMaj) + 5), Validate.DefaultMessage, false);
	
				// Validates AOP Minor Axis
				Accessible accElement1 = new Accessible(repo.FormMain__EW_TN.ListItemAOP_Minor_Axis);
				string RxAxisMin = accElement1.Value;
				Report.Info("Validating AttributeEqual (Text='(AOP Minor)') on item 'FormMain__EW_TN.ListItemAOP_Minor_Axis'.");
				Report.Info("Value Entered = " + AxisMin);
				Report.Info("Value Received = " + RxAxisMin);
				Report.Info("Allowable Deviation = +/- 5 Unit");
				Validate.IsTrue((Convert.ToDouble(RxAxisMin) > Convert.ToDouble(AxisMin) - 5) && (Convert.ToDouble(RxAxisMin) < Convert.ToDouble(AxisMin) + 5), Validate.DefaultMessage, false);
	
				// Validates Orientation
				Report.Info("Validating AttributeEqual (Text='(Orientation)') on item 'FormMain__EW_TN.ListItemAOP_Orientation'.");
				Report.Info("Value Entered = " + Orient + ".0");
				Validate.Attribute(repo.FormMain__EW_TN.ListItemAOP_Orientation, "AccessibleValue", Orient + ".0", Validate.DefaultMessage, false);
			}		
		}
		
		//************************************************************************************//
		//*******************************Validates IDL TN Value*******************************//
		//************************************************************************************//
				
		public void ValidateIDL()
		{
			bool Defect = true;
					
			if (Defect == false)
			{
				Report.Info("Validating AttributeEqual (Text='(IDL TN)') on item 'FormMain__EW_TN.ListItemIDL_TN'.");
				Report.Info("Value Entered = " + IDL);
				Validate.Attribute(repo.FormMain__EW_TN.ListItemIDL_TN, "AccessibleValue", IDL, Validate.DefaultMessage, false);
			}	
			else
			{
				Report.Debug("IDL Track Number field is currently not functioning and is written up in R-02103");
			}
		}
		
		//************************************************************************************//
		//******************************Validates TADIL TN Value******************************//
		//************************************************************************************//
				
		public void ValidateTADIL()
		{
			
			bool Defect = true;
					
			if (Defect == false)
				{
					Report.Info("Validating AttributeEqual (Text='(TADIL TN)') on item 'FormMain__EW_TN.ListItemTADIL_TN'.");
					Report.Info("Value Entered = " + TADIL);
					Validate.Attribute(repo.FormMain__EW_TN.ListItemTADIL_TN, "AccessibleValue", TADIL, Validate.DefaultMessage, false);
				}	
			else
				{
					Report.Debug("TADIL Track Number field is currently not functioning and is written up in R-02103");
				}
		}
		
		//************************************************************************************//
		//******************************Validates ATDIL1 TN Value*****************************//
		//************************************************************************************//
				
		public void ValidateATDIL()
		{
			bool Defect = true;
					
			if (Defect == false)
				{
					Report.Info("Validating AttributeEqual (Text='(ADTIL1 TN)') on item 'FormMain__EW_TN.ListItemATDL1_TN'.");
					Report.Info("Value Entered = " + ATDL1);
					Validate.Attribute(repo.FormMain__EW_TN.ListItemATDL1_TN, "AccessibleValue", ATDL1, Validate.DefaultMessage, false);
				}		
			else
				{
					Report.Debug("ATDL-1 Track Number field is currently not functioning and is written up in R-02103");
				}
		}
		
		//************************************************************************************//
		//********************************Validates NL1 TN Value******************************//
		//************************************************************************************//
				
		public void ValidateNL1()
		{
			bool Defect = true;
					
			if (Defect == false)
			{
				Report.Info("Validating AttributeEqual (Text='(NL1 TN)') on item 'FormMain__EW_TN.ListItemNL1_TN'.");
				Report.Info("Value Entered = " + NL1);
				Validate.Attribute(repo.FormMain__EW_TN.ListItemNL1_TN, "AccessibleValue", NL1, Validate.DefaultMessage, false);
			}	
			else
			{
				Report.Debug("NATO Link-1 Track Number field is currently not functioning and is written up in R-02103");
			}
		}
		
		//************************************************************************************//
		//******************************Validates TADILJ TN Value****************************//
		//************************************************************************************//
				
		public void ValidateTADILJ()
		{
			bool Defect = true;
					
			if (Defect == false)
			{
				Report.Info("Validating AttributeEqual (Text='(TADILJ TN)') on item 'FormMain__EW_TN.ListItemTADIL_J_TN'.");
				Report.Info("Value Entered = " + TADILJ);
				Validate.Attribute(repo.FormMain__EW_TN.ListItemTADIL_J_TN, "AccessibleValue", TADILJ, Validate.DefaultMessage, false);
			}	
			else
			{
				Report.Debug("TADIL-J Track Number field is currently not functioning and is written up in R-02103");
			}
		}
		
		//************************************************************************************//
		//*****************************Validates External TN Value****************************//
		//************************************************************************************//
				
		public void ValidateExt()
		{
			bool Defect = true;
					
			if (Defect == false)
			{
				Report.Info("Validating AttributeEqual (Text='(External TN)') on item 'FormMain__EW_TN.ListItemExternal_TN'.");
				Report.Info("Value Entered = " + Ext);
				Validate.Attribute(repo.FormMain__EW_TN.ListItemExternal_TN, "AccessibleValue", Ext, Validate.DefaultMessage, false);
			}
			else
			{
				Report.Debug("External Track Number field is currently not functioning and is written up in R-02103");
			}
		}

		
		//************************************************************************************//
		//******************************Creates Track Repo Items******************************//
		//************************************************************************************//
		
		public void CreateTrackRepoItems()
		{			
			string currentPath = repo.FormTacViewC2.PictureTrackInfo.Path.ToString();
			repo.FormTacViewC2.PictureTrackInfo.Path = currentPath.Replace("%track%", TrackNum);
			Report.Info("Setting repo item FormTacViewC2.PictureTrack to " + repo.FormTacViewC2.PictureTrackInfo.Path.ToString());
			
			string currentPath1 = repo.FormTracks.MenuItemConnection2_TrackInfo.Path.ToString();
			repo.FormTracks.MenuItemConnection2_TrackInfo.Path = currentPath1.Replace("%track%", TrackNum);
			Report.Info("Setting repo item FormTracks.MenuItemC2_HOST_2_Track to " + repo.FormTracks.MenuItemConnection2_TrackInfo.Path.ToString());
			
			string currentPath2 = repo.FormRealView.MenuItemTrackNumber2Info.Path.ToString();
			repo.FormRealView.MenuItemTrackNumber2Info.Path = currentPath2.Replace("%track%", TrackNum);
			Report.Info("Setting repo item FormRealView.MenuItemTrackNumber2 to " + repo.FormRealView.MenuItemTrackNumber2Info.Path.ToString());
			
			string currentPath3 = repo.FormRealView.MenuItemTrackNumberInfo.Path.ToString();
			repo.FormRealView.MenuItemTrackNumberInfo.Path = currentPath3.Replace("%track%", TrackNum);
			Report.Info("Setting repo item FormRealView.MenuItemTrackNumber to " + repo.FormRealView.MenuItemTrackNumberInfo.Path.ToString());
			
			string currentPath4 = repo.FormTracks.MenuItemConnection1_TrackInfo.Path.ToString();
			repo.FormTracks.MenuItemConnection1_TrackInfo.Path = currentPath4.Replace("%track%", TrackNum);	
		}

		//************************************************************************************//
		//******************************Opens Properties Dialog*******************************//
		//************************************************************************************//
		
		public void ViewTrackProperties()
		{			
			Duration OrigDur = repo.FormRealView.MenuItemTracksInfo.SearchTimeout;
			repo.FormRealView.MenuItemTracksInfo.SearchTimeout = 1000;
			Duration OrigDur1 = repo.FormRealView.MenuItemTrackNumber2Info.SearchTimeout;
			repo.FormRealView.MenuItemTrackNumber2Info.SearchTimeout = 1000;			
			
			if (repo.FormRealView.MenuItemTracksInfo.Exists())
			{
				Report.Info("Mouse Left Click item 'FormRealView.MenuItemTracks'");
			    repo.FormRealView.MenuItemTracks.Click();
			    Report.Info("Mouse Left Click item 'FormTracks.MenuItemC2_HOST_2_Track'");
		        repo.FormTracks.MenuItemConnection2_Track.Click();
		       	Report.Info("Mouse Left Click item 'FormTOAD2.MenuItemTrack_Properties' at 103;14.");
				repo.FormConnection2.MenuItemTrack_Properties.Click();
			}			
			else if (repo.FormRealView.MenuItemTrackNumber2Info.Exists())
			{
			    Report.Info("Mouse Left Click item 'repo.FormRealView.MenuItemTrackNumber2'");
		        repo.FormRealView.MenuItemTrackNumber2.Click();
		       	Report.Info("Mouse Left Click item 'FormTOAD2.MenuItemTrack_Properties' at 103;14.");
				repo.FormConnection2.MenuItemTrack_Properties.Click();
			}
			
			repo.FormRealView.MenuItemTracksInfo.SearchTimeout = OrigDur;
			repo.FormRealView.MenuItemTrackNumber2Info.SearchTimeout = OrigDur1;
		}
		
		//************************************************************************************//
		//************************************Drops Track*************************************//
		//************************************************************************************//
		
		public void DropTrack()
		{			
			Drop_Track.DropTrack.Start();
		}
		
		//************************************************************************************//
		//*************************************Resets Paths***********************************//
		//************************************************************************************//		

		public void ResetPaths()
		{
			string currentPath = repo.FormTacViewC2.PictureTrackInfo.Path.ToString();
			repo.FormTacViewC2.PictureTrackInfo.Path = currentPath.Replace(TrackNum, "%track%");
			Report.Info("Resetting repo item FormTacViewC2.PictureTrack repo item to" + repo.FormTacViewC2.PictureTrackInfo.Path.ToString());
		
			string currentPath1 = repo.FormTracks.MenuItemConnection2_TrackInfo.Path.ToString();
			repo.FormTracks.MenuItemConnection2_TrackInfo.Path = currentPath1.Replace(TrackNum, "%track%");
			Report.Info("Resetting repo item FormTracks.MenuItemC2_HOST_2_Track to " + repo.FormTracks.MenuItemConnection2_TrackInfo.Path.ToString());
			
			string currentPath2 = repo.FormRealView.MenuItemTrackNumber2Info.Path.ToString();
			repo.FormRealView.MenuItemTrackNumber2Info.Path = currentPath2.Replace(TrackNum, "%track%");
			Report.Info("Resetting repo item FormRealView.MenuItemTrackNumber2 to " + repo.FormRealView.MenuItemTrackNumber2Info.Path.ToString());
			
			string currentPath3 = repo.FormRealView.MenuItemTrackNumberInfo.Path.ToString();
			repo.FormRealView.MenuItemTrackNumberInfo.Path = currentPath3.Replace(TrackNum, "%track%");
			Report.Info("Resetting repo item FormRealView.MenuItemTrackNumber to " + repo.FormRealView.MenuItemTrackNumberInfo.Path.ToString());
			
			string currentPath4 = repo.FormTracks.MenuItemConnection1_TrackInfo.Path.ToString();
			repo.FormTracks.MenuItemConnection1_TrackInfo.Path = currentPath4.Replace(TrackNum, "%track%");
			Report.Info("Resetting repo item FormTracks.MenuItemC2_HOST_Track to " + repo.FormTracks.MenuItemConnection1_TrackInfo.Path.ToString());
		}

		//************************************************************************************//
		//************************************************************************************//
		//************************************************************************************//
		
		public void RightClickTrack()
		{			
			Duration OrigDur = repo.FormTacViewC2.PictureTrackInfo.SearchTimeout;
			repo.FormTacViewC2.PictureTrackInfo.SearchTimeout = 2000;			
			
			if (repo.FormTacViewC2.PictureTrackInfo.Exists())
			{
				Report.Info("Mouse Right Click item 'FormTacViewC2.PictureTrack' at Center.");
				repo.FormTacViewC2.PictureTrack.Click(MouseButtons.Right);
			}
			else
			{
				ZoomFlag = true;
				Report.Info("Track # " + TrackNum + " not found on the current display, going to world wide view");
				Report.Screenshot();
				repo.FormTacViewC2.ButtonZoom_Out_Max.Click();
				
				if (repo.FormTacViewC2.PictureTrackInfo.Exists())
				{
					Report.Info("Mouse Right Click item 'FormTacViewC2.PictureTrack' at Center.");
					repo.FormTacViewC2.PictureTrack.Click(MouseButtons.Right);
				}
				else
				{
					Report.Error("Unable to find Track # " + TrackNum + " anywhere in the world");
					Report.Screenshot();
					return;
				}				
			}
			
			repo.FormTacViewC2.PictureTrackInfo.SearchTimeout = OrigDur;
		}	
		
		//************************************************************************************//
		//*****************************Zooms Out to Locate Track******************************//
		//************************************************************************************//
		
		public void Zoom500()
		{
			if (ZoomFlag == true)
			{
				Report.Info("Mouse Left Click item 'FormTacViewC2.ButtonSet_Range_to_500_km' at Center.");
				repo.FormTacViewC2.ButtonSet_Range_to_500_km.Click();
				Report.Info("Mouse Left Click item 'FormTacViewC2.Button_Center_on_Own_Site' at Center.");
				repo.FormTacViewC2.Button_Center_on_Own_Site.Click();
				ZoomFlag = false;
			}
		}
		
		//************************************************************************************//
		//***************************Validates Track is Dropped*******************************//
		//************************************************************************************//		
		
		public void Validate_DropTrack()
		{
			Duration OrigDur = repo.FormTacViewC2.PictureTrackInfo.SearchTimeout;
			repo.FormTacViewC2.PictureTrackInfo.SearchTimeout = 8000;

			Report.Info("Validating Track #" + TrackNum + " was dropped");
	
			bool result = Validate.NotExists(repo.FormTacViewC2.PictureTrackInfo, Validate.DefaultMessage, false);
			
			if (result == true)
			{
				Report.Success("Successfully dropped track #" + TrackNum);
			}
			else
			{
				Report.Debug("Track #" + TrackNum + " failed to drop within 8 seconds, proceeding to next track creation.");
				Report.Screenshot();				
			}
			
			repo.FormTacViewC2.PictureTrackInfo.SearchTimeout = OrigDur;
		}		

		//**************************************************************************************//
		//***************************Ranorex Generated Default Method***************************//
		//**************************************************************************************//
		
		static EWValidateTrackRegression()
		{
			//Your recording specific initialization code goes here.
		}

		//************************************************************************************//
		//*****************************Sets Track Number in Repo******************************//
		//************************************************************************************//
		
		public void SetTrackNumberInRepo()
		{
			tracknumber = TrackNum;	
		}

		//**************************************************************************************//
		//*****************************Ranorex Generated Init Method****************************//
		//**************************************************************************************//
		
		private void Init()
		{
			// Your recording specific initialization code goes here.
		}

        public void ValidateAct()
        {
            // Your code goes here. Code inside this method will not be changed by the code generator.
            
        }	
	}
}