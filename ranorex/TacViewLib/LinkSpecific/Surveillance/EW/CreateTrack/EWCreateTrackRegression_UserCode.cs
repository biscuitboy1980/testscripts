///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using System.Windows.Forms;

using CommonUtilLib;
using Ranorex;
using Ranorex.Core;

namespace TacViewLib.LinkSpecific.Surveillance.EW.CreateTrack
{
	/// <summary>
	/// The CreateTrack recording.
	/// </summary>	

	public partial class EWCreateTrackRegression
	{	
		public static string freq2;
		
		public static int freq;
		public static int freqU;
		
		public static bool FRIFlag;
		public static bool PosVelFlag;
		public static bool AOPFlag;
		public static bool BearFlag;	
		
		public static int TCount;
		
		//************************************************************************************//
		//**********************Enters Random Fix or Bearing Descriptor***********************//
		//************************************************************************************//
		
		public void FoBVal()
		{

				try
				{
					repo.FormMain__EW_TN.ListItemFix_Or_Bearing_Descripto.Click("CenterLeft");
				    Keyboard.Press(Keys.Tab);
				    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List list2 = "//list[@processname='RealView']";
		            int AScount = list2.Items.Count;
		            Random ASvalue = new Random();
					int ASnum = ASvalue.Next(0, AScount);			
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormMain__EW_TN.ListItemFix_Or_Bearing_Descripto);  
		   			string FoBValue = accElement.Value;
		   			ValidateTrack.EWValidateTrackRegression.FoB = FoBValue;
		   			Report.Info("Fix or Bearing Entered = " + FoBValue);
		   			ValidateTrack.EWValidateTrackRegression.FoB_OOR = false;

		   			if (ASnum == 0 || ASnum == 1)
	   				{
		   				ValidateTrack.EWValidateTrackRegression.PosVelFlag = true;
		   				PosVelFlag = true;
	   				} 	
		   			else
		   			{
			   			ValidateTrack.EWValidateTrackRegression.PosVelFlag = false;
			   			PosVelFlag = false;	
		   			}
	   				if (ASnum == 1)
	   				{
		   				ValidateTrack.EWValidateTrackRegression.AOPFlag = true;
		   				AOPFlag = true;   			
	   				}
	   				else
	   				{
			   			ValidateTrack.EWValidateTrackRegression.AOPFlag = false;
			   			AOPFlag = false;	
	   				}
	   				if (ASnum == 2 || ASnum == 3 || ASnum == 4 || ASnum == 5 || ASnum == 6)
	   				{
		   				ValidateTrack.EWValidateTrackRegression.BearFlag = true;
		   				BearFlag = true;
	   				} 	
	   				else
	   				{
		   				ValidateTrack.EWValidateTrackRegression.BearFlag = false;
			   			BearFlag = false;	
	   				}	
				}
				catch (ArgumentOutOfRangeException e)
				{								   			

			   			Report.Debug("List Count Out of Range for Fix or Bearing Descriptor, List Item Will Not be Validated");
			   			Report.Debug(e.ToString());	
			   			ValidateTrack.EWValidateTrackRegression.FoB_OOR = true;
			   		
				}					
			
		}			
		
		//************************************************************************************//
		//*******************************Enters Random Identity*******************************//
		//************************************************************************************//
		
		public void IdVal()
		{

				try
				{
					repo.FormMain__EW_TN.ListItemIdentity.Click("CenterLeft");
				    Keyboard.Press(Keys.Tab);
				    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List list2 = "//list[@processname='RealView']";
		            int AScount = list2.Items.Count;
		            Random ASvalue = new Random();
					int ASnum = ASvalue.Next(0, AScount);
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormMain__EW_TN.ListItemIdentity);  
		   			string IDValue = accElement.Value;
		   			ValidateTrack.EWValidateTrackRegression.ID = IDValue;
		   			Report.Info("Identity Entered = " + IDValue);
		   			ValidateTrack.EWValidateTrackRegression.ID_OOR = false;
		 
				}
				catch (ArgumentOutOfRangeException e)
				{								   			

			   			Report.Debug("List Count Out of Range for Identity, List Item Will Not be Validated");
			   			Report.Debug(e.ToString());	
			   			ValidateTrack.EWValidateTrackRegression.ID_OOR = true;
			   		
				}					
			
		}	

		//************************************************************************************//
		//***************************Enters Random Eviron/Category****************************//
		//************************************************************************************//
		
		public void EnvCatval()
		{

				try
				{
					repo.FormMain__EW_TN.ListItemEnviron_Category.Click("CenterLeft");
				    Keyboard.Press(Keys.Tab);
				    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List list2 = "//list[@processname='RealView']";
		            int AScount = list2.Items.Count;
		            Random ASvalue = new Random();
					int ASnum = ASvalue.Next(1, AScount-1);
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormMain__EW_TN.ListItemEnviron_Category);  
		   			string EnvCatValue = accElement.Value;
		   			ValidateTrack.EWValidateTrackRegression.EC = EnvCatValue;
		   			Report.Info("Environ/Category Value Entered = " + EnvCatValue);	
		   			ValidateTrack.EWValidateTrackRegression.EnvCat_OOR = false;
		   	
				}
				catch (ArgumentOutOfRangeException e)
				{								   			

			   			Report.Debug("List Count Out of Range for Environment/Category, List Item Will Not be Validated");
			   			Report.Debug(e.ToString());	
			   			ValidateTrack.EWValidateTrackRegression.EnvCat_OOR = true;
			   		
				}						
			
		}
		
		//************************************************************************************//
		//*******************************Enters Random Platform*******************************//
		//************************************************************************************//
		
		public void PlatVal()
		{

				try
				{				
					repo.FormMain__EW_TN.ListItemPlatform.Click("CenterLeft");
				    Keyboard.Press(Keys.Tab);
				    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List list2 = "//list[@processname='RealView']";
		            int AScount = list2.Items.Count;
		            Random ASvalue = new Random();
					int ASnum = ASvalue.Next(1, AScount-1);
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormMain__EW_TN.ListItemPlatform);  
		   			string PlatValue = accElement.Value;
		   			ValidateTrack.EWValidateTrackRegression.Plat = PlatValue;
		   			Report.Info("Platform Entered = " + PlatValue);
		   			ValidateTrack.EWValidateTrackRegression.Plat_OOR = false;
		
				}
				catch (ArgumentOutOfRangeException e)
				{								   			

			   			Report.Debug("List Count Out of Range for Platform, List Item Will Not be Validated");
			   			Report.Debug(e.ToString());	
			   			ValidateTrack.EWValidateTrackRegression.Plat_OOR = true;
			   		
				}				
			
		}		
		
		//************************************************************************************//
		//*****************************Enters Random Specific Type****************************//
		//************************************************************************************//
		
		public void STypeVal()
		{

				try
				{
					repo.FormMain__EW_TN.ListItemSpecific_Type.Click("CenterLeft");
				    Keyboard.Press(Keys.Tab);
				    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
				    Delay.Seconds(1);
					Ranorex.List list2 = "//list[@processname='RealView']";
		            int AScount = list2.Items.Count;
		            Random ASvalue = new Random();
					int ASnum = ASvalue.Next(1, AScount-1);
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormMain__EW_TN.ListItemSpecific_Type);  
		   			string STypeValue = accElement.Value;
		   			ValidateTrack.EWValidateTrackRegression.SType = STypeValue;
		   			Report.Info("Specific Type Entered = " + STypeValue);
		   			ValidateTrack.EWValidateTrackRegression.Stype_OOR = false;
		   		
				}
				catch (ArgumentOutOfRangeException e)
				{								   			
	
			   			Report.Debug("List Count Out of Range for Specific Type, List Item Will Not be Validated");
			   			Report.Debug(e.ToString());	
			   			ValidateTrack.EWValidateTrackRegression.Stype_OOR = true;
			   		
				}					
			
		}	
		
		//************************************************************************************//
		//****************************Enters Random Elevation Angle***************************//
		//************************************************************************************//
		
		public void ElAngVal()
		{	
			if (BearFlag)
			{
				repo.FormMain__EW_TN.ListItemElevation_Angle.Click("CenterLeft");
				Random random = new Random();
				double a = random.Next(0, 9000);
				a = a*.01;
				a=Math.Round(a, 2);
				string b = a.ToString();			
				Keyboard.Press(b);	
	   			string ElAngValue = b;
	   			ValidateTrack.EWValidateTrackRegression.ElAng = ElAngValue;
	   			Report.Info("Elevation Angle Value Entered = " + ElAngValue);
			}
		}
		
		//************************************************************************************//
		//***********Enters Random Altitude, Velocity  and Course Values if Exist************//
		//************************************************************************************//
		
		public void AltVelCrsVal()
		{
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			
			if (PosVelFlag)
			{
				//Enter Altitude
				repo.FormMain__EW_TN.ListItemAltitude.Click("CenterLeft");
				Keyboard.Press(Keys.Tab);
				string b = SharedFunctions.Random(1, 204750);
				Keyboard.Press(b);
				string AltValue = b;
				ValidateTrack.EWValidateTrackRegression.Alt = AltValue;
				Report.Info("Altitude Value Entered = " + AltValue);

				//Enter Velocity
				repo.FormMain__EW_TN.ListItemSpeedVelocity.Click("CenterLeft");
			    Keyboard.Press(Keys.Tab);
				string c = SharedFunctions.Random(1, 4092);
				Keyboard.Press(c);
	   			string VelValue = c;
	   			ValidateTrack.EWValidateTrackRegression.Vel = VelValue;
	   			Report.Info("Velocity Value Entered = " + VelValue);	

	   			//Enter True Course
				repo.FormMain__EW_TN.ListItemTrue_Course.Click("CenterLeft");
			    Keyboard.Press(Keys.Tab);
				string d = SharedFunctions.Random(1, 359);
				Keyboard.Press(d);
				Keyboard.Press(Keys.Tab); 
	   			string CrsValue = d;
	   			ValidateTrack.EWValidateTrackRegression.Crs = CrsValue;
	   			Report.Info("Course Value Entered = " + CrsValue);
			
	   			//Enter Magnetic Course
				Accessible accElement = new Accessible(repo.FormMain__EW_TN.ListItemMagnetic_Course);  
	   			string MagValue = accElement.Value;
	   			ValidateTrack.EWValidateTrackRegression.MagCrs = MagValue;
	   			Report.Info("Magnetic Course Value Entered = " + MagValue);
			}
		}
		
		//************************************************************************************//
		//**********************Stores Reporting Unit to Variable*****************************//
		//************************************************************************************//
		
		public void ReportingUnitval()
		{
			Accessible accElement3 = new Accessible(repo.FormMainCreate.ListItemReporting_Unit);  
			string ReportingUnit = accElement3.Value;
			ValidateTrack.EWValidateTrackRegression.RU = ReportingUnit;
		}		
	
		//************************************************************************************//
		//******************************Enters Random HI Priority*****************************//
		//************************************************************************************//
		
		public void HIVal()
		{

				try
				{
					repo.FormMain__EW_TN.ListItemHi_Priority.Click("CenterLeft");
				    Keyboard.Press(Keys.Tab);
				    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List list2 = "//list[@processname='RealView']";
		            int AScount = list2.Items.Count;
		            Random ASvalue = new Random();
					int ASnum = ASvalue.Next(0, AScount);
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormMain__EW_TN.ListItemHi_Priority);  
		   			string HIValue = accElement.Value;
		   			ValidateTrack.EWValidateTrackRegression.Hi = HIValue;
		   			Report.Info("HI Priority Value Entered = " + HIValue);
		   			ValidateTrack.EWValidateTrackRegression.HiPri_OOR = false;

				}
				catch (ArgumentOutOfRangeException e)
				{								   			

			   			Report.Debug("List Count Out of Range for Hi Priority, List Item Will Not be Validated");
			   			Report.Debug(e.ToString());	
			   			ValidateTrack.EWValidateTrackRegression.HiPri_OOR = true;
			   		
				}					
					
		}			

		//************************************************************************************//
		//*********************************Enters Random SPI**********************************//
		//************************************************************************************//
		
		public void SPIVal()
		{

				try
				{
					repo.FormMain__EW_TN.ListItemSPI.Click("CenterLeft");
				    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List list2 = "//list[@processname='RealView']";
		            int AScount = list2.Items.Count;
		            Random ASvalue = new Random();
					int ASnum = ASvalue.Next(0, AScount);
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormMain__EW_TN.ListItemSPI);  
		   			string SPIValue = accElement.Value;
		   			ValidateTrack.EWValidateTrackRegression.SPI = SPIValue;
		   			Report.Info("SPI Value Entered = " + SPIValue);
		   			ValidateTrack.EWValidateTrackRegression.SPI_OOR = false;
		   			
					if (ASnum==1)
		   			{
		   				ValidateTrack.EWValidateTrackRegression.SPIFlag = true;	
		   			}  		   			
					else
					{
						ValidateTrack.EWValidateTrackRegression.SPIFlag = false;
					}
				}
				catch (ArgumentOutOfRangeException e)
				{								   			

			   			Report.Debug("List Count Out of Range for SPI, List Item Will Not be Validated");
			   			Report.Debug(e.ToString());	
			   			ValidateTrack.EWValidateTrackRegression.SPI_OOR = true;
			   		
				}			
				
		}			

		//************************************************************************************//
		//******************************Enters Random Time Hour*******************************//
		//************************************************************************************//
		
		public void HRVal()
		{	
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			repo.FormMain__EW_TN.ListItemHour.Click("CenterLeft");
		    Keyboard.Press(Keys.Tab);
			string b = SharedFunctions.Random(1, 23);
			Keyboard.Press(b);
   			string HRValue = b;
   			ValidateTrack.EWValidateTrackRegression.HR = HRValue;
   			Report.Info("Hour Value Entered = " + HRValue);
		}
		
		//************************************************************************************//
		//*****************************Enters Random Time Minute******************************//
		//************************************************************************************//
		
		public void MNVal()
		{	
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			repo.FormMain__EW_TN.ListItemMinute.Click("CenterLeft");
		    Keyboard.Press(Keys.Tab);
			string b = SharedFunctions.Random(1, 59);
			Keyboard.Press(b);
   			string MNValue = b;
   			ValidateTrack.EWValidateTrackRegression.MN = MNValue;
   			Report.Info("Minute Value Entered = " + MNValue);
		}	
		
		//************************************************************************************//
		//*************************Enters Random Bearing Info if Exists***********************//
		//************************************************************************************//
		
		public void BearVal()
		{	
			//ValidateTrack.ValidateTrackRegression.OrigFlag = false;
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			
			if (BearFlag)
			{
				// Enters Bearing Origin 

					try
					{
						repo.FormMain__EW_TN.ListItemBearing_Origin.Click("CenterLeft");
					    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
						Ranorex.List list = "//list[@processname='RealView']";
			            int AScount = list.Items.Count;
			            Random ASvalue = new Random();
						int ASnum = ASvalue.Next(1, AScount-1);
			       		repo.ListRealView.Self.Items[ASnum].Select();
			       		repo.ListRealView.Self.Items[ASnum].Click("center");
						Accessible accElement = new Accessible(repo.FormMain__EW_TN.ListItemBearing_Origin);  
			   			string BearOrigValue = accElement.Value;
			   			ValidateTrack.EWValidateTrackRegression.BearOrig = BearOrigValue;
			   			Report.Info("Bearing Origin Value Entered = " + BearOrigValue);
			   			ValidateTrack.EWValidateTrackRegression.BearOr_OOR = false;

					}
					catch (ArgumentOutOfRangeException e)
					{								   			

				   			Report.Debug("List Count Out of Range for Bearing Origin, List Item Will Not be Validated");
				   			Report.Debug(e.ToString());	
				   			ValidateTrack.EWValidateTrackRegression.BearOr_OOR = true;
				   		
					}						
			
					
				// Enters Bearing 
				repo.FormMain__EW_TN.ListItemBearing.Click("CenterLeft");
			    Keyboard.Press(Keys.Tab);
				string b = SharedFunctions.Random(1, 360);
				Keyboard.Press(b);
	   			string BearValue = b;
	   			ValidateTrack.EWValidateTrackRegression.Bear = BearValue;
	   			Report.Info("Bearing Value Entered = " + BearValue);
	   			
	   			// Enters Bearing Accurracy 

					try
					{
						repo.FormMain__EW_TN.ListItemBearing_Accuracy.Click("CenterLeft");
					    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
						Ranorex.List list1 = "//list[@processname='RealView']";
			            int AScount1 = list1.Items.Count;
			            Random ASvalue1 = new Random();
						int ASnum1 = ASvalue1.Next(1, AScount1++);
			       		repo.ListRealView.Self.Items[ASnum1].Select();
			       		repo.ListRealView.Self.Items[ASnum1].Click("center");
						Accessible accElement1 = new Accessible(repo.FormMain__EW_TN.ListItemBearing_Accuracy);  
			   			string BearAccValue = accElement1.Value;
			   			ValidateTrack.EWValidateTrackRegression.BearAcc = BearAccValue;
			   			Report.Info("Bearing Accurracy Value Entered = " + BearAccValue);
			   			ValidateTrack.EWValidateTrackRegression.BearAcc_OOR = false;
			   	
					}
					catch (ArgumentOutOfRangeException e)
					{								   			

				   			Report.Debug("List Count Out of Range for Bearing Accurracy, List Item Will Not be Validated");
				   			Report.Debug(e.ToString());	
				   			ValidateTrack.EWValidateTrackRegression.BearAcc_OOR = true;
				   		
					}						
				
			}
		}		

		//************************************************************************************//
		//*****************************Enters Random Mode Number******************************//
		//************************************************************************************//
		
		public void ModeNVal()
		{	
//			repo.FormMain__EW_TN.ListItemMode_Number.Click("CenterLeft");
//		    Keyboard.Press(Keys.Tab);
//			string b = SharedFunctions.Random(1, 64);
//			Keyboard.Press(b);
//   			string ModeNValue = b;
//   			ValidateTrack.ValidateTrackRegression.ModeN = ModeNValue;
//   			Report.Info("Mode Number Entered = " + ModeNValue);
		}	

		//************************************************************************************//
		//***********************Enters Random Emitter Number Indicator***********************//
		//************************************************************************************//
		
		public void EmitNIVal()
		{	

				try
				{
					repo.FormMain__EW_TN.ListItemEmitter_Number_Indicator.Click("CenterLeft");
				    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
				    Ranorex.List list2 = "//list[@processname='RealView']";
		            int AScount = list2.Items.Count;
		            Random ASvalue = new Random();
					int ASnum = ASvalue.Next(0, AScount);
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormMain__EW_TN.ListItemEmitter_Number_Indicator);  
		   			string EmitNIValue = accElement.Value;
		   			ValidateTrack.EWValidateTrackRegression.EmitNI = EmitNIValue;
		   			Report.Info("Emitter Number Indicator Entered = " + EmitNIValue);
		   			ValidateTrack.EWValidateTrackRegression.ENI_OOR = false;
		   		
				}
				catch (ArgumentOutOfRangeException e)
				{								   			

				   		Report.Debug("List Count Out of Range for Emitter Number Indicator, List Item Will Not be Validated");
				   		Report.Debug(e.ToString());	
				   		ValidateTrack.EWValidateTrackRegression.ENI_OOR = true;
				   
				}					
			
		}	
		
		//************************************************************************************//
		//****************************Enters Random Emitter Number****************************//
		//************************************************************************************//
		
		public void EmitNumVal()
		{	
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			repo.FormMain__EW_TN.ListItemEmitter_Number.Click("CenterLeft");
		    Keyboard.Press(Keys.Tab);
			string a = SharedFunctions.Random(1, 16383);
			string b = SharedFunctions.DecimalToBase(Convert.ToInt32(a), 8);
			Keyboard.Press(b);   			
   			string EmitNumValue = b;
   			ValidateTrack.EWValidateTrackRegression.EmitNum = EmitNumValue;
   			Report.Info("Emitter Number Entered = " + EmitNumValue);
		}					
		
		//************************************************************************************//
		//*************************Enters Random Emitter Confidence***************************//
		//************************************************************************************//
		
		public void EmitConVal()
		{

				try
				{
					repo.FormMain__EW_TN.ListItemEmitter_Confidence.Click("CenterLeft");
				    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List list2 = "//list[@processname='RealView']";
		            int AScount = list2.Items.Count;
		            Random ASvalue = new Random();
					int ASnum = ASvalue.Next(1, AScount-1);
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormMain__EW_TN.ListItemEmitter_Confidence);  
		   			string EmitConValue = accElement.Value;
		   			ValidateTrack.EWValidateTrackRegression.EmitCon = EmitConValue;
		   			Report.Info("Emitter Confidence Value Entered = " + EmitConValue);
		   			ValidateTrack.EWValidateTrackRegression.EMCon_OOR = false;
		   			
				}
				catch (ArgumentOutOfRangeException e)
				{								   			

				   		Report.Debug("List Count Out of Range for Emitter Number Confidence, List Item Will Not be Validated");
				   		Report.Debug(e.ToString());	
				   		ValidateTrack.EWValidateTrackRegression.EMCon_OOR = true;
				   
				}					
			
		}
		
		//************************************************************************************//
		//***********************Enters Random Wartime Reserve Mode***************************//
		//************************************************************************************//
		
		public void EmitWRM()
		{

				try
				{
					repo.FormMain__EW_TN.ListItemWartime_Reserve_Mode.Click("CenterLeft");
				    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List list2 = "//list[@processname='RealView']";
		            int AScount = list2.Items.Count;
		            Random ASvalue = new Random();
					int ASnum = ASvalue.Next(0, AScount);			
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormMain__EW_TN.ListItemWartime_Reserve_Mode);  
		   			string WRMValue = accElement.Value;
		   			ValidateTrack.EWValidateTrackRegression.WRM = WRMValue;
		   			Report.Info("Random Wartime Reserve Mode Value Entered = " + WRMValue);
		   			ValidateTrack.EWValidateTrackRegression.RWRM_OOR = false;

				}
				catch (ArgumentOutOfRangeException e)
				{								   			

				   		Report.Debug("List Count Out of Range for Wartime Reserve Mode, List Item Will Not be Validated");
				   		Report.Debug(e.ToString());	
				   		ValidateTrack.EWValidateTrackRegression.RWRM_OOR = true;
				   
				}					
			
		}		
		
		//************************************************************************************//
		//*******************Enters Random Platform Evaluation Confidence*********************//
		//************************************************************************************//
		
		public void EmitPEC()
		{

				try
				{
					repo.FormMain__EW_TN.ListItemPlatform_Evaluation_Conf.Click("CenterLeft");
				    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List list2 = "//list[@processname='RealView']";
		            int AScount = list2.Items.Count;
		            Random ASvalue = new Random();
					int ASnum = ASvalue.Next(1, AScount-1);
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormMain__EW_TN.ListItemPlatform_Evaluation_Conf);  
		   			string PECValue = accElement.Value;
		   			ValidateTrack.EWValidateTrackRegression.PEC = PECValue;
		   			Report.Info("Random Platform Evaluation Confidence Value Entered = " + PECValue);
		   			ValidateTrack.EWValidateTrackRegression.PlatEvalCon_OOR = false;

				}
				catch (ArgumentOutOfRangeException e)
				{								   			

				   		Report.Debug("List Count Out of Range for Platform Evaluation Confidence, List Item Will Not be Validated");
				   		Report.Debug(e.ToString());	
				   		ValidateTrack.EWValidateTrackRegression.PlatEvalCon_OOR = true;
				   
				}					
			
		}	
		
		//************************************************************************************//
		//************************Enters Random Frequency Range Indicator*********************//
		//************************************************************************************//
		
		public void FRIVal()
		{

				try
				{
					repo.FormMain__EW_TN.ListItemFrequency_Range_Indicato.Click("CenterLeft");
				    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List list2 = "//list[@processname='RealView']";
		            int AScount = list2.Items.Count;
		            Random ASvalue = new Random();
					int ASnum = ASvalue.Next(0, AScount);
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormMain__EW_TN.ListItemFrequency_Range_Indicato);  
		   			string FRIValue = accElement.Value;
		   			ValidateTrack.EWValidateTrackRegression.FRI = FRIValue;
		   			Report.Info("Frequency Range Indicator Value Entered = " + FRIValue);
		   			ValidateTrack.EWValidateTrackRegression.FRI_OOR = false;

		   			if (ASnum == 1)
		   			{
		   			ValidateTrack.EWValidateTrackRegression.FRIFlag = true;
		   			FRIFlag = true;
		   			}
		   			else
		   			{
		   			ValidateTrack.EWValidateTrackRegression.FRIFlag = false;
		   			FRIFlag = false;	
		   			}
				}
				catch (ArgumentOutOfRangeException e)
				{								   			

				   		Report.Debug("List Count Out of Range for Frequency Range Indicator, List Item Will Not be Validated");
				   		Report.Debug(e.ToString());	
				   		ValidateTrack.EWValidateTrackRegression.FRI_OOR = true;
				   
				}				   			
						
		}	
		
		//************************************************************************************//
		//*****************************Enters Random Frequency 1******************************//
		//************************************************************************************//
		
		public void Freq1Val()
		{
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			repo.FormMain__EW_TN.ListItemFrequency_1.Click("CenterLeft");
		    Keyboard.Press(Keys.Tab);
			string b = SharedFunctions.Random(1, 1677721);
			Keyboard.Press(b);			
   			string Freq1Value = b;
   			freq = Int32.Parse(b);
   			freq = freq + 1;
   			freq2 = freq.ToString();
   			ValidateTrack.EWValidateTrackRegression.Freq1 = Freq1Value;
   			Report.Info("Frequency 1 Entered = " + Freq1Value);
		}		

		//************************************************************************************//
		//***************************Enters Random Frequency 1 Units**************************//
		//************************************************************************************//
		
		public void Freq1UVal()
		{

				try
				{
					repo.FormMain__EW_TN.ListItemFrequency_1_Units.Click("CenterLeft");
				    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List list2 = "//list[@processname='RealView']";
		            int AScount = list2.Items.Count;
		            Random ASvalue = new Random();
		            AScount--;
					int ASnum = ASvalue.Next(0, AScount);
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormMain__EW_TN.ListItemFrequency_1_Units);  
		   			string Freq1UValue = accElement.Value;
		   			freqU = ASnum;
		   			ValidateTrack.EWValidateTrackRegression.Freq1U = Freq1UValue;
		   			Report.Info("Frequency 1 Units Value Entered = " + Freq1UValue);	
		   			ValidateTrack.EWValidateTrackRegression.Freq1Un_OOR = false;

				}
				catch (ArgumentOutOfRangeException e)
				{								   			

				   		Report.Debug("List Count Out of Range for Frequency 1 Units, List Item Will Not be Validated");
				   		Report.Debug(e.ToString());	
				   		ValidateTrack.EWValidateTrackRegression.Freq1Un_OOR = true;
				   
				}						
			
		}	

		//************************************************************************************//
		//***********************Enters Random Frequency 2 If Exists*************************//
		//************************************************************************************//
		
		public void Freq2Val()
		{	
			if (FRIFlag)
			{
				repo.FormMain__EW_TN.ListItemFrequency_2.Click("CenterLeft");
			    Keyboard.Press(Keys.Tab);
				Keyboard.Press(freq2);			
	   			string Freq2Value = freq2;
	   			ValidateTrack.EWValidateTrackRegression.Freq2 = Freq2Value;
	   			Report.Info("Frequency 2 Entered = " + Freq2Value);
			}
		}		

		//************************************************************************************//
		//*********************Enters Random Frequency 2 Units if Exists**********************//
		//************************************************************************************//
		
		public void Freq2UVal()
		{
			if (FRIFlag)
			{
				repo.FormMain__EW_TN.ListItemFrequency_2_Units.Click("CenterLeft");
			    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
	       		repo.ListRealView.Self.Items[freqU].Select();
	       		repo.ListRealView.Self.Items[freqU].Click("center");
				Accessible accElement = new Accessible(repo.FormMain__EW_TN.ListItemFrequency_2_Units);  
	   			string Freq2UValue = accElement.Value;
	   			ValidateTrack.EWValidateTrackRegression.Freq2U = Freq2UValue;
	   			Report.Info("Frequency 2 Units Value Entered = " + Freq2UValue);	
			}
		}	
		
		//************************************************************************************//
		//*************************Enters Random AOP values if Exists*************************//
		//************************************************************************************//		
		
		public void AOPVal()
		{
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			
			if (AOPFlag)
			{

					try
					{
						repo.FormMain__EW_TN.ListItemAOP_Circle_Square_Switch.Click("CenterLeft");
					    Keyboard.Press(Keys.Tab);
					    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
						Ranorex.List list2 = "//list[@processname='RealView']";
			            int AScount = list2.Items.Count;
			            Random ASvalue = new Random();
						int ASnum = ASvalue.Next(0, AScount);
			       		repo.ListRealView.Self.Items[ASnum].Select();
			       		repo.ListRealView.Self.Items[ASnum].Click("center");
						Accessible accElement = new Accessible(repo.FormMain__EW_TN.ListItemAOP_Circle_Square_Switch);  
			   			string CirSqValue = accElement.Value;
			   			ValidateTrack.EWValidateTrackRegression.CirSq = CirSqValue;
			   			Report.Info("Circle/Square Switch Value Entered = " + CirSqValue);
			   			ValidateTrack.EWValidateTrackRegression.CirSqr_OOR = false;
			   		
					}
					catch (ArgumentOutOfRangeException e)
					{								   			

					   		Report.Debug("List Count Out of Range for Circle/Square Switch, List Item Will Not be Validated");
					   		Report.Debug(e.ToString());	
					   		ValidateTrack.EWValidateTrackRegression.CirSqr_OOR = true;
					   
					}						
				
	
	   			// Enter AOP Major Axis
				repo.FormMain__EW_TN.ListItemAOP_Major_Axis.Click("CenterLeft");
			    Keyboard.Press(Keys.Tab);
				Random random = new Random();
				double c = random.Next(0, 8257);
				c = c*.01;
				c=Math.Round(c, 2);
				string d = c.ToString();
				Keyboard.Press(d);
				ValidateTrack.EWValidateTrackRegression.AxisMaj = d;
				Report.Info("AOP Major Axis Value Entered = " + d);			
	
				// Enter AOP Minor Axis
				repo.FormMain__EW_TN.ListItemAOP_Minor_Axis.Click("CenterLeft");
			    Keyboard.Press(Keys.Tab);
				Random random1 = new Random();
				double v = random1.Next(0, 8257);
				v = v*.01;
				v=Math.Round(v, 2);
				string f = v.ToString();			
				Keyboard.Press(f);	
				ValidateTrack.EWValidateTrackRegression.AxisMin = f;
				Report.Info("AOP Minor Axis Value Entered = " + f);
				
				// Enter AOP Orientation
				repo.FormMain__EW_TN.ListItemAOP_Orientation.Click("CenterLeft");
			    Keyboard.Press(Keys.Tab);
				string b = SharedFunctions.Random(1, 180);
				Keyboard.Press(b);
	   			string OrientValue = b;
	   			ValidateTrack.EWValidateTrackRegression.Orient = OrientValue;
	   			Report.Info("Orientation Value Entered = " + OrientValue);
			}	
		}

		//************************************************************************************//
		//**********************************Enters TADIL TN***********************************//
		//************************************************************************************//
		
		public void TADILVal()
		{
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			repo.FormMain__EW_TN.ListItemTADIL_TN.Click("CenterLeft");
		    Keyboard.Press(Keys.Tab);
		    string a = SharedFunctions.Random(128, 4094);
			string b = SharedFunctions.DecimalToBase(Convert.ToInt32(a), 8);
			Keyboard.Press(b);
   			string OrientValue = b;
   			ValidateTrack.EWValidateTrackRegression.TADIL = b;
   			Report.Info("TADIL TN Value Entered = " + b);
		}	
		
		//************************************************************************************//
		//**********************************Enters ATDIL1 TN**********************************//
		//************************************************************************************//
		
		public void ATDL1Val()
		{
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			repo.FormMain__EW_TN.ListItemATDL1_TN.Click("CenterLeft");
		    Keyboard.Press(Keys.Tab);
		    string a = SharedFunctions.ATDL1_TN();
			Keyboard.Press(a);
   			string OrientValue = a;
   			ValidateTrack.EWValidateTrackRegression.ATDL1 = a;
   			Report.Info("ATDIL1 TN Value Entered = " + a);
		}			
		
		//************************************************************************************//
		//**********************************Enters NL1 TN**********************************//
		//************************************************************************************//
		
		public void NL1Val()
		{
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			repo.FormMain__EW_TN.ListItemNL1_TN.Click("CenterLeft");
		    Keyboard.Press(Keys.Tab);
		    string a = SharedFunctions.NATO_TN();
			Keyboard.Press(a);
   			string OrientValue = a;
   			ValidateTrack.EWValidateTrackRegression.NL1 = a;
   			Report.Info("NL1 TN Value Entered = " + a);
		}		
		
		//************************************************************************************//
		//**********************************Enters TADILJ TN**********************************//
		//************************************************************************************//
		
		public void TADILJVal()
		{
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			repo.FormMain__EW_TN.ListItemTADIL_J_TN.Click("CenterLeft");
		    Keyboard.Press(Keys.Tab);
		    string a = SharedFunctions.Random(128, 32766);
			string b = SharedFunctions.DecimalToBase(Convert.ToInt32(a), 8);
			Keyboard.Press(b);
   			string OrientValue = b;
   			ValidateTrack.EWValidateTrackRegression.TADILJ = b;
   			Report.Info("TADILJ TN Value Entered = " + b);
		}	
		
		//************************************************************************************//
		//********************************Enters External TN**********************************//
		//************************************************************************************//
		
		public void ExtVal()
		{
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			repo.FormMain__EW_TN.ListItemExternal_TN.Click("CenterLeft");
		    Keyboard.Press(Keys.Tab);
		    string a = SharedFunctions.Random(128, 32766);
			string b = SharedFunctions.DecimalToBase(Convert.ToInt32(a), 8);
			Keyboard.Press(b);
   			string OrientValue = b;
   			ValidateTrack.EWValidateTrackRegression.Ext = b;
   			Report.Info("External TN Value Entered = " + b);
		}	
		
		//************************************************************************************//
		//***********************************Enters IDL TN************************************//
		//************************************************************************************//
		
		public void IDLval()
		{
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			repo.FormMainCreate.ListItemIDL_TN.Click("CenterLeft");
		    Keyboard.Press(Keys.Tab);
		    string a = SharedFunctions.IDL_TN();
			Keyboard.Press(a);
   			string OrientValue = a;
   			ValidateTrack.EWValidateTrackRegression.IDL = a;
   			Report.Info("IDL TN Value Entered = " + a);
		}	

		//************************************************************************************//
		//*********************************Gets Track Count***********************************//
		//************************************************************************************//
		
		public void GetTrackCount()
		{			
			Ranorex.Container cont1 = repo.FormTacViewC2.ContainerRvView;
			IList<Picture> list1 = cont1.Find<Picture>(@"/form[@title~'^TacViewC2\ \ \ \(map:\ .*']/element/container/picture[@accessiblevalue='Track']");
			TCount = list1.Count;
		}		

		//************************************************************************************//
		//*********************************Gets Track Number**********************************//
		//************************************************************************************//		
		
		public void GetTrackNum()			
		{			
		    TCount++;
		    Accessible pic1 = @"/form[@title~'^TacViewC2\ \ \ \(map:\ .*']/element/container/picture[@accessiblevalue='Track']" + "[" + TCount + "]";
   			Accessible accElement = new Accessible(pic1);  
   			string track1 = accElement.Name;
   			Report.Info("Track Number = " + track1);
   			ValidateTrack.EWValidateTrackRegression.TrackNum = track1;
   			Drop_Track.DropTrack.TrackNum = track1;   			
		}

		//**************************************************************************************//
		//**************************Ranorex Generated Default Method****************************//
		//**************************************************************************************//
		
		static EWCreateTrackRegression()
		{
			//Your recording specific initialization code goes here.
		}

		//************************************************************************************//
		//******************************Randomly Plots a Track********************************//
		//************************************************************************************//		
		
		public void RandCoord()
		{	
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
	       	Ranorex.Container test = @"/form[@title~'^TacViewC2\ \ \ \(map:\ .*']/element/container[@accessiblename='RvView']";
	       	var a = test.ScreenRectangle.Width;
	       	var b = test.ScreenRectangle.Height;
	       	int c = Convert.ToInt32(a);
	       	c = c - 100;
	       	int d = Convert.ToInt32(b);
	       	d = d - 100;
	       	string w = SharedFunctions.Random(100, c);
	       	string h = SharedFunctions.Random(100, d);
	    	repo.FormTacViewC2.ContainerRvView.Click(MouseButtons.Right, "" + w + ";" + h + ""); 
	    	 
	    	Duration OrigDur = repo.FormRealView.MenuItemCreate_TrackInfo.SearchTimeout;
			repo.FormRealView.MenuItemCreate_TrackInfo.SearchTimeout = 1000;			
			
			if (repo.FormRealView.MenuItemCreate_TrackInfo.Exists())
			{
				return;
			}			
			else
			{
				RandCoord();
			}
			
			repo.FormRealView.MenuItemCreate_TrackInfo.SearchTimeout = OrigDur;
		}

		//**************************************************************************************//
		//****************************Ranorex Generated Init Method*****************************//
		//**************************************************************************************//
		
		private void Init()
		{
			// Your recording specific initialization code goes here.
		}	
	}
}
