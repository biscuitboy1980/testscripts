///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using System.Windows.Forms;

using CommonUtilLib;
using Ranorex;
using Ranorex.Core;

namespace TacViewLib.LinkSpecific.Surveillance.EW.CreateTrack
{
	/// <summary>
	/// The CreateTrack recording.
	/// </summary>	

	public partial class CreateTrackRegression
	{	
		public static string freq2;
		
		public static int freq;
		public static int freqU;
		
		public static bool FRIFlag;
		public static bool PosVelFlag;
		public static bool AOPFlag;
		public static bool BearFlag;	
		
		public static int TCount;
		
		//************************************************************************************//
		//*********************************Gets Track Count***********************************//
		//************************************************************************************//
		
		public void GetTrackCount()
		{			
			Ranorex.Container cont1 = repo.FormTacViewC2.ContainerRvView;
			IList<Picture> list1 = cont1.Find<Picture>(@"/form[@title~'^TacViewC2\ \ \ \(map:\ .*']/element/container/picture[@accessiblevalue='Track']");
			TCount = list1.Count;
		}		
		
		//************************************************************************************//
		//******************************Randomly Plots a Track********************************//
		//************************************************************************************//		
		
		public void RandCoord()
		{	
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			SharedFunctions.RandCoord();
		}		
		
		//************************************************************************************//
		//**********************Enters Random Fix or Bearing Descriptor***********************//
		//************************************************************************************//
		
		public void FoBVal()
		{
			int x = 0;
			
			while (x < 2)
			{
				try
				{
					repo.FormMain__EW_TN.ListItemFix_Or_Bearing_Descripto.Click("CenterLeft");
				    Keyboard.Press(Keys.Tab);
				    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List list2 = "//list[@processname='RealView']";
		            int AScount = list2.Items.Count;
		            Random ASvalue = new Random();
		            AScount--;
					int ASnum = ASvalue.Next(0, AScount++);			
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormMain__EW_TN.ListItemFix_Or_Bearing_Descripto);  
		   			string FoBValue = accElement.Value;
		   			ValidateTrack.EWValidateTrackRegression.FoB = FoBValue;
		   			Report.Info("Fix or Bearing Entered = " + FoBValue);
		   			ValidateTrack.EWValidateTrackRegression.FoB_OOR = false;
		   			x=2;
		   			if (ASnum == 0 || ASnum == 1)
	   				{
		   				ValidateTrack.EWValidateTrackRegression.PosVelFlag = true;
		   				PosVelFlag = true;
	   				} 	
		   			else
		   			{
			   			ValidateTrack.EWValidateTrackRegression.PosVelFlag = false;
			   			PosVelFlag = false;	
		   			}
	   				if (ASnum == 1)
	   				{
		   				ValidateTrack.EWValidateTrackRegression.AOPFlag = true;
		   				AOPFlag = true;   			
	   				}
	   				else
	   				{
			   			ValidateTrack.EWValidateTrackRegression.AOPFlag = false;
			   			AOPFlag = false;	
	   				}
	   				if (ASnum == 2 || ASnum == 3 || ASnum == 4 || ASnum == 5 || ASnum == 6)
	   				{
		   				ValidateTrack.EWValidateTrackRegression.BearFlag = true;
		   				BearFlag = true;
	   				} 	
	   				else
	   				{
		   				ValidateTrack.EWValidateTrackRegression.BearFlag = false;
			   			BearFlag = false;	
	   				}	
				}
				catch (ArgumentOutOfRangeException e)
				{								   			
			   		x++;
			   		if (x == 1)
			   		{
			   			Report.Debug("List Count Out of Range for Fix or Bearing Descriptor, Re-Executing Function");
			   			Report.Debug(e.ToString());	
			   		}
			   		else if (x == 2)
			   		{
			   			Report.Debug("List Count Out of Range for Fix or Bearing Descriptor, List Item Will Not be Validated");
			   			Report.Debug(e.ToString());	
			   			ValidateTrack.EWValidateTrackRegression.FoB_OOR = true;
			   		}
				}					
			}
		}			
		
		//************************************************************************************//
		//*******************************Enters Random Identity*******************************//
		//************************************************************************************//
		
		public void IdVal()
		{
			int x = 0;
			
			while (x < 2)
			{
				try
				{
					repo.FormMain__EW_TN.ListItemIdentity.Click("CenterLeft");
				    Keyboard.Press(Keys.Tab);
				    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List list2 = "//list[@processname='RealView']";
		            int AScount = list2.Items.Count;
		            Random ASvalue = new Random();
					int ASnum = ASvalue.Next(0, AScount++);
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormMain__EW_TN.ListItemIdentity);  
		   			string IDValue = accElement.Value;
		   			ValidateTrack.EWValidateTrackRegression.ID = IDValue;
		   			Report.Info("Identity Entered = " + IDValue);
		   			ValidateTrack.EWValidateTrackRegression.ID_OOR = false;
		   			x=2;
				}
				catch (ArgumentOutOfRangeException e)
				{								   			
			   		x++;
			   		if (x == 1)
			   		{
			   			Report.Debug("List Count Out of Range for Identity, Re-Executing Function");
			   			Report.Debug(e.ToString());	
			   		}
			   		else if (x == 2)
			   		{
			   			Report.Debug("List Count Out of Range for Identity, List Item Will Not be Validated");
			   			Report.Debug(e.ToString());	
			   			ValidateTrack.EWValidateTrackRegression.ID_OOR = true;
			   		}
				}					
			}
		}	

		//************************************************************************************//
		//***************************Enters Random Eviron/Category****************************//
		//************************************************************************************//
		
		public void EnvCatval()
		{
			int x = 0;
			
			while (x < 2)
			{
				try
				{
					repo.FormMain__EW_TN.ListItemEnviron_Category.Click("CenterLeft");
				    Keyboard.Press(Keys.Tab);
				    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List list2 = "//list[@processname='RealView']";
		            int AScount = list2.Items.Count;
		            Random ASvalue = new Random();
					int ASnum = ASvalue.Next(1, AScount++);
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormMain__EW_TN.ListItemEnviron_Category);  
		   			string EnvCatValue = accElement.Value;
		   			ValidateTrack.EWValidateTrackRegression.EC = EnvCatValue;
		   			Report.Info("Environ/Category Value Entered = " + EnvCatValue);	
		   			ValidateTrack.EWValidateTrackRegression.EnvCat_OOR = false;
		   			x=2;
				}
				catch (ArgumentOutOfRangeException e)
				{								   			
			   		x++;
			   		if (x == 1)
			   		{
			   			Report.Debug("List Count Out of Range for Environment/Category, Re-Executing Function");
			   			Report.Debug(e.ToString());	
			   		}
			   		else if (x == 2)
			   		{
			   			Report.Debug("List Count Out of Range for Environment/Category, List Item Will Not be Validated");
			   			Report.Debug(e.ToString());	
			   			ValidateTrack.EWValidateTrackRegression.EnvCat_OOR = true;
			   		}
				}						
			}
		}
		
		//************************************************************************************//
		//*******************************Enters Random Platform*******************************//
		//************************************************************************************//
		
		public void PlatVal()
		{
			int x = 0;
			
			while (x < 2)
			{
				try
				{				
					repo.FormMain__EW_TN.ListItemPlatform.Click("CenterLeft");
				    Keyboard.Press(Keys.Tab);
				    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List list2 = "//list[@processname='RealView']";
		            int AScount = list2.Items.Count;
		            Random ASvalue = new Random();
		            AScount--;
					int ASnum = ASvalue.Next(1, AScount++);
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormMain__EW_TN.ListItemPlatform);  
		   			string PlatValue = accElement.Value;
		   			ValidateTrack.EWValidateTrackRegression.Plat = PlatValue;
		   			Report.Info("Platform Entered = " + PlatValue);
		   			ValidateTrack.EWValidateTrackRegression.Plat_OOR = false;
		   			x=2;
				}
				catch (ArgumentOutOfRangeException e)
				{								   			
			   		x++;
			   		if (x == 1)
			   		{
			   			Report.Debug("List Count Out of Range for Platform, Re-Executing Function");
			   			Report.Debug(e.ToString());	
			   		}
			   		else if (x == 2)
			   		{
			   			Report.Debug("List Count Out of Range for Platform, List Item Will Not be Validated");
			   			Report.Debug(e.ToString());	
			   			ValidateTrack.EWValidateTrackRegression.Plat_OOR = true;
			   		}
				}				
			}
		}		

		//************************************************************************************//
		//*********************************Gets Track Number**********************************//
		//************************************************************************************//		
		
		public void GetTrackNum()			
		{			
			try
			{
			    TCount++;
			    Accessible pic1 = @"/form[@title~'^TacViewC2\ \ \ \(map:\ .*']/element/container/picture[@accessiblevalue='Track']" + "[" + TCount + "]";
	   			Accessible accElement = new Accessible(pic1);  
	   			string track1 = accElement.Name;
	   			Report.Info("Track Number = " + track1);
	   			ValidateTrack.EWValidateTrackRegression.TrackNum = track1;
	   			Drop_Track.DropTrack.TrackNum = track1;   	
			}
			catch (Exception)
            {
				ValidateTrack.ValidateTrackRegression.ExitFlag1 = true;
				ValidateTrack.ValidateTrackRegression.ExitFlag2 = true;
				Report.Debug("picture[@accessiblevalue='Track']" + "[" + TCount + "] could not be found. Accessible item was not created. All validation for this track will be skipped");
            }			
		}

		private void Init()
		{
			// Your recording specific initialization code goes here.
		}
	}
}
