///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using System.Windows.Forms;

using Ranorex;
using Ranorex.Core;

using CommonUtilLib;

namespace TacViewLib.LinkSpecific.Surveillance.Subsurface.ValidateTrack
{
    public partial class ValidateSubsurfaceTrackL16_L11
 	{
		public static bool ZoomFlag = false;		
		public static string TrackNum;		
		
		//Basic Info
		public static string ID;
		public static string Act;
		public static string L11ID;
		public static string L11Mission;
		public static string L16ID;
		public static string L16Act;
	
		//Out of Range Flags
		public static bool ID_OOR;
		public static bool Act_OOR;
		
		//Other		
		public static bool Link11 = false;					
		
		//************************************************************************************//
		//*******************************Right Clicks on Track********************************//
		//************************************************************************************//		
		
		public void RightClickTrack()
		{			
			Duration OrigDur = repo.FormTacViewC2.PictureTrackInfo.SearchTimeout;
			repo.FormTacViewC2.PictureTrackInfo.SearchTimeout = 2000;			
			
			if (repo.FormTacViewC2.PictureTrackInfo.Exists())
			{
				Report.Info("Mouse Right Click item 'FormTacViewC2.PictureTrack' at Center.");
				repo.FormTacViewC2.PictureTrack.Click(MouseButtons.Right);
			}
			else
			{
				ZoomFlag = true;
				Report.Info("Track # " + TrackNum + " not found on the current display, going to world wide view");
				Report.Screenshot();
				repo.FormTacViewC2.ButtonZoom_Out_Max.Click();
				
				if (repo.FormTacViewC2.PictureTrackInfo.Exists())
				{
					Report.Info("Mouse Right Click item 'FormTacViewC2.PictureTrack' at Center.");
					repo.FormTacViewC2.PictureTrack.Click(MouseButtons.Right);
				}
				else
				{
					Report.Error("Unable to find Track # " + TrackNum + " anywhere in the world");
					Report.Screenshot();
					return;
				}				
			}
			
			repo.FormTacViewC2.PictureTrackInfo.SearchTimeout = OrigDur;
		}		

		//************************************************************************************//
		//********************Opens Track Dialog For Corresponding Track**********************//
		//************************************************************************************//
		
		public void ViewTrackProperties()
		{			
			Duration OrigDur = repo.FormRealView.MenuItemTracksInfo.SearchTimeout;
			repo.FormRealView.MenuItemTracksInfo.SearchTimeout = 1000;
			Duration OrigDur1 = repo.FormRealView.MenuItemTrackNumber2Info.SearchTimeout;
			repo.FormRealView.MenuItemTrackNumber2Info.SearchTimeout = 1000;			
			
			if (repo.FormRealView.MenuItemTracksInfo.Exists())
			{
				Report.Info("Mouse Left Click item 'FormRealView.MenuItemTracks'");
			    repo.FormRealView.MenuItemTracks.Click();
			    Report.Info("Mouse Left Click item 'FormTracks.MenuItemC2_HOST_2_Track'");
		        repo.FormTracks.MenuItemConnection2_Track.Click();
		       	Report.Info("Mouse Left Click item 'FormTOAD2.MenuItemTrack_Properties");
				repo.FormConnection2.MenuItemTrack_Properties.Click();
			}			
			else if (repo.FormRealView.MenuItemTrackNumber2Info.Exists())
			{
			    Report.Info("Mouse Left Click item 'repo.FormRealView.MenuItemTrackNumber2'");
		        repo.FormRealView.MenuItemTrackNumber2.Click();
		       	Report.Info("Mouse Left Click item 'FormTOAD2.MenuItemTrack_Properties");
				repo.FormConnection2.MenuItemTrack_Properties.Click();
			}
			
			repo.FormRealView.MenuItemTracksInfo.SearchTimeout = OrigDur;
			repo.FormRealView.MenuItemTrackNumber2Info.SearchTimeout = OrigDur1;
		}
		
		//************************************************************************************//
		//****************************Validates Source Type Value*****************************//
		//************************************************************************************//
		
		public void ValidateSourceType()
		{
			Accessible accElement = new Accessible(repo.FormMain__SubSurface_TN.ListItemSource_Type);  
			string SrcValue = accElement.Value;
		   		
		 	if (SrcValue == "TADIL A" || SrcValue == "TADIL B")
	  		{
		   		Link11 = true;
		   		Report.Info("Link 11 Track Detected. Validating Link 11 Values");
		   	}
		   	else
		   	{
		   		Link11 = false;
		   		Report.Info("Link 16 Track Detected. Validating Link 16 Values");
		   	}
		}	
		
		//************************************************************************************//
		//****************************Validates Track Type Value******************************//
		//************************************************************************************//
		
		public void ValidateTrackType()
		{
			if (Link11 == true)
			{
				Report.Info("Validating AttributeEqual (AccessibleValue='L11 SubSurface') on item 'FormMain__SubSurface_TN.ListItemTrack_Type'.");
				Validate.Attribute(repo.FormMain__SubSurface_TN.ListItemTrack_TypeInfo, "AccessibleValue", "L11 SubSurface", Validate.DefaultMessage, false);
			}
			else
			{
				Report.Info("Validating AttributeEqual (AccessibleValue='SubSurface') on item 'FormMain__SubSurface_TN.ListItemTrack_Type'.");
				Validate.Attribute(repo.FormMain__SubSurface_TN.ListItemTrack_TypeInfo, "AccessibleValue", "SubSurface", Validate.DefaultMessage, false);
			}
		}		
		
		//************************************************************************************//
		//**************************Validates Subsurface Type Value***************************//
		//************************************************************************************//
		
		public void ValidateSubsurfaceType()
		{
			if (Link11 == true)
			{
				Report.Info("Validating AttributeEqual (AccessibleValue='ASW (4A)') on item 'FormMain__SubSurface_TN.ListItemSubsurface_TypeInfo'.");
				Validate.Attribute(repo.FormMain__SubSurface_TN.ListItemSubsurface_TypeInfo, "AccessibleValue", "ASW (4A)", Validate.DefaultMessage, false);
			}
			else
			{
				Report.Info("Validating AttributeEqual (AccessibleValue='SubSurface') on item 'FormMain__SubSurface_TN.ListItemSubsurface_TypeInfo'.");
				Validate.Attribute(repo.FormMain__SubSurface_TN.ListItemSubsurface_TypeInfo, "AccessibleValue", "SubSurface", Validate.DefaultMessage, false);
			}
		}				
		
		//************************************************************************************//
		//*********************Validates Subsurface ID, and Activity Value********************//
		//************************************************************************************//
				
		public void ValidateSubsurface()
		{
			if (!ID_OOR && !Act_OOR)
			{				
				CommonUtilLib.Forwarding ForwardingFunctions = new CommonUtilLib.Forwarding();
				ForwardingFunctions.Convert_SubsurfaceL16_L11(ID, Act, out L11ID, out L11Mission);					
				Report.Info("Link 16 Identity Value Entered = " + ID);
				Report.Info("Link 16 Activity Value Entered = " + Act);
					
				Report.Info("Link 11 Identity Value = " + L11ID);
				Report.Info("Link 11 ID Amp Value = " + L11Mission);	
				
				if (Link11 == true)
				{
					Report.Info("Validating AttributeEqual (Text='(ID)') on item 'repo.FormMain__SubSurface_TN.ListItemIdentityInfo'.");
					Validate.Attribute(repo.FormMain__SubSurface_TN.ListItemIdentityInfo, "AccessibleValue", L11ID, Validate.DefaultMessage, false);
					Report.Info("Validating AttributeEqual (Text='(Mission)') on item 'repo.FormMain__SubSurface_TN.ListItemMissionInfo'.");
					if (L11Mission == "N.S.")
					{
						Validate.NotExists(repo.FormMain__SubSurface_TN.ListItemMissionInfo, Validate.DefaultMessage, false);	
					}
					else
					{
						Duration OrigDur = repo.FormMain__SubSurface_TN.ListItemMissionInfo.SearchTimeout;
						repo.FormMain__SubSurface_TN.ListItemMissionInfo.SearchTimeout = 2000;
			
						Validate.Attribute(repo.FormMain__SubSurface_TN.ListItemMissionInfo, "AccessibleValue", L11Mission, Validate.DefaultMessage, false);
						
						repo.FormMain__SubSurface_TN.ListItemMissionInfo.SearchTimeout = OrigDur;						
					}				
				}
				else
				{
					CommonUtilLib.Forwarding ForwardingFunctions1 = new CommonUtilLib.Forwarding();
					ForwardingFunctions1.Convert_SubsurfaceL11_L16(L11ID, L11Mission, out L16ID, out L16Act);						
					Report.Info("Validating AttributeEqual (Text='(ID)') on item 'repo.FormMain__SubSurface_TN.ListItemIdentityInfo'.");
					Validate.Attribute(repo.FormMain__SubSurface_TN.ListItemIdentityInfo, "AccessibleValue", L16ID, Validate.DefaultMessage, false);					
					Report.Info("Validating AttributeEqual (Text='(Activity)') on item 'repo.FormMain__SubSurface_TN.ListItemActivityInfo'.");
					Validate.Attribute(repo.FormMain__SubSurface_TN.ListItemActivityInfo, "AccessibleValue", L16Act, Validate.DefaultMessage, false);
				}
			}
		}			
		
		//************************************************************************************//
		//****************************Drops Corresponding Track*******************************//
		//************************************************************************************//
		
		public void DropTrack()
		{			
			Drop_Track.DropTrack.Start();
		}

		//************************************************************************************//
		//***************************Validates Track is Dropped*******************************//
		//************************************************************************************//
		
		public void Validate_DropTrack()
		{
			Duration OrigDur = repo.FormTacViewC2.PictureTrackInfo.SearchTimeout;
			repo.FormTacViewC2.PictureTrackInfo.SearchTimeout = 8000;
			
			Report.Info("Validating Track #" + TrackNum + " was dropped");
	
			bool result = Validate.NotExists(repo.FormTacViewC2.PictureTrackInfo, Validate.DefaultMessage, false);			
			
			if (result == true)
			{
				Report.Success("Successfully dropped track #" + TrackNum);
			}
			else
			{
				Report.Debug("Track #" + TrackNum + " failed to drop within 8 seconds, proceeding to next track creation.");
				Report.Screenshot();				
			}
			
			repo.FormTacViewC2.PictureTrackInfo.SearchTimeout = OrigDur;
		}		
		
		//************************************************************************************//
		//*****************************Zooms Out to Locate Track******************************//
		//************************************************************************************//	
		
		public void Zoom500()
		{
			if (ZoomFlag == true)
			{
				Report.Info("Mouse Left Click item 'FormTacViewC2.ButtonSet_Range_to_500_km' at Center.");
				repo.FormTacViewC2.ButtonSet_Range_to_500_km.Click();
				Report.Info("Mouse Left Click item 'FormTacViewC2.Button_Center_on_Own_Site' at Center.");
				repo.FormTacViewC2.Button_Center_on_Own_Site.Click();
				ZoomFlag = false;
			}
		}

		//**************************************************************************************//
		//*****************************Ranorex Generated Init Method****************************//
		//**************************************************************************************//
		
		private void Init()
		{
			// Your recording specific initialization code goes here.
		}

		//************************************************************************************//
		//*****************************Sets Track Number in Repo******************************//
		//************************************************************************************//
		
		public void SetTrackNumberInRepo()
		{
			tracknumber = TrackNum;	
			Report.Info("Setting tracknumber to " + tracknumber);
		}
	}
}