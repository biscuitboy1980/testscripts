///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using System.Windows.Forms;

using CommonUtilLib;
using Ranorex;
using Ranorex.Core;

namespace TacViewLib.LinkSpecific.Surveillance.Space.ValidateTrack
{
	/// <summary>
	/// The ValidateTrackRegression recording.
	/// </summary>

	public partial class SpaceValidateTrackRegression
	{	
		public static bool ZoomFlag = false;
		
		public static string TrackNum;
		
		//Basic Info
		public static string ID;
		public static string Plat;		
		public static string Act;	
		public static string SType;	

		//Position & Velocity
		public static string Alt;
		public static string Vel;
		public static string Crs;
		public static string MagCrs;
		
		//Interface Info
		public static string TQ;
		public static string RU;
		public static string Hi;	
		
		public static bool HIFlag;

		//Indicators
		public static string SPI;
		public static string HR;
		public static string MN;
		
		public static bool SPIFlag;

		//Space Info
		public static string SpAmp;
		public static string AmpCon;
		public static string DatInd;
		
		//Other TNs
		public static string IDL;
		public static string TADIL;
		public static string ATDL1;
		public static string NL1;
		public static string TADILJ;
		public static string Ext;
		
		//Flags
		public static bool ID_OOR;
		public static bool Plat_OOR;
		public static bool Act_OOR;
		public static bool Stype_OOR;
		public static bool HiPri_OOR;
		public static bool SPI_OOR;
		public static bool SpAmp_OOR;
		public static bool AmpCon_OOR;
		public static bool DatInd_OOR;
		
		//************************************************************************************//
		//******************************Validates Identity Value******************************//
		//************************************************************************************//
				
		public void ValidateId()
		{
			if (!ID_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(Identity)') on item 'repo.FormMain__Space_TN.ListItemIdentity'.");
				Report.Info("Value Entered = " + ID);
				Validate.Attribute(repo.FormMain__Space_TN.ListItemIdentityInfo, "AccessibleValue", ID, Validate.DefaultMessage, false);
			}
		}		

		//************************************************************************************//
		//******************************Validates Platform Value******************************//
		//************************************************************************************//
				
		public void ValidatePlat()
		{
			if (!Plat_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(Platform)') on item 'repo.FormMain__Space_TN.ListItemPlatform'.");
				Report.Info("Value Entered = " + Plat);
				Validate.Attribute(repo.FormMain__Space_TN.ListItemPlatformInfo, "AccessibleValue", Plat, Validate.DefaultMessage, false);
			}
		}	
		
		//************************************************************************************//
		//******************************Validates Activity Value******************************//
		//************************************************************************************//
				
		public void ValidateAct()
		{
			if (!Act_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(Activity)') on item 'repo.FormMain__Space_TN.ListItemActivity'.");
				Report.Info("Value Entered = " + Act);
				Validate.Attribute(repo.FormMain__Space_TN.ListItemActivityInfo, "AccessibleValue", Act, Validate.DefaultMessage, false);
			}
		}	
		
		//************************************************************************************//
		//***************************Validates Specific Type Value****************************//
		//************************************************************************************//
				
		public void ValidateSType()
		{
			if (!Stype_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(Specific Type)') on item 'repo.FormMain__Space_TN.ListItemSpecific_Type'.");
				Report.Info("Value Entered = " + SType);
				Validate.Attribute(repo.FormMain__Space_TN.ListItemSpecific_TypeInfo, "AccessibleValue", SType, Validate.DefaultMessage, false);
			}
		}		

		//************************************************************************************//
		//*****************************Validates Altitude Value*******************************//
		//************************************************************************************//
				
		public void ValidateAlt()
		{
			Accessible accElement = new Accessible(repo.FormMain__Space_TN.ListItemAltitude);
			string RxAlt= accElement.Value;
			Report.Info("Validating AttributeEqual (Text='(Altitude)') on item 'repo.FormMain__Space_TN.ListItemAltitude'.");
			Report.Info("Value Entered = " + Alt);
			Report.Info("Value Received = " + RxAlt);
			Report.Info("Allowable Deviation = +/- 15 Units");
			Validate.IsTrue((Convert.ToInt32(RxAlt) > Convert.ToInt32(Alt) - 15) && (Convert.ToInt32(RxAlt) < Convert.ToInt32(Alt) + 15), Validate.DefaultMessage, false);
		}			
				
		//************************************************************************************//
		//*****************************Validates Velocity Value*******************************//
		//************************************************************************************//
				
		public void ValidateVel()
		{
			Accessible accElement = new Accessible(repo.FormMain__Space_TN.ListItemSpeedVelocity);
			string RxVel = accElement.Value;
			Report.Info("Validating AttributeEqual (Text='(Velocity)') on item 'repo.FormMain__Space_TN.ListItemVelocity'.");
			Report.Info("Value Entered = " + Vel);
			Report.Info("Value Received = " + RxVel);
			Report.Info("Allowable Deviation = +/- 5 Units");
			Validate.IsTrue((Convert.ToDouble(RxVel) > Convert.ToDouble(Vel) - 5) && (Convert.ToDouble(RxVel) < Convert.ToDouble(Vel) + 5), Validate.DefaultMessage, false);
		}
			
		//************************************************************************************//
		//****************************Validates True Course Value*****************************//
		//************************************************************************************//
				
		public void ValidateCrs()
		{
			Accessible accElement1 = new Accessible(repo.FormMain__Space_TN.ListItemTrue_Course);
			string RxCrs = accElement1.Value;
			Report.Info("Validating AttributeEqual (Text='(True Course)') on item 'repo.FormMain__Space_TN.ListItemTrue_Course'.");
			Report.Info("Value Entered = " + Crs);
			Report.Info("Value Received = " + RxCrs );
			Report.Info("Allowable Deviation = +/- 5 Units");
			Validate.IsTrue((Convert.ToDouble(RxCrs) > Convert.ToDouble(Crs) - 5) && (Convert.ToDouble(RxCrs) < Convert.ToDouble(Crs) + 5), Validate.DefaultMessage, false);
		
			Report.Info("Validating AttributeEqual (Text='Magnetic Course') on item 'FormMain__Space_TN.ListItemMagnetic_Course'.");
			Report.Info("Value Entered = " + MagCrs);
			Report.Info("Magnetic Course is a local value and will not be validated on the remote interface");
			//Validate.Attribute(repo.FormMain__Space_TN.ListItemMagnetic_CourseInfo, "AccessibleValue", MagCrs, Validate.DefaultMessage,false);
		}
			
		//************************************************************************************//
		//****************************Validates Remote TQ Value*******************************//
		//************************************************************************************//
				
		public void ValidateTQ()
		{
			Report.Info("Validating AttributeEqual (Text='(Remote TQ)') on item 'repo.FormMain__Space_TN.ListItemRemote_TQ'.");
			Report.Info("Value Entered = " + TQ);
			Validate.Attribute(repo.FormMain__Space_TN.ListItemRemote_TQInfo, "AccessibleValue", TQ, Validate.DefaultMessage, false);
		}

		//************************************************************************************//
		//****************************Validates Hi Priority Value*****************************//
		//************************************************************************************//
				
		public void ValidateHiPriority()
		{
			if (!HiPri_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(Hi Priority)') on item 'FormMain__Space_TN.ListItemHi_PriorityInfo'.");
				Report.Info("Value Entered = " + Hi);
				Report.Info("Hi Priority is a local value and will not be validated on the remote interface");
				//Validate.Attribute(repo.FormMain__Space_TN.ListItemHi_PriorityInfo, "AccessibleValue", Hi, Validate.DefaultMessage, false);
			}
		}		

		//************************************************************************************//
		//*********************************Validates SPI Value********************************//
		//************************************************************************************//
				
		public void ValidateSPI()
		{
			if (SPIFlag && !SPI_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(SPI)') on item 'repo.FormMain__Space_TN.ListItemSPI'.");
				Report.Info("Value Entered = " + SPI);
				Validate.Attribute(repo.FormMain__Space_TN.ListItemSPIInfo, "AccessibleValue", SPI, Validate.DefaultMessage, false);
			}		
		}
		
		//************************************************************************************//
		//******************************Validates Time Hour Value*****************************//
		//************************************************************************************//
				
		public void ValidateHR()
		{
			bool Defect = false;
			
			//****Setting to true, open defect***//
			
			Defect = true;
		
			if (Defect == false)
			{			
				Report.Info("Validating AttributeEqual (Text='(Hour)') on item 'FormMain__Space_TN.ListItemHour'.");
				Report.Info("Value Entered = " + HR);
				Validate.Attribute(repo.FormMain__Space_TN.ListItemHourInfo, "AccessibleValue", HR, Validate.DefaultMessage, false);
			}
			else
			{
				Report.Debug("Hour is currently not functioning and is written up in R-02099");
			}
		}

		//************************************************************************************//
		//*****************************Validates Time Minute Value****************************//
		//************************************************************************************//
				
		public void ValidateMN()
		{
			bool Defect = false;
			
			//****Setting to true, open defect***//
			
			Defect = true;
		
			if (Defect == false)
			{	
				Report.Info("Validating AttributeEqual (Text='(Minute)') on item 'FormMain__Space_TN.ListItemMinute'.");
				Report.Info("Value Entered = " + MN);
				Validate.Attribute(repo.FormMain__Space_TN.ListItemMinuteInfo, "AccessibleValue", MN, Validate.DefaultMessage, false);
			}	
			else
			{
				Report.Debug("Minute is currently not functioning and is written up in R-02099");
			}
		}
		
		//************************************************************************************//
		//************************Validates Space Amplification Value*************************//
		//************************************************************************************//
				
		public void ValidateSpAmp()
		{
			if (!SpAmp_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(Space Amplification)') on item 'FormMain__Space_TN.ListItemSpace_Amplification'.");
				Report.Info("Value Entered = " + SpAmp);
				Validate.Attribute(repo.FormMain__Space_TN.ListItemSpace_AmplificationInfo, "AccessibleValue", SpAmp, Validate.DefaultMessage, false);
			}
		}		

		//************************************************************************************//
		//*********************Validates Amplification Confidence Value***********************//
		//************************************************************************************//
				
		public void ValidateAmpCon()
		{
			if (!AmpCon_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(Amplification Confidence)') on item 'FormMain__Space_TN.ListItemAmplification_Confidence'.");
				Report.Info("Value Entered = " + AmpCon);
				Validate.Attribute(repo.FormMain__Space_TN.ListItemAmplification_ConfidenceInfo, "AccessibleValue", AmpCon, Validate.DefaultMessage, false);
			}
		}		
		
		//************************************************************************************//
		//***************************Validates Data Indicator Value***************************//
		//************************************************************************************//
				
		public void ValidateBoostInd()
		{
			bool Defect = false;
			
			//****Setting to true, open defect***//
			
			Defect = true;
		
			if (Defect == false)
			{	
				if (!DatInd_OOR)
				{
				Report.Info("Validating AttributeEqual (Text='(Data Indicator)') on item 'FormMain__Space_TN.ListItemData_Indicator'.");
				Report.Info("Value Entered = " + DatInd);
				Validate.Attribute(repo.FormMain__Space_TN.ListItemBoost_IndicatorInfo, "AccessibleValue", DatInd, Validate.DefaultMessage, false);
				}
			}	
			else
			{
				Report.Debug("Data Indicator is currently not functioning and is written up in R-02179");
			}	
		}			
		
		//************************************************************************************//
		//*******************************Validates IDL TN Value*******************************//
		//************************************************************************************//
				
		public void ValidateIDL()
		{
			bool Defect = false;
			
			//****Setting to true, open defect***//
			
			Defect = true;
		
			if (Defect == false)
			{		
				Report.Info("Validating AttributeEqual (Text='(IDL TN)') on item 'FormMain__Space_TN.ListItemIDL_TN'.");
				Report.Info("Value Entered = " + IDL);
				Validate.Attribute(repo.FormMain__Space_TN.ListItemIDL_TNInfo, "AccessibleValue", IDL, Validate.DefaultMessage, false);
			}		
			else
			{
				Report.Debug("IDL Track Number is currently not functioning and is written up in R-02103");
			}	
		}	
		
		//************************************************************************************//
		//******************************Validates TADIL TN Value******************************//
		//************************************************************************************//
				
		public void ValidateTADIL()
		{
			bool Defect = false;
			
			//****Setting to true, open defect***//
			
			Defect = true;
		
			if (Defect == false)
			{	
				Report.Info("Validating AttributeEqual (Text='(TADIL TN)') on item 'FormMain__Space_TN.ListItemTADIL_TN'.");
				Report.Info("Value Entered = " + TADIL);
				Validate.Attribute(repo.FormMain__Space_TN.ListItemTADIL_TNInfo, "AccessibleValue", TADIL, Validate.DefaultMessage, false);
			}	
			else
			{
				Report.Debug("TADIL Track Number is currently not functioning and is written up in R-02103");
			}	
		}	
		
		//************************************************************************************//
		//******************************Validates ATDIL1 TN Value*****************************//
		//************************************************************************************//
				
		public void ValidateATDIL()
		{
			bool Defect = false;
			
			//****Setting to true, open defect***//
			
			Defect = true;
		
			if (Defect == false)
			{	
				Report.Info("Validating AttributeEqual (Text='(ADTIL1 TN)') on item 'FormMain__Space_TN.ListItemATDL1_TN'.");
				Report.Info("Value Entered = " + ATDL1);
				Validate.Attribute(repo.FormMain__Space_TN.ListItemATDL1_TNInfo, "AccessibleValue", ATDL1, Validate.DefaultMessage, false);
			}	
			else
			{
				Report.Debug("ATDL-1 Track Number is currently not functioning and is written up in R-02103");
			}	
		}	
		
		//************************************************************************************//
		//********************************Validates NL1 TN Value******************************//
		//************************************************************************************//
				
		public void ValidateNL1()
		{
			bool Defect = false;
			
			//****Setting to true, open defect***//
			
			Defect = true;
		
			if (Defect == false)
			{	
				Report.Info("Validating AttributeEqual (Text='(NL1 TN)') on item 'FormMain__Space_TN.ListItemNL1_TN'.");
				Report.Info("Value Entered = " + NL1);
				Validate.Attribute(repo.FormMain__Space_TN.ListItemNL1_TNInfo, "AccessibleValue", NL1, Validate.DefaultMessage, false);
			}			
			else
			{
				Report.Debug("NATO Link-1 Track Number is currently not functioning and is written up in R-02103");
			}	
		}	
		
		//************************************************************************************//
		//******************************Validates TADILJ TN Value****************************//
		//************************************************************************************//
				
		public void ValidateTADILJ()
		{
			bool Defect = false;
			
			//****Setting to true, open defect***//
			
			Defect = true;
		
			if (Defect == false)
			{	
				Report.Info("Validating AttributeEqual (Text='(TADILJ TN)') on item 'FormMain__Land_Point_Track_TN.ListItemTADIL_J_TN'.");
				Report.Info("Value Entered = " + TADILJ);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN.ListItemTADIL_J_TNInfo, "AccessibleValue", TADILJ, Validate.DefaultMessage, false);
			}	
			else
			{
				Report.Debug("TADIL-J Track Number is currently not functioning and is written up in R-02103");
			}	
		}	
		
		//************************************************************************************//
		//*****************************Validates External TN Value****************************//
		//************************************************************************************//
				
		public void ValidateExt()
		{
			bool Defect = false;
			
			//****Setting to true, open defect***//
			
			Defect = true;
		
			if (Defect == false)
			{	
				Report.Info("Validating AttributeEqual (Text='(External TN)') on item 'FormMain__Space_TN.ListItemExternal_TN'.");
				Report.Info("Value Entered = " + Ext);
				Validate.Attribute(repo.FormMain__Space_TN.ListItemExternal_TNInfo, "AccessibleValue", Ext, Validate.DefaultMessage, false);
			}

			else
			{
				Report.Debug("External Track Number is currently not functioning and is written up in R-02103");
			}	
		}					
		
		//************************************************************************************//
		//************************************************************************************//
		//************************************************************************************//	
		
		public void RightClickTrack()
		{			
			Duration OrigDur = repo.FormTacViewC2.PictureTrackInfo.SearchTimeout;
			repo.FormTacViewC2.PictureTrackInfo.SearchTimeout = 2000;			
			
			if (repo.FormTacViewC2.PictureTrackInfo.Exists())
			{
				Report.Info("Mouse Right Click item 'FormTacViewC2.PictureTrack' at Center.");
				repo.FormTacViewC2.PictureTrack.Click(MouseButtons.Right);
			}
			else
			{
				ZoomFlag = true;
				Report.Info("Track # " + TrackNum + " not found on the current display, going to world wide view");
				Report.Screenshot();
				repo.FormTacViewC2.ButtonZoom_Out_Max.Click();
				
				if (repo.FormTacViewC2.PictureTrackInfo.Exists())
				{
					Report.Info("Mouse Right Click item 'FormTacViewC2.PictureTrack' at Center.");
					repo.FormTacViewC2.PictureTrack.Click(MouseButtons.Right);
				}
				else
				{
					Report.Error("Unable to find Track # " + TrackNum + " anywhere in the world");
					Report.Screenshot();
					return;
				}				
			}
			
			repo.FormTacViewC2.PictureTrackInfo.SearchTimeout = OrigDur;
		}	
		
		//************************************************************************************//
		//*******************Opens Track Dialog For Corresponding Track***********************//
		//************************************************************************************//			

		public void ViewTrackProperties()
		{			
			Duration OrigDur = repo.FormRealView.MenuItemTracksInfo.SearchTimeout;
			repo.FormRealView.MenuItemTracksInfo.SearchTimeout = 1000;
			Duration OrigDur1 = repo.FormRealView.MenuItemTrackNumber2Info.SearchTimeout;
			repo.FormRealView.MenuItemTrackNumber2Info.SearchTimeout = 1000;			
			
			if (repo.FormRealView.MenuItemTracksInfo.Exists())
			{
				Report.Info("Mouse Left Click item 'FormRealView.MenuItemTracks'");
			    repo.FormRealView.MenuItemTracks.Click();
			    Report.Info("Mouse Left Click item 'FormTracks.MenuItemC2_HOST_2_Track'");
		        repo.FormTracks.MenuItemConnection2_Track.Click();
		       	Report.Info("Mouse Left Click item 'FormTOAD2.MenuItemTrack_Properties' at 103;14.");
				repo.FormConnection2.MenuItemTrack_Properties.Click();
			}			
			else if (repo.FormRealView.MenuItemTrackNumber2Info.Exists())
			{
			    Report.Info("Mouse Left Click item 'repo.FormRealView.MenuItemTrackNumber2'");
		        repo.FormRealView.MenuItemTrackNumber2.Click();
		       	Report.Info("Mouse Left Click item 'FormTOAD2.MenuItemTrack_Properties' at 103;14.");
				repo.FormConnection2.MenuItemTrack_Properties.Click();
			}
			
			repo.FormRealView.MenuItemTracksInfo.SearchTimeout = OrigDur;
			repo.FormRealView.MenuItemTrackNumber2Info.SearchTimeout = OrigDur1;
		}		
		
		//************************************************************************************//
		//****************************Drops Corresponding Track*******************************//
		//************************************************************************************//
		
		public void DropTrack()
		{			
			Drop_Track.DropTrack.Start();
		}

		//************************************************************************************//
		//***************************Validates Track is Dropped*******************************//
		//************************************************************************************//
		
		public void Validate_DropTrack()
		{
			Duration OrigDur = repo.FormTacViewC2.PictureTrackInfo.SearchTimeout;
			repo.FormTacViewC2.PictureTrackInfo.SearchTimeout = 8000;

			Report.Info("Validating Track #" + TrackNum + " was dropped");
	
			bool result = Validate.NotExists(repo.FormTacViewC2.PictureTrackInfo, Validate.DefaultMessage, false);
			
			if (result == true)
			{
				Report.Success("Successfully dropped track #" + TrackNum);
			}
			else
			{
				Report.Debug("Track #" + TrackNum + " failed to drop within 8 seconds, proceeding to next track creation.");
				Report.Screenshot();				
			}
			
			repo.FormTacViewC2.PictureTrackInfo.SearchTimeout = OrigDur;
		}	
		
		//************************************************************************************//
		//*****************************Zooms Out to Locate Track******************************//
		//************************************************************************************//	
		
		public void Zoom500()
		{
			if (ZoomFlag == true)
			{
				Report.Info("Mouse Left Click item 'FormTacViewC2.ButtonSet_Range_to_500_km' at Center.");
				repo.FormTacViewC2.ButtonSet_Range_to_500_km.Click();
				Report.Info("Mouse Left Click item 'FormTacViewC2.Button_Center_on_Own_Site' at Center.");
				repo.FormTacViewC2.Button_Center_on_Own_Site.Click();
				ZoomFlag = false;
			}
		}
		
		//************************************************************************************//
		//*****************************Sets Track Number in Repo******************************//
		//************************************************************************************//
		
		public void SetTrackNumberInRepo()
		{
			tracknumber = TrackNum;	
		}

		//**************************************************************************************//
		//**************************Ranorex Generated Default Method****************************//
		//**************************************************************************************//
		
		static SpaceValidateTrackRegression()
		{
			//Your recording specific initialization code goes here.
		}

		//**************************************************************************************//
		//****************************Ranorex Generated Init Method*****************************//
		//**************************************************************************************//
		
		private void Init()
		{
			// Your recording specific initialization code goes here.
		}

        public void ValidateHI()
        {
            // Your code goes here. Code inside this method will not be changed by the code generator.
            
        }
	}
}