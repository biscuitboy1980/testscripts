///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using System.Windows.Forms;

using CommonUtilLib;
using Ranorex;
using Ranorex.Core;

namespace TacViewLib.LinkSpecific.Surveillance.Space.CreateTrack
{
	/// <summary>
	/// The CreateTrack recording.
	/// </summary>	

	public partial class SpaceCreateTrackRegression
	{				
		public static int TCount;
		public static bool RTEFlag;
		
		//************************************************************************************//
		//*******************************Enters Random Identity*******************************//
		//************************************************************************************//
		
		public void IdVal()
		{

				try
				{
					repo.FormMain__Space_TN.ListItemIdentity.Click("CenterLeft");
				    Keyboard.Press(Keys.Tab);
				    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List list2 = "//list[@processname='RealView']";
		            int AScount = list2.Items.Count;
		            Random ASvalue = new Random();
					int ASnum = ASvalue.Next(0, AScount);
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormMain__Space_TN.ListItemIdentity);  
		   			string IDValue = accElement.Value;
		   			ValidateTrack.SpaceValidateTrackRegression.ID = IDValue;
		   			Report.Info("Identity Entered = " + IDValue);
		   			ValidateTrack.SpaceValidateTrackRegression.ID_OOR = false;

				}
				catch (ArgumentOutOfRangeException e)
				{								   			

			   			Report.Debug("List Count Out of Range for Identity, List Item Will Not be Validated");
			   			Report.Debug(e.ToString());	
			   			ValidateTrack.SpaceValidateTrackRegression.ID_OOR = true;
			   		
				}					
			
		}		
		
		//************************************************************************************//
		//*******************************Enters Random Platform*******************************//
		//************************************************************************************//
		
		public void PlatVal()
		{

				try
				{
					repo.FormMain__Space_TN.ListItemPlatform.Click("CenterLeft");
				    Keyboard.Press(Keys.Tab);
				    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List list2 = "//list[@processname='RealView']";
		            int AScount = list2.Items.Count;
		            Random ASvalue = new Random();
		            AScount--;
					int ASnum = ASvalue.Next(1, AScount-1);
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormMain__Space_TN.ListItemPlatform);  
		   			string PlatValue = accElement.Value;
		   			ValidateTrack.SpaceValidateTrackRegression.Plat = PlatValue;
		   			Report.Info("Platform Entered = " + PlatValue);
		   			ValidateTrack.SpaceValidateTrackRegression.Plat_OOR = false;
		
				}
				catch (ArgumentOutOfRangeException e)
				{								   			
	
			   			Report.Debug("List Count Out of Range for Platform, List Item Will Not be Validated");
			   			Report.Debug(e.ToString());	
			   			ValidateTrack.SpaceValidateTrackRegression.Plat_OOR = true;
			   		
				}					
			}

       

        private void Init()
        {
            // Your recording specific initialization code goes here.
        }		

		//************************************************************************************//
		//*******************************Enters Random Activity*******************************//
		//************************************************************************************//
		
		public void ActVal()
		{

				try
				{
					repo.FormMain__Space_TN.ListItemActivity.Click("CenterLeft");
				    Keyboard.Press(Keys.Tab);
				    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List list2 = "//list[@processname='RealView']";
		            int AScount = list2.Items.Count;
		            Random ASvalue = new Random();
		            AScount--;
					int ASnum = ASvalue.Next(1, AScount-1);
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormMain__Space_TN.ListItemActivity);  
		   			string ActValue = accElement.Value;
		   			ValidateTrack.SpaceValidateTrackRegression.Act = ActValue;
		   			Report.Info("Activity Entered = " + ActValue);
		   			ValidateTrack.SpaceValidateTrackRegression.Act_OOR = false;
		   		
				}
				catch (ArgumentOutOfRangeException e)
				{								   			

			   			Report.Debug("List Count Out of Range for Activity, List Item Will Not be Validated");
			   			Report.Debug(e.ToString());	
			   			ValidateTrack.SpaceValidateTrackRegression.Act_OOR = true;
			   		
				}					
			
		}	
		
		//************************************************************************************//
		//*****************************Enters Random Specific Type****************************//
		//************************************************************************************//
		
		public void STypeVal()
		{
	
				try
				{
					repo.FormMain__Space_TN.ListItemSpecific_Type.Click("CenterLeft");
				    Keyboard.Press(Keys.Tab);
				    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List list2 = "//list[@processname='RealView']";
					Delay.Seconds(1);
		            int AScount = list2.Items.Count;
		            Random ASvalue = new Random();
					int ASnum = ASvalue.Next(1, AScount-1);
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormMain__Space_TN.ListItemSpecific_Type);  
		   			string STypeValue = accElement.Value;
		   			ValidateTrack.SpaceValidateTrackRegression.SType = STypeValue;
		   			Report.Info("Specific Type Entered = " + STypeValue);
		   			ValidateTrack.SpaceValidateTrackRegression.Stype_OOR = false;
		   			
				}
				catch (ArgumentOutOfRangeException e)
				{								   			

			   			Report.Debug("List Count Out of Range for Specific Type, List Item Will Not be Validated");
			   			Report.Debug(e.ToString());	
			   			ValidateTrack.SpaceValidateTrackRegression.Stype_OOR = true;
			   		
				}					
			
		}			
		
		//************************************************************************************//
		//****************************Enters Random Altitude Value****************************//
		//************************************************************************************//
		
		public void AltVal()
		{
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			repo.FormMain__Space_TN.ListItemAltitude.Click("CenterLeft");
		    Keyboard.Press(Keys.Tab);
			string b = SharedFunctions.Random(1, 204750);
			Keyboard.Press(b);
   			string AltValue = b;
   			ValidateTrack.SpaceValidateTrackRegression.Alt = AltValue;
   			Report.Info("Altitude Value Entered = " + AltValue);
		}				

		//************************************************************************************//
		//*******************************Enters Random Velocity*******************************//
		//************************************************************************************//
		
		public void VelVal()
		{
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			repo.FormMain__Space_TN.ListItemSpeedVelocity.Click("CenterLeft");
		    Keyboard.Press(Keys.Tab);
			string b = SharedFunctions.Random(1, 13107);
			Keyboard.Press(b);
			Accessible accElement = new Accessible(repo.FormMain__Space_TN.ListItemSpeedVelocity);  
   			string VelValue = b;
   			ValidateTrack.SpaceValidateTrackRegression.Vel = VelValue;
   			Report.Info("Velocity Value Entered = " + VelValue);	   			
		}
		
		//************************************************************************************//
		//******************************Enters Random True Course*****************************//
		//************************************************************************************//
		
		public void CrsVal()
		{
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			repo.FormMain__Space_TN.ListItemTrue_Course.Click("CenterLeft");
		    Keyboard.Press(Keys.Tab);
			string b = SharedFunctions.Random(1, 359);
			Keyboard.Press(b);
			Keyboard.Press(Keys.Tab); 
   			string CrsValue = b;
   			ValidateTrack.SpaceValidateTrackRegression.Crs = CrsValue;
   			Report.Info("Course Value Entered = " + CrsValue);
		
			Accessible accElement = new Accessible(repo.FormMain__Space_TN.ListItemMagnetic_Course);  
   			string MagValue = accElement.Value;
   			ValidateTrack.SpaceValidateTrackRegression.MagCrs = MagValue;
   			Report.Info("Magnetic Course Value Entered = " + MagValue);
		}
		
		//************************************************************************************//
		//******************************Enters Random Track Quality***************************//
		//************************************************************************************//
		
		public void TQVal()
		{
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
   			repo.FormMain__Space_TN.ListItemLocal_TQ.Click("CenterLeft");
		    Keyboard.Press(Keys.Tab);
			string b = SharedFunctions.Random(1, 15);
			Keyboard.Press(b);
   			string TQValue = b;
   			ValidateTrack.SpaceValidateTrackRegression.TQ = TQValue;
   			Report.Info("Track Quality Entered = " + TQValue);	
		}		
		
		//************************************************************************************//
		//**********************Stores Reporting Unit to Variable*****************************//
		//************************************************************************************//
		
		public void ReportingUnitval()
		{
			Accessible accElement3 = new Accessible(repo.FormMainCreate.ListItemReporting_Unit);  
			string ReportingUnit = accElement3.Value;
			TacViewLib.LinkSpecific.Surveillance.Space.ValidateTrack.SpaceValidateTrackRegression.RU = ReportingUnit;
		}		
	
		//************************************************************************************//
		//******************************Enters Random HI Priority*****************************//
		//************************************************************************************//
		
		public void HIVal()
		{

				try
				{
					repo.FormMain__Space_TN.ListItemHi_Priority.Click("CenterLeft");
				    Keyboard.Press(Keys.Tab);
				    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List list2 = "//list[@processname='RealView']";
		            int AScount = list2.Items.Count;
		            Random ASvalue = new Random();
					int ASnum = ASvalue.Next(0, AScount);
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormMain__Space_TN.ListItemHi_Priority);  
		   			string HIValue = accElement.Value;
		   			Report.Info("HI Priority Value Entered = " + HIValue);
					ValidateTrack.SpaceValidateTrackRegression.HiPri_OOR = false;
		   		
				}
				catch (ArgumentOutOfRangeException e)
				{								   			

			   			Report.Debug("List Count Out of Range for Hi Priority, List Item Will Not be Validated");
			   			Report.Debug(e.ToString());	
			   			ValidateTrack.SpaceValidateTrackRegression.HiPri_OOR = true;
			   		
				}						
				
		}			

		//************************************************************************************//
		//*********************************Enters Random SPI**********************************//
		//************************************************************************************//
		
		public void SPIVal()
		{
	
				try
				{
					repo.FormMain__Space_TN.ListItemSPI.Click("CenterLeft");
				    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List list2 = "//list[@processname='RealView']";
		            int AScount = list2.Items.Count;
		            Random ASvalue = new Random();
					int ASnum = ASvalue.Next(0, AScount); 		
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormMain__Space_TN.ListItemSPI);  
		   			string SPIValue = accElement.Value;
		   			ValidateTrack.SpaceValidateTrackRegression.SPI = SPIValue;
		   			Report.Info("SPI Value Entered = " + SPIValue);
			   		ValidateTrack.SpaceValidateTrackRegression.SPI_OOR = false;
		   	
					if (AScount==1)
		   			{
		   				ValidateTrack.SpaceValidateTrackRegression.SPIFlag = true;	
		   			}  	
					else
					{
						ValidateTrack.SpaceValidateTrackRegression.SPIFlag = false;	
					}
				}
				catch (ArgumentOutOfRangeException e)
				{								   			

			   			Report.Debug("List Count Out of Range for SPI, List Item Will Not be Validated");
			   			Report.Debug(e.ToString());	
			   			ValidateTrack.SpaceValidateTrackRegression.SPI_OOR = true;
			   		
				}						
				
		}			

		//************************************************************************************//
		//******************************Enters Random Time Hour*******************************//
		//************************************************************************************//
		
		public void HRVal()
		{	
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			repo.FormMain__Space_TN.ListItemHour.Click("CenterLeft");
		    Keyboard.Press(Keys.Tab);
			string b = SharedFunctions.Random(1, 23);
			Keyboard.Press(b);
   			string HRValue = b;
   			ValidateTrack.SpaceValidateTrackRegression.HR = HRValue;
   			Report.Info("Hour Value Entered = " + HRValue);
		}
		
		//************************************************************************************//
		//*****************************Enters Random Time Minute******************************//
		//************************************************************************************//
		
		public void MNVal()
		{	
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			repo.FormMain__Space_TN.ListItemMinute.Click("CenterLeft");
		    Keyboard.Press(Keys.Tab);
			string b = SharedFunctions.Random(1, 59);
			Keyboard.Press(b);
   			string MNValue = b;
   			ValidateTrack.SpaceValidateTrackRegression.MN = MNValue;
   			Report.Info("Minute Value Entered = " + MNValue);
		}	
		
		//************************************************************************************//
		//**************************Enters Random Space Amplification*************************//
		//************************************************************************************//
		
		public void SpAmpVal()
		{

				try
				{
					repo.FormMain__Space_TN.ListItemSpace_Amplification.Click("CenterLeft");
				    Keyboard.Press(Keys.Tab);
				    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List list2 = "//list[@processname='RealView']";
		            int AScount = list2.Items.Count;
		            Random ASvalue = new Random();
		            AScount--;
					int ASnum = ASvalue.Next(1, AScount-1);
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormMain__Space_TN.ListItemSpace_Amplification);  
		   			string SpAmpValue = accElement.Value;
		   			ValidateTrack.SpaceValidateTrackRegression.SpAmp = SpAmpValue;
		   			Report.Info("Space Amplification Entered = " + SpAmpValue);
		   			ValidateTrack.SpaceValidateTrackRegression.SpAmp_OOR = false;
		   	
				}
				catch (ArgumentOutOfRangeException e)
				{								   			

			   			Report.Debug("List Count Out of Range for Space Amplification, List Item Will Not be Validated");
			   			Report.Debug(e.ToString());	
			   			ValidateTrack.SpaceValidateTrackRegression.SpAmp_OOR = true;
			   		
				}					
			
		}			

		//************************************************************************************//
		//***********************Enters Random Amplification Confidence***********************//
		//************************************************************************************//
		
		public void AmpConVal()
		{

				try
				{
					repo.FormMain__Space_TN.ListItemAmplification_Confidence.Click("CenterLeft");
				    Keyboard.Press(Keys.Tab);
				    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List list2 = "//list[@processname='RealView']";
		            int AScount = list2.Items.Count;
		            Random ASvalue = new Random();
					int ASnum = ASvalue.Next(1, AScount-1);
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormMain__Space_TN.ListItemAmplification_Confidence);  
		   			string AmpConValue = accElement.Value;
		   			ValidateTrack.SpaceValidateTrackRegression.AmpCon = AmpConValue;
		   			Report.Info("Amplification Confidence Entered = " + AmpConValue);
		   			ValidateTrack.SpaceValidateTrackRegression.AmpCon_OOR = false;

				}
				catch (ArgumentOutOfRangeException e)
				{								   			

			   			Report.Debug("List Count Out of Range for Amplification Confidence, List Item Will Not be Validated");
			   			Report.Debug(e.ToString());	
			   			ValidateTrack.SpaceValidateTrackRegression.AmpCon_OOR = true;
			   		
				}					
			
		}	
		
		//************************************************************************************//
		//***************************Enters Random Data Indicator*****************************//
		//************************************************************************************//
		
		public void BoostIndVal()
		{

				try
				{
					repo.FormMain__Space_TN.ListItemBoost_Indicator.Click("CenterLeft");
				    Keyboard.Press(Keys.Tab);
				    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List list2 = "//list[@processname='RealView']";
		            int AScount = list2.Items.Count;
		            Random ASvalue = new Random();
					int ASnum = ASvalue.Next(1, AScount);
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormMain__Space_TN.ListItemBoost_Indicator);  
		   			string DatIndValue = accElement.Value;
		   			ValidateTrack.SpaceValidateTrackRegression.DatInd = DatIndValue;
		   			Report.Info("Data Indicator Entered = " + DatIndValue);
		   			ValidateTrack.SpaceValidateTrackRegression.DatInd_OOR = false;
		  
		   			if (ASnum==4)
		   			{
		   				RTEFlag=true;
		   			}
					else
					{
		   				RTEFlag=false;
					}
				}
				catch (ArgumentOutOfRangeException e)
				{								   			

			   			Report.Debug("List Count Out of Range for Data Indicator, List Item Will Not be Validated");
			   			Report.Debug(e.ToString());	
			   			ValidateTrack.SpaceValidateTrackRegression.DatInd_OOR = true;
			   		
				}					
			
		}			
		
		//************************************************************************************//
		//***********************Collapses RTE Section If Necessary***************************//
		//************************************************************************************//		
		
        public void RTE_Collapse()
        {
        	if (RTEFlag == true)
        	{
        		Report.Log(ReportLevel.Info, "Mouse", "Mouse Left DoubleClick item 'FormMain__Space_TN.ListItemRTE_Covariance' at CenterLeft.", repo.FormMain__Space_TN.ListItemRTE_CovarianceInfo, new RecordItemIndex(-1));
           		repo.FormMain__Space_TN.ListItemRTE_Covariance.DoubleClick(Location.CenterLeft);        		
        	}
        }			

		//************************************************************************************//
		//**********************************Enters TADIL TN***********************************//
		//************************************************************************************//
		
		public void TADILVal()
		{
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			repo.FormMain__Space_TN.ListItemTADIL_TN.Click("CenterLeft");
		    Keyboard.Press(Keys.Tab);
		    string a = SharedFunctions.Random(128, 4094);
			string b = SharedFunctions.DecimalToBase(Convert.ToInt32(a), 8);
			Keyboard.Press(b);
   			string OrientValue = b;
   			ValidateTrack.SpaceValidateTrackRegression.TADIL = b;
   			Report.Info("TADIL TN Value Entered = " + b);
		}	
		
		//************************************************************************************//
		//**********************************Enters ATDIL1 TN**********************************//
		//************************************************************************************//
		
		public void ATDL1Val()
		{
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			repo.FormMain__Space_TN.ListItemATDL1_TN.Click("CenterLeft");
		    Keyboard.Press(Keys.Tab);
		    string a = SharedFunctions.ATDL1_TN();
			Keyboard.Press(a);
   			string OrientValue = a;
   			ValidateTrack.SpaceValidateTrackRegression.ATDL1 = a;
   			Report.Info("ATDIL1 TN Value Entered = " + a);
		}			
		
		//************************************************************************************//
		//**********************************Enters NL1 TN**********************************//
		//************************************************************************************//
		
		public void NL1Val()
		{
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			repo.FormMain__Space_TN.ListItemNL1_TN.Click("CenterLeft");
		    Keyboard.Press(Keys.Tab);
		    string a = SharedFunctions.NATO_TN();
			Keyboard.Press(a);
   			string OrientValue = a;
   			ValidateTrack.SpaceValidateTrackRegression.NL1 = a;
   			Report.Info("NL1 TN Value Entered = " + a);
		}		
		
		//************************************************************************************//
		//**********************************Enters TADILJ TN**********************************//
		//************************************************************************************//
		
		public void TADILJVal()
		{
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			repo.FormMain__Space_TN.ListItemTADIL_J_TN.Click("CenterLeft");
		    Keyboard.Press(Keys.Tab);
		    string a = SharedFunctions.Random(128, 32766);
			string b = SharedFunctions.DecimalToBase(Convert.ToInt32(a), 8);
			Keyboard.Press(b);
   			string OrientValue = b;
   			ValidateTrack.SpaceValidateTrackRegression.TADILJ = b;
   			Report.Info("TADILJ TN Value Entered = " + b);
		}	
		
		//************************************************************************************//
		//********************************Enters External TN**********************************//
		//************************************************************************************//
		
		public void ExtVal()
		{
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			repo.FormMain__Space_TN.ListItemExternal_TN.Click("CenterLeft");
		    Keyboard.Press(Keys.Tab);
		    string a = SharedFunctions.Random(128, 32766);
			string b = SharedFunctions.DecimalToBase(Convert.ToInt32(a), 8);
			Keyboard.Press(b);
   			string OrientValue = b;
   			ValidateTrack.SpaceValidateTrackRegression.Ext = b;
   			Report.Info("External TN Value Entered = " + b);
		}	
				
		//************************************************************************************//
		//***********************************Enters IDL TN************************************//
		//************************************************************************************//
		
		public void IDLval()
		{
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			repo.FormMainCreate.ListItemIDL_TN.Click("CenterLeft");
		    Keyboard.Press(Keys.Tab);
		    string a = SharedFunctions.IDL_TN();
			Keyboard.Press(a);
   			string OrientValue = a;
   			ValidateTrack.SpaceValidateTrackRegression.IDL = a;
   			Report.Info("IDL TN Value Entered = " + a);
		}		

		//************************************************************************************//
		//*********************************Gets Track Count***********************************//
		//************************************************************************************//
		
		public void GetTrackCount()
		{			
			Ranorex.Container cont1 = repo.FormTacViewC2.ContainerRvView;
			IList<Picture> list1 = cont1.Find<Picture>(@"/form[@title~'^TacViewC2\ \ \ \(map:\ .*']/element/container/picture[@accessiblevalue='Track']");
			TCount = list1.Count;		    
		}
		
		//************************************************************************************//
		//*********************************Gets Track Number**********************************//
		//************************************************************************************//
		
		public void GetTrackNum()			
		{			
		    TCount++;
		    Accessible pic1 = @"/form[@title~'^TacViewC2\ \ \ \(map:\ .*']/element/container/picture[@accessiblevalue='Track']" + "[" + TCount + "]";
		    Accessible accElement = new Accessible(pic1);  
   			string track1 = accElement.Name;
   			Report.Info("Track Number = " + track1);
   			ValidateTrack.SpaceValidateTrackRegression.TrackNum = track1;
   			Drop_Track.DropTrack.TrackNum = track1;   			
		}
		
		//**************************************************************************************//
		//**************************Ranorex Generated Default Method****************************//
		//**************************************************************************************//		

		static SpaceCreateTrackRegression()
		{
			//Your recording specific initialization code goes here.
		}

		//************************************************************************************//
		//******************************Randomly Plots a Track********************************//
		//************************************************************************************//		
		
		public void RandCoord()
		{	
			 CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
	       	 Ranorex.Container test = @"/form[@title~'^TacViewC2\ \ \ \(map:\ .*']/element/container[@accessiblename='RvView']";
	       	 var a = test.ScreenRectangle.Width;
	       	 var b = test.ScreenRectangle.Height;
	       	 int c = Convert.ToInt32(a);
	       	 c = c - 100;
	       	 int d = Convert.ToInt32(b);
	       	 d = d - 100;
	       	 string w = SharedFunctions.Random(100, c);
	       	 string h = SharedFunctions.Random(100, d);
	    	 repo.FormTacViewC2.ContainerRvView.Click(MouseButtons.Right, "" + w + ";" + h + ""); 
	    	 
	    	Duration OrigDur = repo.FormRealView.MenuItemCreate_TrackInfo.SearchTimeout;
			repo.FormRealView.MenuItemCreate_TrackInfo.SearchTimeout = 1000;			
			
			if (repo.FormRealView.MenuItemCreate_TrackInfo.Exists())
			{
				return;
			}			
			else
			{
				RandCoord();
			}
			
			repo.FormRealView.MenuItemCreate_TrackInfo.SearchTimeout = OrigDur;
		}
		
		//**************************************************************************************//
		//***************************Ranorex Generated Init Method******************************//
		//**************************************************************************************//		

	}
}
