///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using System.Windows.Forms;

using Ranorex;
using Ranorex.Core;

namespace TacViewLib.LinkSpecific.Surveillance.Surface_Disused.ValidateTrack
{
	/// <summary>
	/// The ValidateTrack recording.
	/// </summary>
	
	//************************************************************************************//
	//**************Default values to validate for track if csv file not present**********//
	//************************************************************************************//
	
	public partial class ValidateSurfaceTrackDisused6016D
	{
		public static string ID ;
		public static bool PlatFlag;
		public static bool ActFlag;
		public static bool StypeFlag;				
		public static bool SamFlag;		
		
		//*******************************************************************************************//
		//*******************Validates Identity from csv file****************************************//
		//*******************************************************************************************//
				
		public void ValidateID()
		{	
			Report.Info("Validating AttributeEqual (Text='Identity') on item 'FormMain__Surface_TN.ListItemIdentity'.");
			Report.Info("Value Entered =" + ID);
			Validate.Attribute(repo.FormMain__Surface_TN.ListItemIdentityInfo, "AccessibleValue", ID, Validate.DefaultMessage, false);
		}
		
		//*******************************************************************************************//
		//*******************Validates Platform from csv file****************************************//
		//*******************************************************************************************//
		
		public void ValidatePlat()
		{
			if (!PlatFlag)
			{			
			//Your code here. Code inside this method will not be changed by the code generator.
			Report.Info("Validating AttributeEqual (Text='Platform') on item 'FormMain__Surface_TN.ListItemPlatform'.");
			Report.Info("Value Entered =" + Plat);
			Validate.Attribute(repo.FormMain__Surface_TN.ListItemPlatformInfo, "AccessibleValue", Plat, Validate.DefaultMessage, false);
			}
			else
			{
			Report.Info("Validating AttributeEqual (Text='Platform') on item 'FormMain__Air_TN_(TN)_.ListItemPlatform'.");
			Report.Info("Value Entered =" + Plat);				
			Report.Error(Plat + " Does Not Exist for Platform Field, Selecting 1st Item Available");	
			}
		}
		
		//*******************************************************************************************//
		//*******************Validates Activity from csv file****************************************//
		//*******************************************************************************************//
		
		public void ValidateAct()
		{
			if (!ActFlag)
			{			
			//Your code here. Code inside this method will not be changed by the code generator.
			Report.Info("Validating AttributeEqual (Text='Activity') on item 'FormMain__Surface_TN.ListItemActivity'.");
			Report.Info("Value Entered =" + Act);
			Validate.Attribute(repo.FormMain__Surface_TN.ListItemActivityInfo, "AccessibleValue", "N.S.", Validate.DefaultMessage, false);				
			}
			else
			{
			Report.Info("Validating AttributeEqual (Text='Activity') on item 'FormMain__Air_TN_(TN)_.ListItemActivity'.");
			Report.Info("Value Entered =" + Act);					
			Report.Error(Act + " Does Not Exist for Activity Field, Selecting 1st Item Available");	
			}
		}
		
		//*******************************************************************************************//
		//*******************Validates Specific Type from csv file***********************************//
		//*******************************************************************************************//
		
		public void ValidateStype()
		{
			if (!StypeFlag)
			{			
			//Your code here. Code inside this method will not be changed by the code generator.
			Report.Info("Validating AttributeEqual (Text='Specific Type') on item 'FormMain__Surface_TN.ListItemSpecific_Type'.");
			Report.Info("Value Entered =" + Stype);
			Validate.Attribute(repo.FormMain__Surface_TN.ListItemStypeInfo, "AccessibleValue", "N.S.", Validate.DefaultMessage, false);		
			}
			else
			{
			Report.Info("Validating AttributeEqual (Text='Specific Type') on item 'FormMain__Air_TN_(TN)_.ListItemSpecificType.");
			Report.Info("Value Entered =" + Stype);			
			Report.Error(Stype + " Does Not Exist for Specifc Type Field, Selecting 1st Item Available");	
			}
		}
		
		//************************************************************************************//
		//************************Validates SAM/SSM Type 1 Value is N.S.**********************//
		//************************************************************************************//
		
		public void ValidateSamtype()
		{
			if (!SamFlag)
			{			
			//Your code here. Code inside this method will not be changed by the code generator.
			Report.Info("Validating AttributeEqual (Text='SAM/SSM Type 1') on item 'FormMain__Air_TN_(TN)_.ListItemSpecificType.");
			Report.Info("Value Entered =" + Sam);			
			Validate.Attribute(repo.FormMain__Surface_TN.ListItemSAM_SSM_TypeInfo, "AccessibleValue", "N.S.", Validate.DefaultMessage, false);		
			}
			else
			{
			Report.Info("Validating AttributeEqual (Text='SAM/SSM Type 1') on item 'FormMain__Air_TN_(TN)_.ListItemSpecificType.");
			Report.Info("Value Entered =" + Sam);			
       	 	Report.Error(Sam + " Does Not Exist for SAM TYPE 1 Field, Selecting 1st Item Available");	
			}
		}		

		static ValidateSurfaceTrackDisused6016D()
		{
			//Your recording specific initialization code goes here.
		}

		private void Init()
		{
			// Your recording specific initialization code goes here.
		}

	}
}
