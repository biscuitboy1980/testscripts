///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using System.Windows.Forms;

using CommonUtilLib;
using Ranorex;
using Ranorex.Core;

namespace TacViewLib.LinkSpecific.Surveillance.Surface.ValidateTrack
{
	/// <summary>
	/// The ValidateTrackRegression recording.
	/// </summary>

	public partial class SurfaceValidateTrackRegression
	{
		public static bool ZoomFlag = false;
		
		public static string TrackNum;
		
		//Basic Info
		public static string ID;
		public static string Plat;
		public static string Act;
		public static string Stype;
		public static string Strength;
		
		//Position & Velocity
		public static string Alt;
		public static string Vel;
		public static string Crs;
		public static string MagCrs;
		
		//Interface Info
		public static string TQ;
		public static string RU;
		public static string Hi;
		
		//Modes & Codes
		public static string M1;
		public static string M2;
		public static string M3;
		public static string M4;
		public static string M5;
		public static string M5Nat;
		public static string M5ID;
		
		//Indicators
		public static string SPI;
		public static bool SPIflag;
		public static string PA;
		public static string SpecialInt;
		public static bool SpecialIntFlag;
		public static string Hour;
		public static string Min;
		public static string AltSrc;
		
		//SAM-SSM
		public static string SSM1;
		public static string SSM2;
		public static string SSM3;
		
		//Other Track Numbers
		public static string TADIL;
		public static string ATDL1;
		public static string NL1;
		public static string TADILJ;
		public static string IDL;
		public static string Ext;
		
		//Flags
		public static bool ID_OOR;
		public static bool Plat_OOR;
		public static bool Act_OOR;
		public static bool Stype_OOR;
		public static bool Strength_OOR;
		public static bool SPI_OOR;
		public static bool HiPri_OOR;
		public static bool Mode1_OOR;
		public static bool Mode4_OOR;		
		public static bool Mode5_OOR;
		public static bool Mode5Nat_OOR;
		public static bool PAInd_OOR;
		public static bool SpecInt_OOR;
		public static bool SSM1_OOR;
		public static bool SSM2_OOR;
		public static bool SSM3_OOR;
		
		//************************************************************************************//
		//*****************************Validates Identity value*******************************//
		//************************************************************************************//
				
		public void ValidateID()
		{
			if(!ID_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(ID)') on item 'TrackDialogue.Container5019.ListItemIdentity'.");
				Report.Info("Value Entered = " + ID);
				Validate.Attribute(repo.FormMain__Surface_TN.ListItemIdentityInfo, "AccessibleValue", ID, Validate.DefaultMessage, false);
			}
		}
		
		//************************************************************************************//
		//****************************Validates Platform value********************************//
		//************************************************************************************//
		
		public void ValidatePlat()
		{
			if(!Plat_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='Platform') on item 'FormMain__Surface_TN.ListItemPlatform'.");
				Report.Info("Value Entered = " + Plat);
				Validate.Attribute(repo.FormMain__Surface_TN.ListItemPlatformInfo, "AccessibleValue", Plat, Validate.DefaultMessage, false);
			}
		}
		
		//************************************************************************************//
		//***************************Validates Activity value*********************************//
		//************************************************************************************//
		
		public void ValidateAct()
		{
			if (!Act_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='Activity') on item 'FormMain__Surface_TN.ListItemActivity'.");
				Report.Info("Value Entered = " + Act);
				Validate.Attribute(repo.FormMain__Surface_TN.ListItemActivityInfo, "AccessibleValue", Act, Validate.DefaultMessage, false);
			}
		}
		
		//************************************************************************************//
		//**************************Validates Specific Type value*****************************//
		//************************************************************************************//
		
		public void ValidateStype()
		{
			if (!Stype_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='Specific Type') on item 'FormMain__Surface_TN.ListItemSpecific_Type'.");
				Report.Info("Value Entered = " + Stype);		
				Validate.Attribute(repo.FormMain__Surface_TN.ListItemSpecific_TypeInfo, "AccessibleValue", Stype, Validate.DefaultMessage, false);
			}
		}
		
		//************************************************************************************//
		//******************************Validates Strength valu*******************************//
		//************************************************************************************//
		
		public void ValidateStrength()
		{
			if (!Strength_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='Strength') on item 'FormMain__Surface_TN.ListItemStrength'.");
				Report.Info("Value Entered = " + Strength);		
				Validate.Attribute(repo.FormMain__Surface_TN.ListItemStrengthInfo, "AccessibleValue", Strength, Validate.DefaultMessage, false);
			}
		}		

		//************************************************************************************//
		//*****************************Validates Velocity value*******************************//
		//************************************************************************************//
		
		public void ValidateVelocity()
		{
			Accessible accElement = new Accessible(repo.FormMain__Surface_TN.ListItemSpeedVelocity);
		    string RxVel = accElement.Value;
			Report.Info("Validating AttributeEqual (Text='Vel') on item 'FormMain__Surface_TN.ListItemVelocity__mph_'.");
			Report.Info("Value Entered = " + Vel);		
			Report.Info("Altitude Received = " + RxVel);
			Validate.IsTrue((Convert.ToInt32(RxVel) > Convert.ToInt32(Vel) - 5) && (Convert.ToInt32(RxVel) < Convert.ToInt32(Vel) + 5), Validate.DefaultMessage, false);
		}
		
		//************************************************************************************//
		//******************************Validates Course value********************************//
		//************************************************************************************//
		
		public void ValidateCourse()
		{
			Report.Info("Validating AttributeEqual (Text='True Course') on item 'FormMain__Surface_TN.ListItemTrue_Course'.");
			Report.Info("Value Entered = " + Crs);
			Validate.Attribute(repo.FormMain__Surface_TN.ListItemTrue_CourseInfo, "AccessibleValue", Crs, Validate.DefaultMessage, false);
		}

		public void ValidateMagneticCourse()
		{
			Report.Info("Validating AttributeEqual (Text='Magnetic Course') on item 'FormMain__Surface_TN.ListItemMagnetic_Course'.");
			Report.Info("Value Entered = " + MagCrs);
			Report.Info("Magnetic Course is a local value and will not be validated on the remote interface");
			//Validate.Attribute(repo.FormMain__Surface_TN.ListItemMagnetic_CourseInfo, "AccessibleValue", MagCrs, Validate.DefaultMessage,false);
		}

		//************************************************************************************//
		//******************************Validates Track Quality*******************************//
		//************************************************************************************//
		
		public void ValidateTrackQuality()
		{
			Report.Info("Validating AttributeEqual (Text='Track Quality') on item 'FormMain__Surface_TN.ListItemRemote_TQ'.");
			Report.Info("Value Entered = " + TQ);
			Validate.Attribute(repo.FormMain__Surface_TN.ListItemRemote_TQInfo, "AccessibleValue", TQ, Validate.DefaultMessage, false);
		}
		
		//************************************************************************************//
		//*****************************Validates Reporting Unit*******************************//
		//************************************************************************************//
		
		public void ValidateReportingUnit()
		{
			Report.Info("Validating AttributeEqual (Text='Reporting Unit') on item 'FormMain__Surface_TN.ListItemReporting_Unit'.");
			Report.Info("Value Entered = " + RU);
			Validate.Attribute(repo.FormMain__Surface_TN.ListItemReporting_UnitInfo, "AccessibleValue", RU, Validate.DefaultMessage, false);
		}
		
		//************************************************************************************//
		//***************************Validates Hi Priority Value******************************//
		//************************************************************************************//
				
		public void ValidateHiPriority()
		{
			if (!HiPri_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(Hi Priority)') on item 'FormMain__Surface_TN.ListItemHi_PriorityInfo'.");
				Report.Info("Value Entered = " + Hi);
				Report.Info("Hi Priority is a local value and will not be validated on the remote interface");
				//Validate.Attribute(repo.FormMain__Surface_TN.ListItemHi_PriorityInfo, "AccessibleValue", Hi, Validate.DefaultMessage, false);
			}
		}				
		
		//************************************************************************************//
		//*********************************Validates M1 value*********************************//
		//************************************************************************************//
				
		public void ValidateMode1()
		{
			if (!Mode1_OOR)
			{
			Report.Info("Validating AttributeEqual (Text='Mode 1') on item 'FormMain__Surface_TN.ListItemMode_1_Code.");
			Report.Info("Value Entered = " + M1);
			Validate.Attribute(repo.FormMain__Surface_TN.ListItemMode_1_CodeInfo, "AccessibleValue", M1, Validate.DefaultMessage, false);
			}
		}
		
		//************************************************************************************//
		//*********************************Validates M3 value*********************************//
		//************************************************************************************//
		
		public void ValidateMode2()
		{
			Report.Info("Validating AttributeEqual (Text='Mode 2') on item 'FormMain__Surface_TN.ListItemMode_2_Code.");
			int val = Int32.Parse (M2);
			string Mode2 = val.ToString("D4");
			Report.Info("Value Entered = " + Mode2);
			Validate.Attribute(repo.FormMain__Surface_TN.ListItemMode_2_CodeInfo, "AccessibleValue", Mode2, Validate.DefaultMessage, false);
		}
		
		//************************************************************************************//
		//***********************************Validates M3 value*******************************//
		//************************************************************************************//
		
		public void ValidateMode3()
		{
			Report.Info("Validating AttributeEqual (Text='Mode 3') on item 'FormMain__Surface_TN.ListItemMode_3_Code.");
			int val = Int32.Parse (M3);
			string Mode3 = val.ToString("D4");
			Report.Info("Value Entered = " + Mode3);
			Validate.Attribute(repo.FormMain__Surface_TN.ListItemMode_3_CodeInfo, "AccessibleValue", Mode3, Validate.DefaultMessage, false);
		}
		
		//************************************************************************************//
		//***********************************Validates M4 value*******************************//
		//************************************************************************************//
		
		public void ValidateMode4()
		{
			if (!Mode4_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='Mode 4') on item 'FormMain__Surface_TN.ListItemMode_4_Indicator.");
				Report.Info("Value Entered = " + M4);
				Validate.Attribute(repo.FormMain__Surface_TN.ListItemMode_4_IndicatorInfo, "AccessibleValue", M4, Validate.DefaultMessage, false);
			}
		}
		
		//************************************************************************************//
		//***********************************Validates M5 value*******************************//
		//************************************************************************************//
		
		public void ValidateMode5()
		{
			if (!Mode5_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='Mode 5') on item 'FormMain__Surface_TN.ListItemMode_5_Indicator.");
				Report.Info("Value Entered = " + M5);
				Validate.Attribute(repo.FormMain__Surface_TN.ListItemMode_5_IndicatorInfo, "AccessibleValue", M5, Validate.DefaultMessage, false);
			}
		}
		
		//************************************************************************************//
		//*************************Validates M5 Nationality value*****************************//
		//************************************************************************************//
		
		public void ValidateM5Nat()
		{
			if (!Mode5Nat_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='Mode 5 Nationality') on item 'FormMain__Surface_TN.ListItemMode_5_Nationality.");
				Report.Info("Value Entered = " + M5Nat);
				Validate.Attribute(repo.FormMain__Surface_TN.ListItemMode_5_NationalityInfo, "AccessibleValue", M5Nat, Validate.DefaultMessage, false);
			}
		}


		//************************************************************************************//
		//******************************Validates M5 ID value*********************************//
		//************************************************************************************//
		
		public void ValidateM5ID()
		{
			Report.Info("Validating AttributeEqual (Text='Mode 5 Platform ID') on item 'FormMain__Surface_TN.ListItemMode_5_platformID'.");
			Report.Info("Value Entered = " + M5ID);		
			Validate.Attribute(repo.FormMain__Surface_TN.ListItemMode_5_platformIDInfo, "AccessibleValue", M5ID, Validate.DefaultMessage, false);
		}

		//************************************************************************************//
		//*******************************Validates SPI value**********************************//
		//************************************************************************************//
		
		public void ValidateSPI()
		{
			if (SPIflag && !SPI_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='SPI') on item 'FormMain__Surface_TN.ListItemSPI'.");
				Report.Info("Value Entered = " + SPI);		
				Validate.Attribute(repo.FormMain__Surface_TN.ListItemSPIInfo, "AccessibleValue", SPI, Validate.DefaultMessage, false);
			}
		}
		
		//************************************************************************************//
		//*************************Validates Passive/Active Indicator*************************//
		//************************************************************************************//
		
		public void ValidatePA()
		{						
			bool Defect = false;
			
			//****Setting to true, open defect***//
			
			Defect = true;
		
			if (Defect == false)
			{				
				if (!PAInd_OOR)
				{
					Report.Info("Validating AttributeEqual (Text='Passive/Active Indicator') on item 'FormMain__Surface_TN.ListItemPassive_Active_Ind");
					Report.Info("Value Entered = " + PA);
					Validate.Attribute(repo.FormMain__Surface_TN.ListItemPassive_Active_IndInfo, "AccessibleValue", PA, Validate.DefaultMessage, false);
				}
			}
			else
			{
				Report.Debug("Passive/Active Indicator is currently not functioning and is written up in R-02101");
			}	
		}
		
		//************************************************************************************//
		//**********************Validates Special Interest Indicator**************************//
		//************************************************************************************//
		
		public void ValidateSpecialInt()
		{				
			bool Defect = false;
			
			//****Setting to true, open defect矔**//
			
			Defect = true;
		
			if (Defect == false)
			{				
				if (!PAInd_OOR)
				{				
					if (SpecialIntFlag && !SpecInt_OOR)
					{
						Report.Info("Validating AttributeEqual (Text='Special Interest Indicator') on item 'FormMain__Surface_TN.ListItemSpecial_Interest'.");
						Report.Info("Value Entered = " + SpecialInt);		
						Validate.Attribute(repo.FormMain__Surface_TN.ListItemSpecial_InterestInfo, "AccessibleValue", SpecialInt, Validate.DefaultMessage, false);				
					}
				}
			}
			else
			{
				Report.Debug("Special Interest Indicator is currently not functioning and is written up in  D-02133");
			}	
		}
		
		//************************************************************************************//
		//****************************Validates Hour Entered**********************************//
		//************************************************************************************//
		
		public void ValidateHour()
		{
			bool Defect = false;
			
			//****Setting to true, open defect***//
			
			Defect = true;
		
			if (Defect == false)
			{	
				Report.Info("Validating AttributeEqual (Text='Hour') on item 'FormMain__Surface_TN.ListItemHour");
				Report.Info("Value Entered = " + Hour);
				Validate.Attribute(repo.FormMain__Surface_TN.ListItemHourInfo, "AccessibleValue", Hour, Validate.DefaultMessage, false);
			}			
			else
			{
				Report.Debug("Hour is currently not functioning and is written up in  R-02099");
			}	

		}
			
		//************************************************************************************//
		//****************************Validates Minute Entered********************************//
		//************************************************************************************//
		
		public void ValidateMinute()
		{
			bool Defect = false;
			
			//****Setting to true, open defect***//
			
			Defect = true;
		
			if (Defect == false)
			{	
				Report.Info("Validating AttributeEqual (Text='Minute') on item 'FormMain__Surface_TN.ListItemMinute");
				Report.Info("Value Entered = " + Min);
				Validate.Attribute(repo.FormMain__Surface_TN.ListItemMinuteInfo, "AccessibleValue", Min, Validate.DefaultMessage, false);
			}	
			else
			{
				Report.Debug("Minute is currently not functioning and is written up in  R-02099");
			}	
		}			
		
		//************************************************************************************//
		//*******************************Validates IDL TN Value*******************************//
		//************************************************************************************//
				
		public void ValidateIDL()
		{			
			bool Defect = false;
			
			//****Setting to true, open defect***//
			
			Defect = true;
		
			if (Defect == false)
			{	
				Report.Info("Validating AttributeEqual (Text='(IDL TN)') on item 'FormMain__Surface_TN.ListItemIDL_TN'.");
				Report.Info("Value Entered = " + IDL);
				Validate.Attribute(repo.FormMain__Surface_TN.ListItemIDL_TNInfo, "AccessibleValue", IDL, Validate.DefaultMessage, false);
			}	
			else
			{
				Report.Debug("IDL Track Number is currently not functioning and is written up in R-02103");
			}	
		}	
		
		//************************************************************************************//
		//******************************Validates TADIL TN Value******************************//
		//************************************************************************************//
				
		public void ValidateTADIL()
		{
			bool Defect = false;
			
			//****Setting to true, open defect***//
			
			Defect = true;
		
			if (Defect == false)
			{	
				Report.Info("Validating AttributeEqual (Text='(TADIL TN)') on item 'FormMain__Surface_TN.ListItemTADIL_TN'.");
				Report.Info("Value Entered = " + TADIL);
				Validate.Attribute(repo.FormMain__Surface_TN.ListItemTADIL_TNInfo, "AccessibleValue", TADIL, Validate.DefaultMessage, false);
			}	
			else
			{
				Report.Debug("TADIL Track Number is currently not functioning and is written u矔 in R-02103");
			}	
		}	
		
		//************************************************************************************//
		//******************************Validates ATDIL1 TN Value*****************************//
		//************************************************************************************//
				
		public void ValidateATDL()
		{
			bool Defect = false;
			
			//****Setting to true, open defect***//
			
			Defect = true;
		
			if (Defect == false)
			{	
				Report.Info("Validating AttributeEqual (Text='(ADTIL1 TN)') on item 'FormMain__Surface_TN.ListItemATDL1_TN'.");
				Report.Info("Value Entered = " + ATDL1);
				Validate.Attribute(repo.FormMain__Surface_TN.ListItemATDL1_TNInfo, "AccessibleValue", ATDL1, Validate.DefaultMessage, false);
			}	
			else
			{
				Report.Debug("ATDL-1 Track Number is currently not functioning and is written up in R-02103");
			}	
		}	
		
		//************************************************************************************//
		//********************************Validates NL1 TN Value******************************//
		//************************************************************************************//
				
		public void ValidateNL1()
		{
			bool Defect = false;
			
			//****Setting to true, open defect***//
			
			Defect = true;
		
			if (Defect == false)
			{	
				Report.Info("Validating AttributeEqual (Text='(NL1 TN)') on item 'FormMain__Surface_TN.ListItemNL1_TN'.");
				Report.Info("Value Entered = " + NL1);
				Validate.Attribute(repo.FormMain__Surface_TN.ListItemNL1_TNInfo, "AccessibleValue", NL1, Validate.DefaultMessage, false);
			}	
			else
			{
				Report.Debug("NATO Link-1 Track Number is currently not functioning and is written up in R-02103");
			}	
		}	
		
		//************************************************************************************//
		//******************************Validates TADILJ TN Value****************************//
		//************************************************************************************//
				
		public void ValidateTADILJ()
		{
			bool Defect = false;
			
			//****Setting to true, open defect***//
				
			Defect = true;
		
			if (Defect == false)
			{	
				Report.Info("Validating AttributeEqual (Text='(TADILJ TN)') on item 'FormMain__Surface_TN.ListItemTADIL_J_TN'.");
				Report.Info("Value Entered = " + TADILJ);
				Validate.Attribute(repo.FormMain__Surface_TN.ListItemTADIL_J_TNInfo, "AccessibleValue", TADILJ, Validate.DefaultMessage, false);
			}	
			else
			{
				Report.Debug("TADIL-J Track Number is currently not functioning and is written up in R-02103");
			}	
		}	
		
		//************************************************************************************//
		//*****************************Validates External TN Value****************************//
		//************************************************************************************//
				
		public void ValidateExt()
		{
			bool Defect = false;
			
			//****Setting to true, open defect***//
			
			Defect = true;
		
			if (Defect == false)
			{		
				Report.Info("Validating AttributeEqual (Text='(External TN)') on item 'FormMain__Surface_TN.ListItemExternal_TN'.");
				Report.Info("Value Entered = " + Ext);
				Validate.Attribute(repo.FormMain__Surface_TN.ListItemExternal_TNInfo, "AccessibleValue", Ext, Validate.DefaultMessage, false);
			}		
			else
			{
				Report.Debug("External Track Number is currently not functioning and is written up in R-02103");
			}	
		}	
		
		//************************************************************************************//
		//*************************Validates SAM/SSM Type 1 value*****************************//
		//************************************************************************************//
		
		public void ValidateSSM1()
		{
			if (!SSM1_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='SAM/SSM Type 1') on item 'FormMain__Surface_TN.ListItemSAM_SSM_Type_1'.");
				Report.Info("Value Entered = " + SSM1);		
				Validate.Attribute(repo.FormMain__Surface_TN.ListItemSAM_SSM_Type_1Info, "AccessibleValue", SSM1, Validate.DefaultMessage, false);
			}
		}
		
		//************************************************************************************//
		//**************************Validates SAM/SSM Type 2 value****************************//
		//************************************************************************************//
		
		public void ValidateSSM2()
		{
			if (!SSM2_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='SAM/SSM Type 2') on item 'FormMain__Surface_TN.ListItemSAM_SSM_Type_2'.");
				Report.Info("Value Entered = " + SSM2);		
				Validate.Attribute(repo.FormMain__Surface_TN.ListItemSAM_SSM_Type_2Info, "AccessibleValue", SSM2, Validate.DefaultMessage, false);
			}
		}
		
		//************************************************************************************//
		//*************************Validates SAM/SSM Type 3 value*****************************//
		//************************************************************************************//
		
		public void ValidateSSM3()
		{
			bool Defect = false;
			
			//****Setting to true, open defect***//
			
			Defect = true;
		
			if (Defect == false)
			{	
				if (!SSM3_OOR)
				{
					Report.Info("Validating AttributeEqual (Text='SAM/SSM Type 3') on item 'FormMain__Surface_TN.ListItemSAM_SSM_Type_3'.");
					Report.Info("Value Entered = " + SSM3);		
					Validate.Attribute(repo.FormMain__Surface_TN.ListItemSAM_SSM_Type_3Info, "AccessibleValue", SSM3, Validate.DefaultMessage, false);
				}
			}
			else
			{
				Report.Debug("SAM/SSM Type 3 value is currently not functioning and is written up in R-03026");
			}	
			
		}		
		
		//************************************************************************************//
		//******************************Right Clicks on Track*********************************//
		//************************************************************************************//	
		
		public void RightClickTrack()
		{			
			Duration OrigDur = repo.FormTacViewC2.PictureTrackInfo.SearchTimeout;
			repo.FormTacViewC2.PictureTrackInfo.SearchTimeout = 2000;			
			
			if (repo.FormTacViewC2.PictureTrackInfo.Exists())
			{
				Report.Info("Mouse Right Click item 'FormTacViewC2.PictureTrack' at Center.");
				repo.FormTacViewC2.PictureTrack.Click(MouseButtons.Right);
			}
			else
			{
				ZoomFlag = true;
				Report.Info("Track # " + TrackNum + " not found on the current display, going to world wide view");
				Report.Screenshot();
				repo.FormTacViewC2.ButtonZoom_Out_Max.Click();
				
				if (repo.FormTacViewC2.PictureTrackInfo.Exists())
				{
					Report.Info("Mouse Right Click item 'FormTacViewC2.PictureTrack' at Center.");
					repo.FormTacViewC2.PictureTrack.Click(MouseButtons.Right);
				}
				else
				{
					Report.Error("Unable to find Track # " + TrackNum + " anywhere in the world");
					Report.Screenshot();
					return;
				}				
			}
			
			repo.FormTacViewC2.PictureTrackInfo.SearchTimeout = OrigDur;
		}	
		
		//************************************************************************************//
		//*******************Opens Track Dialog For Corresponding Track***********************//
		//************************************************************************************//
		
		public void ViewTrackProperties()
		{			
			Duration OrigDur = repo.FormRealView.MenuItemTracksInfo.SearchTimeout;
			repo.FormRealView.MenuItemTracksInfo.SearchTimeout = 1000;
			Duration OrigDur1 = repo.FormRealView.MenuItemTrackNumber2Info.SearchTimeout;
			repo.FormRealView.MenuItemTrackNumber2Info.SearchTimeout = 1000;			
			
			if (repo.FormRealView.MenuItemTracksInfo.Exists())
			{
				Report.Info("Mouse Left Click item 'FormRealView.MenuItemTracks'");
			    repo.FormRealView.MenuItemTracks.Click();
			    Report.Info("Mouse Left Click item 'FormTracks.MenuItemC2_HOST_2_Track'");
		        repo.FormTracks.MenuItemConnection2_Track.Click();
		       	Report.Info("Mouse Left Click item 'FormTOAD2.MenuItemTrack_Properties' at 103;14.");
				repo.FormConnection2.MenuItemTrack_Properties.Click();
			}			
			else if (repo.FormRealView.MenuItemTrackNumber2Info.Exists())
			{
			    Report.Info("Mouse Left Click item 'repo.FormRealView.MenuItemTrackNumber2'");
		        repo.FormRealView.MenuItemTrackNumber2.Click();
		       	Report.Info("Mouse Left Click item 'FormTOAD2.MenuItemTrack_Properties' at 103;14.");
				repo.FormConnection2.MenuItemTrack_Properties.Click();
			}
			
			repo.FormRealView.MenuItemTracksInfo.SearchTimeout = OrigDur;
			repo.FormRealView.MenuItemTrackNumber2Info.SearchTimeout = OrigDur1;
		}
		
		//************************************************************************************//
		//****************************Drops Corresponding Track*******************************//
		//************************************************************************************//
		
		public void DropTrack()
		{			
			Drop_Track.DropTrack.Start();
		}		

		//************************************************************************************//
		//***************************Validates Track is Dropped*******************************//
		//************************************************************************************//
		
		public void Validate_DropTrack()
		{
			Duration OrigDur = repo.FormTacViewC2.PictureTrackInfo.SearchTimeout;
			repo.FormTacViewC2.PictureTrackInfo.SearchTimeout = 8000;

			Report.Info("Validating Track #" + TrackNum + " was dropped");
	
			bool result = Validate.NotExists(repo.FormTacViewC2.PictureTrackInfo, Validate.DefaultMessage, false);
			
			if (result == true)
			{
				Report.Success("Successfully dropped track #" + TrackNum);
			}
			else
			{
				Report.Debug("Track #" + TrackNum + " failed to drop within 8 seconds, proceeding to next track creation.");
				Report.Screenshot();				
			}
			
			repo.FormTacViewC2.PictureTrackInfo.SearchTimeout = OrigDur;
		}				
		
		//************************************************************************************//
		//*****************************Zooms Out to Locate Track******************************//
		//************************************************************************************//	
		
		public void Zoom500()
		{
			if (ZoomFlag == true)
			{
				Report.Info("Mouse Left Click item 'FormTacViewC2.ButtonSet_Range_to_500_km' at Center.");
				repo.FormTacViewC2.ButtonSet_Range_to_500_km.Click();
				Report.Info("Mouse Left Click item 'FormTacViewC2.Button_Center_on_Own_Site' at Center.");
				repo.FormTacViewC2.Button_Center_on_Own_Site.Click();
				ZoomFlag = false;
			}
		}
		
		//************************************************************************************//
		//*****************************Sets Track Number in Repo******************************//
		//************************************************************************************//
		
		public void SetTrackNumberInRepo()
		{
			tracknumber = TrackNum;	
		}
		
		//**************************************************************************************//
		//**************************Ranorex Generated Default Method****************************//
		//**************************************************************************************//
		
		static SurfaceValidateTrackRegression()
		{
			//Your recording specific initialization code goes here.
		}

		//**************************************************************************************//
		//****************************Ranorex Generated Init Method*****************************//
		//**************************************************************************************//
		
		private void Init()
		{
			// Your recording specific initialization code goes here.
		}		
	}
}