///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using System.Windows.Forms;

using CommonUtilLib;
using Ranorex;
using Ranorex.Core;

namespace TacViewLib.LinkSpecific.Surveillance.Air.CreateTrack
{
	/// <summary>
	/// The CreateTrack recording.
	/// </summary>	

	public partial class CreateTrackHandoverRegression
	{		
		public static int TCount;		
		
		//************************************************************************************//
		//********************Enters Random Platform value************************************//
		//************************************************************************************//
		
		public void Platval()
		{
			int x = 0;
			
			while (x < 2)
			{
				try
				{
					repo.FormMainCreate.ListItemPlatform.Click("CenterLeft");
				    Keyboard.Press(Keys.Tab);
				    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List list2 = "//list[@processname='RealView']";
		            int AScount = list2.Items.Count;
		            Random ASvalue = new Random();
		            AScount = AScount - 1;
					int ASnum = ASvalue.Next(1, AScount++);
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click();
					Accessible accElement = new Accessible(repo.FormMainCreate.ListItemPlatform);  
		   			string PlatValue = accElement.Value;
		   			Report.Info("Platform Value Entered = " + PlatValue);
		   			ValidateTrack.AirValidateTrackRegression.Plat_OOR = false;
		   			x=2;
				}
				catch (ArgumentOutOfRangeException e)
				{								   			
			   		x++;
			   		if (x == 1)
			   		{
			   			Report.Debug("List Count Out of Range for Platform, Re-Executing Function");
			   			Report.Debug(e.ToString());	
			   		}
			   		else if (x == 2)
			   		{
			   			Report.Debug("List Count Out of Range for Platform, List Item Will Not be Validated");
			   			Report.Debug(e.ToString());	
			   			ValidateTrack.AirValidateTrackRegression.Plat_OOR = true;
			   		}
				}					
			}
		}		

		//************************************************************************************//
		//**********************Enters Random Activity value**********************************//
		//************************************************************************************//
		
		public void Actval()
		{
			int x = 0;
			
			while (x < 2)
			{
				try
				{
					repo.FormMainCreate.ListItemActivity.Click("CenterLeft");
				    Keyboard.Press(Keys.Tab);
				    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List list2 = "//list[@processname='RealView']";
		            int AScount = list2.Items.Count;
		            Random ASvalue = new Random();
		            AScount = AScount - 1;
					int ASnum = ASvalue.Next(1, AScount++);
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click();
					Accessible accElement = new Accessible(repo.FormMainCreate.ListItemActivity);  
		   			string ActValue = accElement.Value;
		   			Report.Info("Activity Value Entered = " + ActValue);
		   			ValidateTrack.AirValidateTrackRegression.Act_OOR = false;
		   			x=2;
				}
				catch (ArgumentOutOfRangeException e)
				{								   			
			   		x++;
			   		if (x == 1)
			   		{
			   			Report.Debug("List Count Out of Range for Activity, Re-Executing Function");
			   			Report.Debug(e.ToString());	
			   		}
			   		else if (x == 2)
			   		{
			   			Report.Debug("List Count Out of Range for Activity, List Item Will Not be Validated");
			   			Report.Debug(e.ToString());	
			   			ValidateTrack.AirValidateTrackRegression.Act_OOR = true;
			   		}
				}			
			}
		}		

		//************************************************************************************//
		//********************Enters Random Specific Type value*******************************//
		//************************************************************************************//
		
		public void Stypeval()
		{
			int x = 0;
			
			while (x < 2)
			{
				try
				{
					repo.FormMainCreate.ListItemSpecific_Type.Click("CenterLeft");
				    Keyboard.Press(Keys.Tab);
				    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List list2 = "//list[@processname='RealView']";
		            int AScount = list2.Items.Count;
		            Random ASvalue = new Random();
		            AScount = AScount - 1;
					int ASnum = ASvalue.Next(1, AScount++);
					ValidateTrack.AirValidateTrackRegression.Stype_OOR=false;
					repo.ListRealView.Self.Items[ASnum].Select();
	       			repo.ListRealView.Self.Items[ASnum].Click();
					Accessible accElement = new Accessible(repo.FormMainCreate.ListItemSpecific_Type);  
	   				string StypeValue = accElement.Value;
	   				Report.Info("Specific Type Value Entered = " + StypeValue);
	   				ValidateTrack.AirValidateTrackRegression.Stype_OOR = false;
	   				x=2;
				}
				catch (ArgumentOutOfRangeException e)
				{								   			
			   		x++;
			   		if (x == 1)
			   		{
			   			Report.Debug("List Count Out of Range for Specific Type, Re-Executing Function");
			   			Report.Debug(e.ToString());	
			   		}
			   		else if (x == 2)
			   		{
			   			Report.Debug("List Count Out of Range for Specific Type, List Item Will Not be Validated");
			   			Report.Debug(e.ToString());	
			   			ValidateTrack.AirValidateTrackRegression.Stype_OOR = true;
			   		}
				}						
			}
		}		
		
		//************************************************************************************//
		//********************Enters Random Specific Type value*******************************//
		//************************************************************************************//
		
		public void Strengthval()
		{
			int x = 0;
			
			while (x < 2)
			{
				try
				{
					repo.FormMainCreate.ListItemStrength.Click("CenterLeft");
				    Keyboard.Press(Keys.Tab);
				    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List list2 = "//list[@processname='RealView']";
		            int AScount = list2.Items.Count;
		            Random ASvalue = new Random();
		            AScount = AScount - 1;
					int ASnum = ASvalue.Next(1, AScount++);
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click();
					Accessible accElement = new Accessible(repo.FormMainCreate.ListItemStrength);  
		   			string StrengthValue = accElement.Value;
		   			Report.Info("Strength Value Entered = " + StrengthValue);
		   			ValidateTrack.AirValidateTrackRegression.Strength_OOR = false;
		   			x=2;
				}
				catch (ArgumentOutOfRangeException e)
				{								   			
			   		x++;
			   		if (x == 1)
			   		{
			   			Report.Debug("List Count Out of Range for Strength, Re-Executing Function");
			   			Report.Debug(e.ToString());	
			   		}
			   		else if (x == 2)
			   		{
			   			Report.Debug("List Count Out of Range for Strength, List Item Will Not be Validated");
			   			Report.Debug(e.ToString());	
			   			ValidateTrack.AirValidateTrackRegression.Strength_OOR = true;
			   		}
				}				
			}
		}

		//************************************************************************************//
		//********************Enters Random Altitude value************************************//
		//************************************************************************************//
		
		public void Altitudeval()
		{
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();			
			repo.FormMainCreate.ListItemAltitude.Click("CenterLeft");
		    Keyboard.Press(Keys.Tab);
			string b = SharedFunctions.Random(1, 204750);
			Keyboard.Press(b);
			Accessible accElement = new Accessible(repo.FormMainCreate.ListItemAltitude);  
   			string AltValue = b;
   			Report.Info("Altitude Entered = " + AltValue);
		}		
		
		//************************************************************************************//
		//********************Enters Random Velocity value************************************//
		//************************************************************************************//
		
		public void Velocityval()
		{
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();			
			repo.FormMainCreate.ListItemSpeedVelocity.Click("CenterLeft");
		    Keyboard.Press(Keys.Tab);
			string b = SharedFunctions.Random(1, 4650);
			Keyboard.Press(b);
			Accessible accElement = new Accessible(repo.FormMainCreate.ListItemSpeedVelocity);  
   			string VelocityValue = b;
   			Report.Info("Velocity Entered = " + VelocityValue);
		}		
		
		//************************************************************************************//
		//***************************Enters Random Course value*******************************//
		//************************************************************************************//
		
		public void Courseval()
		{
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();			
			repo.FormMainCreate.ListItemTrue_Course.Click("CenterLeft");
		    Keyboard.Press(Keys.Tab);			
			string b = SharedFunctions.Random(0, 360);
			Keyboard.Press(b);
			Accessible accElement = new Accessible(repo.FormMainCreate.ListItemTrue_Course);  
			double CourseValue = Convert.ToDouble(b);
   			Report.Info("Course Entered = " + Convert.ToString(CourseValue));
   			Keyboard.Press(Keys.Tab);
		}		

		//************************************************************************************//
		//**********************Enters Random Track Quality***********************************//
		//************************************************************************************//
		
		public void TrackQualityval()
		{
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();			
			repo.FormMainCreate.ListItemLocal_TQ.Click("CenterLeft");
		    Keyboard.Press(Keys.Tab);				
			string b = SharedFunctions.Random(1, 15);
			Keyboard.Press(b);
			Accessible accElement = new Accessible(repo.FormMainCreate.ListItemLocal_TQ);  
   			string TQValue = b;
   			Report.Info("Track Quality Entered = " + TQValue);
		}		
		
		//************************************************************************************//
		//**********************Stores Reporting Unit to Variable*****************************//
		//************************************************************************************//
		
		public void ReportingUnitval()
		{
			Accessible accElement3 = new Accessible(repo.FormMainCreate.ListItemReporting_Unit);  
			string ReportingUnit = accElement3.Value;
		}		

		//************************************************************************************//
		//*********************************Gets Track Count***********************************//
		//************************************************************************************//
		
		public void GetTrackCount()
		{			
			Ranorex.Container cont1 = repo.FormTacViewC2.ContainerRvView;
			IList<Picture> list1 = cont1.Find<Picture>(@"/form[@title~'^TacViewC2\ \ \ \(map:\ .*']/element/container/picture[@accessiblevalue='Track']");
			TCount = list1.Count;		    
		}		
		
		//************************************************************************************//
		//*********************************Gets Track Number**********************************//
		//************************************************************************************//
		
		public void GetTrackNum()			
		{			
		    TCount++;
		    Accessible pic1 = @"/form[@title~'^TacViewC2\ \ \ \(map:\ .*']/element/container/picture[@accessiblevalue='Track']" + "[" + TCount + "]";
   			Accessible accElement = new Accessible(pic1);  
   			string track1 = accElement.Name;
   			Report.Info("Track Number = " + track1);
   		    TacViewLib.LinkSpecific.C2AirControl.Handovers.HandoverSingleTrack.TrackNum = track1;
   			TacViewLib.LinkSpecific.Surveillance.Drop_Track.DropTrack.TrackNum = track1; 
   			Report.Screenshot();
		}
		
		//************************************************************************************//
		//******************************Randomly Plots a Track********************************//
		//************************************************************************************//		
		
		public void RandCoord()
		{	
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();			
	       	Ranorex.Container test = @"/form[@title~'^TacViewC2\ \ \ \(map:\ .*']/element/container[@accessiblename='RvView']";
	        var a = test.ScreenRectangle.Width;
	        var b = test.ScreenRectangle.Height;
	        int c = Convert.ToInt32(a);
	        c = c - 100;
	        int d = Convert.ToInt32(b);
	        d = d - 100;
	       	string w = SharedFunctions.Random(100, c);
	       	string h = SharedFunctions.Random(100, d);
	    	repo.FormTacViewC2.ContainerRvView.Click(MouseButtons.Right, "" + w + ";" + h + ""); 
	    	 
	    	Duration OrigDur = repo.FormRealView.MenuItemCreate_TrackInfo.SearchTimeout;
			repo.FormRealView.MenuItemCreate_TrackInfo.SearchTimeout = 1000;			
			
			if (repo.FormRealView.MenuItemCreate_TrackInfo.Exists())
			{
				return;
			}			
			else
			{
				RandCoord();
			}
			
			repo.FormRealView.MenuItemCreate_TrackInfo.SearchTimeout = OrigDur;
		}

		//**************************************************************************************//
		//****************************Ranorex Generated Default Method**************************//
		//**************************************************************************************//
		
		static CreateTrackHandoverRegression()
		{
			//Your recording specific initialization code goes here.
		}
		
		//**************************************************************************************//
		//*****************************Ranorex Generated Init Method****************************//
		//**************************************************************************************//		

		private void Init()
		{
			// Your recording specific initialization code goes here.
		}
	}
}