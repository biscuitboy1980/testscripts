///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using System.Windows.Forms;

using Ranorex;
using Ranorex.Core;

namespace TacViewLib.LinkSpecific.Surveillance.Reference.CreateTrack
{
	/// <summary>
	/// The CreateTrack recording.
	/// </summary>
	public partial class CreateRefTrack6016D
	{

		public static string EnvCat;
		public static string ECAmp;
		public static string SpTrk = CreateTrack.CreateSpaceTrack6016D.track1;
		public static int TCount;
		
		//************************************************************************************//
		//*********************************Gets Track Count***********************************//
		//************************************************************************************//
		
		public void GetTrackCount()
		{			
			Ranorex.Container cont1 = repo.FormTacViewC2.ContainerRvView;
			IList<Picture> list1 = cont1.Find<Picture>(@"/form[@title~'^TacViewC2\ \ \ \(map:\ .*']/element/container/picture[@accessiblevalue='Track']");
			TCount = list1.Count;		    
		}			
		
		//************************************************************************************//
		//******************************Randomly Plots a Track********************************//
		//************************************************************************************//		
		
		public void RandCoord()
		{	
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			SharedFunctions.RandCoord();
		}					
		
		//************************************************************************************//
		//********************Enters Point Type value from csv file***************************//
		//************************************************************************************//

		public void PointType()
		{
			repo.FormMain__Reference_Point_TN___CREATE.ListItemPoint_Type.Click("CenterLeft");
			Keyboard.Press(Keys.Tab);
			Keyboard.Press("{LMenu down}{Down}{LMenu up}");
			bool found = false;
			ValidateTrack.ValidateRefTrack6016D.PointFlag=false;
        	foreach( ListItem item in repo.ListRealView.Self.Items )
        	{
           		if ( item.Text == Ptype )
           		{
	            	item.Select();
	            	item.Click();
	            	found=true;
	            	break;        
           		}           		
        	}
        	if (!found)
        	{
	        	ValidateTrack.ValidateRefTrack6016D.PointFlag=true;
	           	repo.ListRealView.Self.Items[0].Select();
	       		repo.ListRealView.Self.Items[0].Click();
        	}   
		}
		
		//************************************************************************************//
		//********************Enters Amplification value from csv file************************//
		//************************************************************************************//
		
		public void Amplification()
		{
			repo.FormMain__Reference_Point_TN___CREATE.ListItemAmplification.Click("CenterLeft");
			Keyboard.Press(Keys.Tab);
			Keyboard.Press("{LMenu down}{Down}{LMenu up}");
			bool found = false;
			ValidateTrack.ValidateRefTrack6016D.AmpFlag=false;
        	foreach( ListItem item in repo.ListRealView.Self.Items )
        	{
           		if ( item.Text == Amp )
           		{
	            	item.Select();
	            	item.Click();
	            	found=true;
	            	break;        
           		}           		
        	}
        	if (!found)
        	{
	        	ValidateTrack.ValidateRefTrack6016D.AmpFlag=true;
	           	repo.ListRealView.Self.Items[1].Select();
	       		repo.ListRealView.Self.Items[1].Click();
        	}   
		}

		//************************************************************************************//
		//*****************Enters Environment/Category value from csv file********************//
		//************************************************************************************//
		
		public void EnvironmentCat()
		{
			Keyboard.Press("{LMenu down}{Down}{LMenu up}");
			bool found = false;
			ValidateTrack.ValidateRefTrack6016D.EnvCatFlag=false;
        	foreach( ListItem item in repo.ListRealView.Self.Items )
        	{
           		if ( item.Text == EnvCat )
           		{
	            	item.Select();
	            	item.Click();
	            	found=true;
	            	break;        
           		}           		
        	}
        	if (!found)
        	{
	        	ValidateTrack.ValidateRefTrack6016D.EnvCatFlag=true;
	           	repo.ListRealView.Self.Items[1].Select();
	       		repo.ListRealView.Self.Items[1].Click();
        	}   
		}
		
		//************************************************************************************//
		//*********Enters Environment/Category Amplification data from csv file***************//
		//************************************************************************************//

		public void EnvCatAmp()
		{
			Keyboard.Press("{LMenu down}{Down}{LMenu up}");
			bool found = false;
			ValidateTrack.ValidateRefTrack6016D.EnvCatAmpFlag=false;
        	foreach( ListItem item in repo.ListRealView.Self.Items )
        	{
           		if ( item.Text == ECAmp )
           		{
	            	item.Select();
	            	item.Click();
	            	found=true;
	            	break;        
           		}           		
        	}
        	if (!found)
        	{
	        	ValidateTrack.ValidateRefTrack6016D.EnvCatAmpFlag=true;
	        	repo.ListRealView.Self.Items[0].Select();
	       		repo.ListRealView.Self.Items[0].Click();
        	}   
		}
		
		//************************************************************************************//
		//******************************Enters Related TN of spaced track*********************//
		//************************************************************************************//
		
		public void RelatedTN()
		{
			Keyboard.Press(Keys.Tab);
			Report.Info("Key sequence 'SpTrk'.");
			Keyboard.Press(SpTrk);
		}		

		//*************************************************************************************//
		//****************************Ranorex Generated Default Method*************************//
		//*************************************************************************************//		

		static CreateRefTrack6016D()
		{
			//Your recording specific initialization code goes here.
		}
		
		//*************************************************************************************//
		//*****************************Ranorex Generated Init Method***************************//
		//*************************************************************************************//		

		private void Init()
		{
			// Your recording specific initialization code goes here.
		}
		
		//************************************************************************************//
		//*********************************Gets Track Number**********************************//
		//************************************************************************************//		

		public void GetTrackNum()			
		{			
		    TCount++;
		    Accessible pic1 = @"/form[@title~'^TacViewC2\ \ \ \(map:\ .*']/element/container/picture[@accessiblevalue='Track']" + "[" + TCount + "]";
		    Accessible accElement = new Accessible(pic1);
			string track1 = accElement.Name;
	  		Report.Info("Track Number = " + track1);
	 		ValidateTrack.ValidateRefTrack6016D.TrackNum = track1;
	  		Drop_Track.DropTrack.TrackNum = track1;   	 
		}
	}
}
