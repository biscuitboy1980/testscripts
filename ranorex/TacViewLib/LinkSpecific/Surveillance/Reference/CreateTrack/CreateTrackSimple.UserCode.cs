///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Drawing;
using System.Text.RegularExpressions;
using System.Threading;
using System.Windows.Forms;
using Microsoft.VisualBasic;

using CommonUtilLib;
using Ranorex;
using Ranorex.Core;

namespace TacViewLib.LinkSpecific.Surveillance.Reference.CreateTrack
{
	/// <summary>
	/// The CreateTrack recording.
	/// </summary>
	

	public partial class CreateTrackSimple
	{	
		public static int TCount;
		
		//************************************************************************************//
		//*********************************Gets Track Count***********************************//
		//************************************************************************************//		
		
		public static void GetTrackCount()
		{			
			Ranorex.Container cont1 = repo.FormTacViewC2.ContainerRvView;
			IList<Picture> list1 = cont1.Find<Picture>(@"/form[@title~'^TacViewC2\ \ \ \(map:\ .*']/element/container/picture[@accessiblevalue='Track']");
			TCount = list1.Count;	
		}			
		
		//************************************************************************************//
		//******************************Randomly Plots a Track********************************//
		//************************************************************************************//		
		
		public static void RandCoord()
		{	
			CommonUtilLib.Util.RandCoord();
		}				
		
		//************************************************************************************//
		//***************************Enters Random Point Type*********************************//
		//************************************************************************************//
		
		public static void PTypeval()
		{	
			int x = 0;
			
			while (x < 2)
			{			
				try
				{
					repo.FormMain__Reference_Point_TN.ListItemPoint_Type.Click("CenterLeft");
					Keyboard.Press(Keys.Tab);
					Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List list2 = "//list[@processname='RealView']";
			        int AScount = list2.Items.Count;
			        Random ASvalue = new Random();
					int ASnum = ASvalue.Next(0, AScount++);
					repo.ListRealView.Self.Items[ASnum].Select();
					repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormMain__Reference_Point_TN.ListItemPoint_Type);  
					string PTypeValue = accElement.Value;
					ValidateTrack.ValidateTrackRegression.PType = PTypeValue;
					Report.Info("Point Type Entered = " + PTypeValue);
		   			ValidateTrack.ValidateTrackRegression.Ptype_OOR = false;
		   			x=2;  				
				}
				catch (ArgumentOutOfRangeException e)
				{								   			
				   	x++;
				    if (x == 1)
				   	{
				   		Report.Debug("List Count Out of Range for Point Type, Re-Executing Function");
				   		Report.Debug(e.ToString());	
				   	}
				   	else if (x == 2)
				   	{
				   		Report.Debug("List Count Out of Range for Point Type, List Item Will Not be Validated");
				   		Report.Debug(e.ToString());	
				   		ValidateTrack.ValidateTrackRegression.Ptype_OOR = true;
				   	}
				}
			}
		}
		
		//************************************************************************************//
		//**************************Enters Random Amplification*******************************//
		//************************************************************************************//
		
		public static void Ampval()
		{	
			int x = 0;
			
			while (x < 2)
			{
				try
				{
					repo.FormMain__Reference_Point_TN.ListItemAmplification.Click("CenterLeft");
					Keyboard.Press(Keys.Tab);
					Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List list2 = "//list[@processname='RealView']";
			        int AScount = list2.Items.Count;
			        Random ASvalue = new Random();
					int ASnum = ASvalue.Next(1, AScount++);
					repo.ListRealView.Self.Items[ASnum].Select();
					repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormMain__Reference_Point_TN.ListItemAmplification);  
					string AmpValue = accElement.Value;
					ValidateTrack.ValidateTrackRegression.Amp = AmpValue;
					Report.Info("Amplification Value Entered = " + AmpValue);
					ValidateTrack.ValidateTrackRegression.Amp_OOR = false;
					x=2;
				}
				catch (ArgumentOutOfRangeException e)
				{								   			
				   	x++;
				    if (x == 1)
				   	{
				   		Report.Debug("List Count Out of Range for Amplification, Re-Executing Function");
				   		Report.Debug(e.ToString());	
				   	}
				   	else if (x == 2)
				   	{
				   		Report.Debug("List Count Out of Range for Amplification, List Item Will Not be Validated");
				   		Report.Debug(e.ToString());	
				   		ValidateTrack.ValidateTrackRegression.Amp_OOR = true;
				   	}
				}
			}
		}				
		
		//************************************************************************************//
		//********************************Gets Track Number***********************************//
		//************************************************************************************//
		
		public static void GetTrackNum()			
		{
			try
			{
			    TCount++;
			    Accessible pic1 = @"/form[@title~'^TacViewC2\ \ \ \(map:\ .*']/element/container/picture[@accessiblevalue='Track']" + "[" + TCount + "]";
	   			Accessible accElement = new Accessible(pic1);  
	   			string track1 = accElement.Name;
	   			Report.Info("Track Number = " + track1);
	   			ValidateTrack.ValidateTrackRegression.TrackNum = track1;	
	   			Drop_Track.DropTrack.TrackNum = track1; 
			}
			catch (Exception)
            {
				ValidateTrack.ValidateTrackSimple.ExitFlag1 = true;
				ValidateTrack.ValidateTrackSimple.ExitFlag2 = true;
				Report.Debug("picture[@accessiblevalue='Track']" + "[" + TCount + "] could not be found. Accessible item was not created. All validation for this track will be skipped");
            }			
		}

		public static void Click_ButtonSave()
		{
			Duration OrigDur = repo.FormMain__Reference_Point_TN.ButtonSaveInfo.SearchTimeout;
			repo.FormMain__Reference_Point_TN.ButtonSaveInfo.SearchTimeout = 1500;
			
			if (repo.FormMain__Reference_Point_TN.ButtonSave.Enabled == true)
			{
				Report.Info("Mouse Left Click item 'FormMain__Reference_Point_TN.ButtonSave' at Center.");
				repo.FormMain__Reference_Point_TN.ButtonSave.Click();
			}
			else
			{
				Report.Debug("Save button is disabled due to an error with the Reference Point Create Dialog. Please check the log report to determine the issue");
				repo.FormMain__Reference_Point_TN.ButtonCLOSE.Click();
				CreateTrack.CreateTrackRegression.Start();
			}
			
			repo.FormMain__Reference_Point_TN.ButtonSaveInfo.SearchTimeout = OrigDur;
		}

		static CreateTrackSimple()
		{
			//Your recording specific initialization code goes here.
		}
	}
}