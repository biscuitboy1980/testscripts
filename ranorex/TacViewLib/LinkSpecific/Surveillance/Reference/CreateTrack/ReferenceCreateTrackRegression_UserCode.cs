///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////




using System;
using System.Collections.Generic;
using System.Text;
using System.Drawing;
using System.Text.RegularExpressions;
using System.Threading;
using System.Windows.Forms;
using Microsoft.VisualBasic;

using CommonUtilLib;
using Ranorex;
using Ranorex.Core;

namespace TacViewLib.LinkSpecific.Surveillance.Reference.CreateTrack
{
	/// <summary>
	/// The CreateTrack recording.
	/// </summary>	

	public partial class ReferenceCreateTrackRegression
	{	
		public static string PTypeValue;
		public static string AmpValue;
		public static int Altitude1;
		public static string Altitude2;
		
		public static bool TF1Flag;
		public static bool TF2Flag;
		public static bool AOPFlag;
		public static bool BurstFlag;
		public static bool YieldFlag;		
		public static bool PosAccFlag;
		public static bool SlaveFlag;
		
		public static string HR1Value;
		public static string MN1Value;
		
		public static string SpTrk;
		
		public static int TCount;
		
		//************************************************************************************//
		//***************************Enters Random Point Type*********************************//
		//************************************************************************************//
		
		public void PTypeval()
		{			
				try
				{
					repo.FormMain__Reference_Point_TN.ListItemPoint_Type.Click("CenterLeft");
					Keyboard.Press(Keys.Tab);
					Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List list2 = "//list[@processname='RealView']";
			        int AScount = list2.Items.Count;
			        Random ASvalue = new Random();
					int ASnum = ASvalue.Next(0, AScount-1);
					repo.ListRealView.Self.Items[ASnum].Select();
					repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormMain__Reference_Point_TN.ListItemPoint_Type);  
					PTypeValue = accElement.Value;
					ValidateTrack.ReferenceValidateTrackRegression.PType = PTypeValue;
					Report.Info("Point Type Entered = " + PTypeValue);
		   			ValidateTrack.ReferenceValidateTrackRegression.Ptype_OOR = false;
		   			
		   			if (PTypeValue == "Emergency")
	   				{
	   					ValidateTrack.ReferenceValidateTrackRegression.PosAccFlag = true;   	 				
	   					PosAccFlag = true;   	
	   				}
	   				else
	   				{
	   					ValidateTrack.ReferenceValidateTrackRegression.PosAccFlag = false;  
	   					PosAccFlag = false;  
	   				}	   				
				}
				catch (ArgumentOutOfRangeException e)
				{								   			
				   		Report.Debug("List Count Out of Range for Point Type, List Item Will Not be Validated");
				   		Report.Debug(e.ToString());	
				   		ValidateTrack.ReferenceValidateTrackRegression.Ptype_OOR = true;
				   	
				}
			
		}
		
		//************************************************************************************//
		//**************************Enters Random Amplification*******************************//
		//************************************************************************************//
		
		public void Ampval()
		{	

				try
				{
					repo.FormMain__Reference_Point_TN.ListItemAmplification.Click("CenterLeft");
					Keyboard.Press(Keys.Tab);
					Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List list2 = "//list[@processname='RealView']";
			        int AScount = list2.Items.Count;
			        Random ASvalue = new Random();
					int ASnum = ASvalue.Next(1, AScount-1);
					repo.ListRealView.Self.Items[ASnum].Select();
					repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormMain__Reference_Point_TN.ListItemAmplification);  
					AmpValue = accElement.Value;
					ValidateTrack.ReferenceValidateTrackRegression.Amp = AmpValue;
					Report.Info("Amplification Value Entered = " + AmpValue);
					ValidateTrack.ReferenceValidateTrackRegression.Amp_OOR = false;

					
					if (AmpValue == "Area of Probability ASW")
   					{
			   			ValidateTrack.ReferenceValidateTrackRegression.AOPFlag = true;
			   			AOPFlag = true;
   					}
   					else
   					{
			   			ValidateTrack.ReferenceValidateTrackRegression.AOPFlag = false;
			   			AOPFlag = false;
   					}
   			
   					if (AmpValue == "Hazard" && PTypeValue == "Ground Zero")
   					{
		   				ValidateTrack.ReferenceValidateTrackRegression.BurstFlag = true;
		   				ValidateTrack.ReferenceValidateTrackRegression.YieldFlag = true;
		   				
			   			BurstFlag = true;	
	   					YieldFlag = true;
	   					
   					}
   					else
   					{
		   				ValidateTrack.ReferenceValidateTrackRegression.BurstFlag = false;
		   				ValidateTrack.ReferenceValidateTrackRegression.YieldFlag = false;
		   				
			   			BurstFlag = false;	
			   			YieldFlag = false;	
   					}
				}
				catch (ArgumentOutOfRangeException e)
				{
				   		Report.Debug("List Count Out of Range for Amplification, List Item Will Not be Validated");
				   		Report.Debug(e.ToString());	
				   		ValidateTrack.ReferenceValidateTrackRegression.Amp_OOR = true;
				   	
				}
			
		}		
		
		//************************************************************************************//
		//***************************Enters Random Eviron/Category****************************//
		//************************************************************************************//
		
		public void EnvCatval()
		{
			Duration OrigDur = repo.FormMain__Reference_Point_TN.SearchTimeout;
			repo.FormMain__Reference_Point_TN.SearchTimeout = 100;
			Duration OrigDur2 = repo.FormMain__Reference_Point_TN.ListItemEnviron_CategoryInfo.SearchTimeout;
			repo.FormMain__Reference_Point_TN.ListItemEnviron_CategoryInfo.SearchTimeout = 1000;

			if (repo.FormMain__Reference_Point_TN.ListItemEnviron_CategoryInfo.Exists())
			{	

					try
					{				
						repo.FormMain__Reference_Point_TN.ListItemEnviron_Category.Click("CenterLeft");
						Keyboard.Press(Keys.Tab);
						Keyboard.Press("{LMenu down}{Down}{LMenu up}");
						Ranorex.List list2 = "//list[@processname='RealView']";
				        int AScount = list2.Items.Count;
				        Random ASvalue = new Random();
						int ASnum = ASvalue.Next(1, AScount-1);
						repo.ListRealView.Self.Items[ASnum].Select();
						repo.ListRealView.Self.Items[ASnum].Click("center");
						Accessible accElement = new Accessible(repo.FormMain__Reference_Point_TN.ListItemEnviron_Category);  
						string EnvCatValue = accElement.Value;
						ValidateTrack.ReferenceValidateTrackRegression.EC = EnvCatValue;
						Report.Info("Environ/Category Value Entered = " + EnvCatValue);
						ValidateTrack.ReferenceValidateTrackRegression.ECFlag = true;
						ValidateTrack.ReferenceValidateTrackRegression.EnvCat_OOR = false;

					}
					catch (ArgumentOutOfRangeException e)
					{								   			

					   		Report.Debug("List Count Out of Range for Environ/Category, List Item Will Not be Validated");
					   		Report.Debug(e.ToString());	
					   		ValidateTrack.ReferenceValidateTrackRegression.EnvCat_OOR = true;
					   	
					}				
				 	
			}
			else
			{
   				ValidateTrack.ReferenceValidateTrackRegression.ECFlag = false;	
			}
			
			
			repo.FormMain__Reference_Point_TN.SearchTimeout = OrigDur;
			repo.FormMain__Reference_Point_TN.ListItemEnviron_CategoryInfo.SearchTimeout = OrigDur2;
		}		
		
		//************************************************************************************//
		//*********************Enters Random Eviron/Category Amplification********************//
		//************************************************************************************//
		
		public void EnvCatAmpval()
		{
			Duration OrigDur = repo.FormMain__Reference_Point_TN.SearchTimeout;
			repo.FormMain__Reference_Point_TN.SearchTimeout = 100;
			Duration OrigDur2 = repo.FormMain__Reference_Point_TN.ListItemEnviron_Category_AmplifiInfo.SearchTimeout;
			repo.FormMain__Reference_Point_TN.ListItemEnviron_Category_AmplifiInfo.SearchTimeout = 1000;

			if (repo.FormMain__Reference_Point_TN.ListItemEnviron_Category_AmplifiInfo.Exists())
			{	
					try
					{
						repo.FormMain__Reference_Point_TN.ListItemEnviron_Category_Amplifi.Click("CenterLeft");
						Keyboard.Press(Keys.Tab);
						Keyboard.Press("{LMenu down}{Down}{LMenu up}");
						Ranorex.List list2 = "//list[@processname='RealView']";
					    int AScount = list2.Items.Count;
					    Random ASvalue = new Random();
						int ASnum = ASvalue.Next(1, AScount-1);
						repo.ListRealView.Self.Items[ASnum].Select();
						repo.ListRealView.Self.Items[ASnum].Click("center");
						Accessible accElement = new Accessible(repo.FormMain__Reference_Point_TN.ListItemEnviron_Category_Amplifi);  
						string EnvCatAmpValue = accElement.Value;
						ValidateTrack.ReferenceValidateTrackRegression.ECAmp = EnvCatAmpValue;
						Report.Info("Environ/Category Amplification Value Entered = " + EnvCatAmpValue);
						ValidateTrack.ReferenceValidateTrackRegression.ECAmpFlag = true;
						ValidateTrack.ReferenceValidateTrackRegression.EnvCatAmp_OOR = false;

					}
					catch (ArgumentOutOfRangeException e)
					{								   			
	
					   		Report.Debug("List Count Out of Range for Environ/Category Amplification, List Item Will Not be Validated");
					   		Report.Debug(e.ToString());	
					   		ValidateTrack.ReferenceValidateTrackRegression.Ptype_OOR = true;
					   	
					}
				
			}
			else
			{
   				ValidateTrack.ReferenceValidateTrackRegression.ECAmpFlag = false;	
			}
			
			
			repo.FormMain__Reference_Point_TN.SearchTimeout = OrigDur;
			repo.FormMain__Reference_Point_TN.ListItemEnviron_Category_AmplifiInfo.SearchTimeout = OrigDur2;
		}			
		
		//************************************************************************************//
		//***********************Enters Random Amplification Confidence***********************//
		//************************************************************************************//
		
		public void AmpConval()
		{
			Duration OrigDur = repo.FormMain__Reference_Point_TN.SearchTimeout;
			repo.FormMain__Reference_Point_TN.SearchTimeout = 100;
			Duration OrigDur2 = repo.FormMain__Reference_Point_TN.ListItemAmplification_ConfidenceInfo.SearchTimeout;
			repo.FormMain__Reference_Point_TN.ListItemAmplification_ConfidenceInfo.SearchTimeout = 1000;


			if (repo.FormMain__Reference_Point_TN.ListItemAmplification_ConfidenceInfo.Exists())
			{

					try
					{		
						
						repo.FormMain__Reference_Point_TN.ListItemAmplification_Confidence.Click("CenterLeft");
						Keyboard.Press(Keys.Tab);
						Keyboard.Press("{LMenu down}{Down}{LMenu up}");
						Ranorex.List list2 = "//list[@processname='RealView']";
				        int AScount = list2.Items.Count;
				        Random ASvalue = new Random();
						int ASnum = ASvalue.Next(1, AScount-1);
						repo.ListRealView.Self.Items[ASnum].Select();
						repo.ListRealView.Self.Items[ASnum].Click("center");
						Accessible accElement = new Accessible(repo.FormMain__Reference_Point_TN.ListItemAmplification_Confidence);  
						string AmpConValue = accElement.Value;
						ValidateTrack.ReferenceValidateTrackRegression.AC = AmpConValue;
						Report.Info("Environ/Category Amplification Value Entered = " + AmpConValue);
						ValidateTrack.ReferenceValidateTrackRegression.ACFlag = true;
						ValidateTrack.ReferenceValidateTrackRegression.AmpCon_OOR = false;

					}	
					catch (ArgumentOutOfRangeException e)
					{								   			

					   		Report.Debug("List Count Out of Range for Amplification Confidence, List Item Will Not be Validated");
					   		Report.Debug(e.ToString());	
					   		ValidateTrack.ReferenceValidateTrackRegression.AmpCon_OOR = true;
					   	
					}
				
			}
			else
			{
				
   				ValidateTrack.ReferenceValidateTrackRegression.ACFlag = false;		
			}
			
			repo.FormMain__Reference_Point_TN.SearchTimeout = OrigDur;
			repo.FormMain__Reference_Point_TN.ListItemAmplification_ConfidenceInfo.SearchTimeout = OrigDur2;
		}					

		//************************************************************************************//
		//***************************Enters Random Time Function******************************//
		//************************************************************************************//
		
		public void TF1val()
		{			
			Duration OrigDur = repo.FormMain__Reference_Point_TN.SearchTimeout;
			repo.FormMain__Reference_Point_TN.SearchTimeout = 100;
			Duration OrigDur2 = repo.FormMain__Reference_Point_TN.ListItemTime_Function1Info.SearchTimeout;
			repo.FormMain__Reference_Point_TN.ListItemTime_Function1Info.SearchTimeout = 1000;

			
			if (repo.FormMain__Reference_Point_TN.ListItemTime_Function1Info.Exists())
			{	

					try
					{
						
						repo.FormMain__Reference_Point_TN.ListItemTime_Function1.Click("CenterLeft");
					   	Keyboard.Press("{LMenu down}{Down}{LMenu up}");
						Ranorex.List list2 = "//list[@processname='RealView']";
			            int AScount = list2.Items.Count;
			            Random ASvalue = new Random();
						int ASnum = ASvalue.Next(1, AScount-1);
			       		repo.ListRealView.Self.Items[ASnum].Select();
			       		repo.ListRealView.Self.Items[ASnum].Click("center");
						Accessible accElement = new Accessible(repo.FormMain__Reference_Point_TN.ListItemTime_Function1);  
			   			string TF1Value = accElement.Value;
			   			ValidateTrack.ReferenceValidateTrackRegression.TF1 = TF1Value;
			   			Report.Info("Time Function 1 Value Entered = " + TF1Value);
			   			ValidateTrack.ReferenceValidateTrackRegression.TF1Flag = true;
			   			ValidateTrack.ReferenceValidateTrackRegression.TF1_OOR = false;
			   			TF1Flag = true;

					}
					catch (ArgumentOutOfRangeException e)
				    {								   			

			   				Report.Debug("List Count Out of Range for Time Function 1, List Item Will Not be Validated");
			   				Report.Debug(e.ToString());	
			   				ValidateTrack.ReferenceValidateTrackRegression.TF1_OOR = true;
			   				TF1Flag = false;
			   			
				    }
					

			//************************************************************************************//
			//*******************************Records Current Hour*********************************//
			//************************************************************************************//
	
				if (TF1Flag)
				{		
					
					repo.FormMain__Reference_Point_TN.ListItemHour1.Click("CenterLeft");
				    Keyboard.Press(Keys.Tab);
					string a = System.DateTime.Now.ToString("HH");
					string b = a.TrimStart('0');        	
					Keyboard.Press(b);
		   			ValidateTrack.ReferenceValidateTrackRegression.HR1 = b;
	   				Report.Info("Hour 1 Value Entered = " + b);
	   				HR1Value = b;	   				
				}		    	
		
			//************************************************************************************//
			//******************************Records Current Minute********************************//
			//************************************************************************************//

				if (TF1Flag)
				{	
				
					repo.FormMain__Reference_Point_TN.ListItemMinute1.Click("CenterLeft");
				    Keyboard.Press(Keys.Tab);
					string a = System.DateTime.Now.ToString("mm");
					string b = a.TrimStart('0');        	
					Keyboard.Press(b);
		   			ValidateTrack.ReferenceValidateTrackRegression.MN1 = b;
	   				Report.Info("Minute 1 Value Entered = " + b);
	   				MN1Value = b;
				}		
			}
			
			repo.FormMain__Reference_Point_TN.SearchTimeout = OrigDur;
			repo.FormMain__Reference_Point_TN.ListItemAmplification_ConfidenceInfo.SearchTimeout = OrigDur2;
		}
		//************************************************************************************//
		//*******************************Enters Current Second********************************//
		//************************************************************************************//
		
		public void SEval()
		{
			Duration OrigDur = repo.FormMain__Reference_Point_TN.SearchTimeout;
			repo.FormMain__Reference_Point_TN.SearchTimeout = 100;
			Duration OrigDur2 = repo.FormMain__Reference_Point_TN.ListItemSecondsInfo.SearchTimeout;
			repo.FormMain__Reference_Point_TN.ListItemSecondsInfo.SearchTimeout = 1000;
			
			if (repo.FormMain__Reference_Point_TN.ListItemSecondsInfo.Exists())
			{	
			
				repo.FormMain__Reference_Point_TN.ListItemSeconds.Click("CenterLeft");
				Keyboard.Press(Keys.Tab);
				string a = System.DateTime.Now.ToString("ss");
				string b = a.TrimStart('0');        	
				Keyboard.Press(b);
	   			ValidateTrack.ReferenceValidateTrackRegression.SE = b;
	   			Report.Info("Second Value Entered = " + b);
	   			ValidateTrack.ReferenceValidateTrackRegression.SEFlag = true;
			}
			else
			{
				ValidateTrack.ReferenceValidateTrackRegression.SEFlag = false;
			}
			
			repo.FormMain__Reference_Point_TN.SearchTimeout = OrigDur;
			repo.FormMain__Reference_Point_TN.ListItemSecondsInfo.SearchTimeout = OrigDur2;
		}	
		
		//************************************************************************************//
		//***************************Enters Random Time Function 2****************************//
		//************************************************************************************//
		
		public void TF2val()
		{
			Duration OrigDur = repo.FormMain__Reference_Point_TN.SearchTimeout;
			repo.FormMain__Reference_Point_TN.SearchTimeout = 100;
			Duration OrigDur2 = repo.FormMain__Reference_Point_TN.ListItemTime_Function2Info.SearchTimeout;
			repo.FormMain__Reference_Point_TN.ListItemTime_Function2Info.SearchTimeout = 1000;

			if (repo.FormMain__Reference_Point_TN.ListItemTime_Function2Info.Exists())
			{	

					try
					{
						
						repo.FormMain__Reference_Point_TN.ListItemTime_Function2.Click("CenterLeft");
					   	Keyboard.Press(Keys.Tab);
					   	Keyboard.Press("{LMenu down}{Down}{LMenu up}");
						Ranorex.List list2 = "//list[@processname='RealView']";
			            int AScount = list2.Items.Count;
			            Random ASvalue = new Random();
						int ASnum = ASvalue.Next(1, AScount-1);
			       		repo.ListRealView.Self.Items[ASnum].Select();
			       		repo.ListRealView.Self.Items[ASnum].Click("center");
						Accessible accElement = new Accessible(repo.FormMain__Reference_Point_TN.ListItemTime_Function2);  
			   			string TF2Value = accElement.Value;
			   			ValidateTrack.ReferenceValidateTrackRegression.TF2 = TF2Value;
			   			Report.Info("Time Function 2 Value Entered = " + TF2Value);
			   			ValidateTrack.ReferenceValidateTrackRegression.TF2Flag = true;
			   			ValidateTrack.ReferenceValidateTrackRegression.TF2_OOR = false;
			   			TF2Flag = true;

					}
					catch (ArgumentOutOfRangeException e)
				    {								   			

			   				Report.Debug("List Count Out of Range for Time Function 2, List Item Will Not be Validated");
			   				Report.Debug(e.ToString());	
			   				ValidateTrack.ReferenceValidateTrackRegression.TF2_OOR = true;
			   				TF2Flag = false;
			   			
				    }
						

			//************************************************************************************//
			//***********************************Enters Hour 2************************************//
			//************************************************************************************//
	
				if (TF2Flag)
				{		
				
					repo.FormMain__Reference_Point_TN.ListItemHour2.Click("CenterLeft");
			    	Keyboard.Press(Keys.Tab);
					int HR2Val = Int32.Parse(HR1Value);
					if (HR2Val == 23)
					{
						
						HR2Val = 00;
					}
					else
					{
						
						HR2Val = HR2Val + 1;
					}
			    	
			    	string b = HR2Val.ToString();
					Keyboard.Press(b);
	   				string HR2Value = b;
	   				ValidateTrack.ReferenceValidateTrackRegression.HR2 = HR2Value;
	   				Report.Info("Hour 2 Value Entered = " + HR2Value);	
				}
		
			//************************************************************************************//
			//******************************Enters Current Minute 2*******************************//
			//************************************************************************************//
			
				if (TF2Flag)
				{	
					repo.FormMain__Reference_Point_TN.ListItemMinute2.Click("CenterLeft");
    				Keyboard.Press(Keys.Tab);
					Keyboard.Press(MN1Value);
  					ValidateTrack.ReferenceValidateTrackRegression.MN2 = MN1Value;
   					Report.Info("Minute 2 Value Entered = " + MN1Value);
				}
			}
			else
			{
				
				ValidateTrack.ReferenceValidateTrackRegression.TF2Flag = false;
			}	
			repo.FormMain__Reference_Point_TN.SearchTimeout = OrigDur;
			repo.FormMain__Reference_Point_TN.ListItemTime_Function2Info.SearchTimeout = OrigDur2;
		}		
		
		//************************************************************************************//
		//***********************Enters Random Personnel Involved*****************************//
		//************************************************************************************//
		
		public void Perval()
		{			
			Duration OrigDur = repo.FormMain__Reference_Point_TN.SearchTimeout;
			repo.FormMain__Reference_Point_TN.SearchTimeout = 100;
			Duration OrigDur2 = repo.FormMain__Reference_Point_TN.ListItemPersonnel_InvolvedInfo.SearchTimeout;
			repo.FormMain__Reference_Point_TN.ListItemPersonnel_InvolvedInfo.SearchTimeout = 1000;
			
			
			if (repo.FormMain__Reference_Point_TN.ListItemPersonnel_InvolvedInfo.Exists())
			{

					try
					{
						repo.FormMain__Reference_Point_TN.ListItemPersonnel_Involved.Click("CenterLeft");
						Keyboard.Press(Keys.Tab);
						Keyboard.Press("{LMenu down}{Down}{LMenu up}");
						Ranorex.List list2 = "//list[@processname='RealView']";
				        int AScount = list2.Items.Count;
				        Random ASvalue = new Random();
				        AScount = AScount - 1;
						int ASnum = ASvalue.Next(1, AScount-1);
						repo.ListRealView.Self.Items[ASnum].Select();
						repo.ListRealView.Self.Items[ASnum].Click("center");
						Accessible accElement = new Accessible(repo.FormMain__Reference_Point_TN.ListItemPersonnel_Involved);  
						string PerValue = accElement.Value;
						ValidateTrack.ReferenceValidateTrackRegression.Per = PerValue;
						Report.Info("Personnel Involved Value Entered = " + PerValue);
						ValidateTrack.ReferenceValidateTrackRegression.PerFlag = true;
						ValidateTrack.ReferenceValidateTrackRegression.PI_OOR = false;

					}
					catch (ArgumentOutOfRangeException e)
				    {								   			
	
			   				Report.Debug("List Count Out of Range for Personnel Involved, List Item Will Not be Validated");
			   				Report.Debug(e.ToString());	
			   				ValidateTrack.ReferenceValidateTrackRegression.PI_OOR = true;
			   			
					}   
				
			}
			else
			{
				ValidateTrack.ReferenceValidateTrackRegression.PerFlag=false;	
			}
			
			repo.FormMain__Reference_Point_TN.SearchTimeout = OrigDur;
			repo.FormMain__Reference_Point_TN.ListItemPersonnel_InvolvedInfo.SearchTimeout = OrigDur;
		}
		
		//************************************************************************************//
		//*************************Enters Random Altitude 1 value*****************************//
		//************************************************************************************//
		
		public void Alt1val()
		{
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			repo.FormMain__Reference_Point_TN.ListItemAltitude.Click("CenterLeft");
		   	Keyboard.Press(Keys.Tab);
			string b = SharedFunctions.Random(100, 102200);
			Keyboard.Press(b);
   			string Alt1Value = b;
   			Altitude1 = Int32.Parse(b);
   			Altitude1 = Altitude1 + 100;
   			Altitude2 = Altitude1.ToString();
   			ValidateTrack.ReferenceValidateTrackRegression.Alt1 = Alt1Value;
   			Report.Info("Altitude 1 Value Entered = " + Alt1Value);
		}		
		
		//************************************************************************************//
		//*************************Enters Random Altitude 2 value*****************************//
		//************************************************************************************//
		
		public void Alt2val()
		{
			repo.FormMain__Reference_Point_TN.ListItemAltitude2.Click("CenterLeft");
		   	Keyboard.Press(Keys.Tab);
			Keyboard.Press(Altitude2);
   			string Alt2Value = Altitude2;
   			ValidateTrack.ReferenceValidateTrackRegression.Alt2 = Alt2Value;
   			Report.Info("Altitude 2 Value Entered = " + Alt2Value);
		}		
				
		//************************************************************************************//
		//******************************Enters Random Hi Priority*****************************//
		//************************************************************************************//
		
		public void Hival()
		{

				try
				{
					repo.FormMain__Reference_Point_TN.ListItemHi_Priority.Click("CenterLeft");
					Keyboard.Press(Keys.Tab);
					Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List list2 = "//list[@processname='RealView']";
			        int AScount = list2.Items.Count;
			        Random ASvalue = new Random();
					int ASnum = ASvalue.Next(0, AScount-1);
					repo.ListRealView.Self.Items[ASnum].Select();
					repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormMain__Reference_Point_TN.ListItemHi_Priority);  
					string HiValue = accElement.Value;
					ValidateTrack.ReferenceValidateTrackRegression.Hi = HiValue;
					Report.Info("Hi Priority Value Entered = " + HiValue);
					ValidateTrack.ReferenceValidateTrackRegression.HiPri_OOR = true;
				
				}
				catch (ArgumentOutOfRangeException e)
				{								   			

			   			Report.Debug("List Count Out of Range for Hi Priority, List Item Will Not be Validated");
			   			Report.Debug(e.ToString());	
			   			ValidateTrack.ReferenceValidateTrackRegression.HiPri_OOR = true;
			   		
				}
		
		}				
		
		//************************************************************************************//
		//********************************Enters Random SPI***********************************//
		//************************************************************************************//
		
		public void SpecialProccessing()
		{

				try
				{
					repo.FormMain__Reference_Point_TN.ListItemSpecialProccessing.Click("CenterLeft");
					//Keyboard.Press(Keys.Tab);
					Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List list2 = "//list[@processname='RealView']";
			        int AScount = list2.Items.Count;
			        Random ASvalue = new Random();
					int ASnum = ASvalue.Next(0, AScount-1);
					repo.ListRealView.Self.Items[ASnum].Select();
				    repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormMain__Reference_Point_TN.ListItemSpecialProccessing);  
				  	string SPIValue = accElement.Value;
				  	ValidateTrack.ReferenceValidateTrackRegression.SPI = SPIValue;
				  	Report.Info("SPI Value Entered = " + SPIValue);
				  	ValidateTrack.ReferenceValidateTrackRegression.SPI_OOR = false;

				  	
				  	if (ASnum==0)
	   				{
	   					ValidateTrack.ReferenceValidateTrackRegression.SPIFlag = false;
	   				}
					else
					{
		  				ValidateTrack.ReferenceValidateTrackRegression.SPIFlag = true;
					}
				}
				catch (ArgumentOutOfRangeException e)
				{								   			

			   			Report.Debug("List Count Out of Range for SPI, List Item Will Not be Validated");
			   			Report.Debug(e.ToString());	
			   			ValidateTrack.ReferenceValidateTrackRegression.SPI_OOR = true;
			   		
				}
			
		}				
		
		//************************************************************************************//
		//*************************Enters Random Position Accurrancy**************************//
		//************************************************************************************//
		
		public void Posval()
		{		
			if (PosAccFlag)
			{

					try
					{
						repo.FormMain__Reference_Point_TN.ListItemPosition_Accuracy.Click("CenterLeft");
						Keyboard.Press(Keys.Tab);
						Keyboard.Press("{LMenu down}{Down}{LMenu up}");
						Ranorex.List list2 = "//list[@processname='RealView']";
				        int AScount = list2.Items.Count;
				        Random ASvalue = new Random();
						int ASnum = ASvalue.Next(1, AScount-1);
					    repo.ListRealView.Self.Items[ASnum].Select();
					    repo.ListRealView.Self.Items[ASnum].Click("center");
						Accessible accElement = new Accessible(repo.FormMain__Reference_Point_TN.ListItemPosition_Accuracy);  
					  	string PosValue = accElement.Value;
					  	ValidateTrack.ReferenceValidateTrackRegression.Pos = PosValue;
					  	Report.Info("Position Accurracy Value Entered = " + PosValue);
					  	ValidateTrack.ReferenceValidateTrackRegression.PosAccFlag = true;
					  	ValidateTrack.ReferenceValidateTrackRegression.PosAcc_OOR = false;

					}
					catch (ArgumentOutOfRangeException e)
					{								   			

				   			Report.Debug("List Count Out of Range for Position Accuracy, List Item Will Not be Validated");
				   			Report.Debug(e.ToString());	
				   			ValidateTrack.ReferenceValidateTrackRegression.PosAcc_OOR = true;
				   		
					}
				
			}
			else
			{
				ValidateTrack.ReferenceValidateTrackRegression.PosAccFlag = false;
			}
		}			
		
		//************************************************************************************//
		//****************************Enters Random Type of Burst*****************************//
		//************************************************************************************//
		
		public void Burstval()
		{		
			if (BurstFlag)
			{
	
					try
					{
						repo.FormMain__Reference_Point_TN.ListItemType_of_Burst.Click("CenterLeft");
						Keyboard.Press(Keys.Tab);
						Keyboard.Press("{LMenu down}{Down}{LMenu up}");
						Ranorex.List list2 = "//list[@processname='RealView']";
				        int AScount = list2.Items.Count;
				        Random ASvalue = new Random();
						int ASnum = ASvalue.Next(1, AScount-1);
					    repo.ListRealView.Self.Items[ASnum].Select();
					    repo.ListRealView.Self.Items[ASnum].Click("center");
						Accessible accElement = new Accessible(repo.FormMain__Reference_Point_TN.ListItemType_of_Burst);  
					  	string BurstValue = accElement.Value;
					  	ValidateTrack.ReferenceValidateTrackRegression.Burst = BurstValue;
					  	Report.Info("Type of Burst Value Entered = " + BurstValue);
					  	ValidateTrack.ReferenceValidateTrackRegression.BurstFlag = true;
					  	ValidateTrack.ReferenceValidateTrackRegression.Burst_OOR = false;

					}
					catch (ArgumentOutOfRangeException e)
					{								   			

				   			Report.Debug("List Count Out of Range for Type of Burst, List Item Will Not be Validated");
				   			Report.Debug(e.ToString());	
				   			ValidateTrack.ReferenceValidateTrackRegression.Burst_OOR = true;
				   	}
					
				
			}
			else
			{
				ValidateTrack.ReferenceValidateTrackRegression.BurstFlag=false;
			}
		}				
		
		//************************************************************************************//
		//***************************Enters Random Estimated Yield****************************//
		//************************************************************************************//
		
		public void Yieldval()
		{			
			if (YieldFlag)
			{

					try
					{
						repo.FormMain__Reference_Point_TN.ListItemEstimated_Yield.Click("CenterLeft");
						Keyboard.Press(Keys.Tab);
						Keyboard.Press("{LMenu down}{Down}{LMenu up}");
						Ranorex.List list2 = "//list[@processname='RealView']";
				        int AScount = list2.Items.Count;
				        Random ASvalue = new Random();
						int ASnum = ASvalue.Next(1, AScount-1);
					    repo.ListRealView.Self.Items[ASnum].Select();
					    repo.ListRealView.Self.Items[ASnum].Click("center");
						Accessible accElement = new Accessible(repo.FormMain__Reference_Point_TN.ListItemEstimated_Yield);  
					  	string YieldValue = accElement.Value;
					  	ValidateTrack.ReferenceValidateTrackRegression.Yield = YieldValue;
					  	Report.Info("Estimated Yield Value Entered = " + YieldValue);
					  	ValidateTrack.ReferenceValidateTrackRegression.YieldFlag = true;
					  	ValidateTrack.ReferenceValidateTrackRegression.EY_OOR = false;

					}
					catch (ArgumentOutOfRangeException e)
					{								   			

				   			Report.Debug("List Count Out of Range for Estimated Yield, List Item Will Not be Validated");
				   			Report.Debug(e.ToString());	
				   			ValidateTrack.ReferenceValidateTrackRegression.EY_OOR = true;
				   		
					}
				
			}
			else
			{
				ValidateTrack.ReferenceValidateTrackRegression.YieldFlag=false;
			}			
		}				
		
		//************************************************************************************//
		//***************************Enters Random AOP Major value****************************//
		//************************************************************************************//		
		
		public void AOPMajor()
		{
			if (AOPFlag)
			{
				repo.FormMain__Reference_Point_TN.ListItemAOP_Major_Axis.Click("CenterLeft");
			   	Keyboard.Press(Keys.Tab);
				Random random = new Random();
				double c = random.Next(0, 8257);
				c = c*.01;
				c=Math.Round(c, 2);
				string d = c.ToString();
				Keyboard.Press(d);
				ValidateTrack.ReferenceValidateTrackRegression.AxisMaj = d;
				Report.Info("AOP Major Axis Value Entered = " + d);		
			}
		}

		//************************************************************************************//
		//***************************Enters Random AOP Minor value****************************//
		//************************************************************************************//	
		
		public void AOPMinor()
		{
			if (AOPFlag)
			{			
				repo.FormMain__Reference_Point_TN.ListItemAOP_Minor_Axis.Click("CenterLeft");
			  	Keyboard.Press(Keys.Tab);
				Random random = new Random();
				double e = random.Next(0, 8257);
				e = e*.01;
				e=Math.Round(e, 2);
				string f = e.ToString();			
				Keyboard.Press(f);	
				ValidateTrack.ReferenceValidateTrackRegression.AxisMin = f;
				Report.Info("AOP Minor Axis Value Entered = " + f);
			}
		}	
		
		//************************************************************************************//
		//******************************Enters Random Orientation*****************************//
		//************************************************************************************//
		
		public void Orientval()
		{
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			
			if (AOPFlag)
			{
				repo.FormMain__Reference_Point_TN.ListItemAOP_Orientation.Click("CenterLeft");
			  	Keyboard.Press(Keys.Tab);
				string b = SharedFunctions.Random(1, 180);
				Keyboard.Press(b);
	   			string OrientValue = b;
	   			ValidateTrack.ReferenceValidateTrackRegression.Orient = OrientValue;
	   			Report.Info("Orientation Value Entered = " + OrientValue);
			}
		}	
		
		//************************************************************************************//
		//*************************Enters Random Circle/Square Switch*************************//
		//************************************************************************************//
		
		public void CirSqval()
		{
			if (AOPFlag)
			{

					try
					{
						repo.FormMain__Reference_Point_TN.ListItemAOP_Circle_Square_Switch.Click("center");
						Keyboard.Press(Keys.Tab);
						Keyboard.Press("{LMenu down}{Down}{LMenu up}");
						Ranorex.List list2 = "//list[@processname='RealView']";
				        int AScount = list2.Items.Count;
				        Random ASvalue = new Random();
						int ASnum = ASvalue.Next(1, AScount-1);
					    repo.ListRealView.Self.Items[ASnum].Select();
					    repo.ListRealView.Self.Items[ASnum].Click("center");
						Accessible accElement = new Accessible(repo.FormMain__Reference_Point_TN.ListItemAOP_Circle_Square_Switch);  
					  	string CirSqValue = accElement.Value;
					  	Report.Info("Circle/Square Switch Value Entered = " + CirSqValue);
					  	ValidateTrack.ReferenceValidateTrackRegression.CirSq = CirSqValue;
					  	ValidateTrack.ReferenceValidateTrackRegression.CirSqr_OOR = false;

					}
					catch (ArgumentOutOfRangeException e)
					{								   			

				   			Report.Debug("List Count Out of Range for Circle/Square Switch, List Item Will Not be Validated");
				   			Report.Debug(e.ToString());	
				   			ValidateTrack.ReferenceValidateTrackRegression.CirSqr_OOR = true;
				   		
					}
				
			}	
		}			
	
		//************************************************************************************//
		//***************************Enters Random Slave Indicator****************************//
		//************************************************************************************//
		
		public void Slaveval()
		{	
			Duration OrigDur = repo.FormMain__Reference_Point_TN.ListItemSlaved_IndicatorInfo.SearchTimeout;
			repo.FormMain__Reference_Point_TN.ListItemSlaved_IndicatorInfo.SearchTimeout = 2000;
			
			if (repo.FormMain__Reference_Point_TN.ListItemSlaved_IndicatorInfo.Exists())
			{				

					try
					{
						repo.FormMain__Reference_Point_TN.ListItemSlaved_Indicator.Click("CenterLeft");
						Keyboard.Press(Keys.Tab);
						Keyboard.Press("{LMenu down}{Down}{LMenu up}");
						Ranorex.List list2 = "//list[@processname='RealView']";
				        int AScount = list2.Items.Count;
				        Random ASvalue = new Random();
						int ASnum = ASvalue.Next(1, AScount-1);
						repo.ListRealView.Self.Items[ASnum].Select();
					    repo.ListRealView.Self.Items[ASnum].Click("center");
						Accessible accElement = new Accessible(repo.FormMain__Reference_Point_TN.ListItemSlaved_Indicator);  
					  	string SlaveValue = accElement.Value;
					  	ValidateTrack.ReferenceValidateTrackRegression.Slave = SlaveValue;
					  	Report.Info("Slave Indicator Value Entered = " + SlaveValue);
					  	ValidateTrack.ReferenceValidateTrackRegression.Slave_OOR = false;					  	

					  	
						if (ASnum == 0)
						{
							ValidateTrack.ReferenceValidateTrackRegression.SlaveFlag = false;
		   					SlaveFlag = false;
						}
						else
						{
							ValidateTrack.ReferenceValidateTrackRegression.SlaveFlag = true;
		   					SlaveFlag = true;
						}
					}
					catch (ArgumentOutOfRangeException e)
					{								   			
				   			Report.Debug("List Count Out of Range for Slave Indicator, List Item Will Not be Validated");
				   			Report.Debug(e.ToString());	
				   			ValidateTrack.ReferenceValidateTrackRegression.CirSqr_OOR = true;
				   		
					}	
				
			}					
			
			repo.FormMain__Reference_Point_TN.ListItemSlaved_IndicatorInfo.SearchTimeout = OrigDur;
		}
		
		//************************************************************************************//
		//***********************Enters Random Reference Position*****************************//
		//************************************************************************************//
		
		public void Refval()
		{
			if (SlaveFlag)
			{				

					try
					{
						repo.FormMain__Reference_Point_TN.ListItemReference_Position.Click("CenterLeft");
						Keyboard.Press("{LMenu down}{Down}{LMenu up}");
						Ranorex.List list2 = "//list[@processname='RealView']";
				        int AScount = list2.Items.Count;
				        Random ASvalue = new Random();
						int ASnum = ASvalue.Next(1, AScount-1);
					    repo.ListRealView.Self.Items[ASnum].Select();
					    repo.ListRealView.Self.Items[ASnum].Click("center");
						Accessible accElement = new Accessible(repo.FormMain__Reference_Point_TN.ListItemReference_Position);  
					  	string RefValue = accElement.Value;
					  	ValidateTrack.ReferenceValidateTrackRegression.Ref = RefValue;
					  	Report.Info("Reference Position Value Entered = " + RefValue);
					  	ValidateTrack.ReferenceValidateTrackRegression.RefPos_OOR = false;

					}
					catch (ArgumentOutOfRangeException e)
					{								   			

				   			Report.Debug("List Count Out of Range for Reference Point, List Item Will Not be Validated");
				   			Report.Debug(e.ToString());	
				   			ValidateTrack.ReferenceValidateTrackRegression.RefPos_OOR = true;
				   		
					}	
				
			}
		}		
		
		//************************************************************************************//
		//********************************Enters Related TN***********************************//
		//************************************************************************************//
		
		public void RelatedTNval()
		{
			if (SlaveFlag)
			{
				repo.FormMain__Reference_Point_TN.ListItemRelated_Track_Number.Click("CenterLeft");
			   	Keyboard.Press(Keys.Tab);
			   	Keyboard.Press(SpTrk);
	   			ValidateTrack.ReferenceValidateTrackRegression.RelatedTN = SpTrk;
	   			Report.Info("Related TN Value Entered = " + SpTrk);
			}
		}
		
		//************************************************************************************//
		//*********************************Enters Sonobuoy Info*******************************//
		//************************************************************************************//
		
		public void Sonoval()
		{		
			Duration OrigDur = repo.FormMain__Reference_Point_TN.SearchTimeout;
			repo.FormMain__Reference_Point_TN.SearchTimeout = 100;
			Duration OrigDur2 = repo.FormMain__Reference_Point_TN.ListItemSonobuoy_InfoInfo.SearchTimeout;
			repo.FormMain__Reference_Point_TN.ListItemSonobuoy_InfoInfo.SearchTimeout = 1000;
			
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();

			if (repo.FormMain__Reference_Point_TN.ListItemSonobuoy_InfoInfo.Exists())
			{				

					try
					{
						repo.FormMain__Reference_Point_TN.ListItemSonobuoy_Type.Click("CenterLeft");
					   	Keyboard.Press(Keys.Tab);
					  	Keyboard.Press("{LMenu down}{Down}{LMenu up}");
						Ranorex.List list1 = "//list[@processname='RealView']";
			            int AScount1 = list1.Items.Count;
			            Random ASvalue1 = new Random();
						int ASnum1 = ASvalue1.Next(1, AScount1);
			      		repo.ListRealView.Self.Items[ASnum1].Select();
			      		repo.ListRealView.Self.Items[ASnum1].Click("center");
						Accessible accElement1 = new Accessible(repo.FormMain__Reference_Point_TN.ListItemSonobuoy_Type);  
			  			string SonoTypeValue = accElement1.Value;
			  			ValidateTrack.ReferenceValidateTrackRegression.SonoType = SonoTypeValue;
			  			Report.Info("Sonobuoy Type Value Entered = " + SonoTypeValue);
			  			ValidateTrack.ReferenceValidateTrackRegression.Sontype_OOR = false;

					}
					catch (ArgumentOutOfRangeException e)
					{								   			

					   		Report.Debug("List Count Out of Range for Sonobuoy Type, List Item Will Not be Validated");
					   		Report.Debug(e.ToString());	
					   		ValidateTrack.ReferenceValidateTrackRegression.Sontype_OOR = true;
					   	
					}					
				
	   			
	   			//Enters Sonobuoy Pattern Type

					try
					{
						repo.FormMain__Reference_Point_TN.ListItemSonobuoy_Pattern_Type.Click("CenterLeft");
					   	Keyboard.Press(Keys.Tab);
					   	Keyboard.Press("{LMenu down}{Down}{LMenu up}");
						Ranorex.List list2 = "//list[@processname='RealView']";
			            int AScount2 = list2.Items.Count;
			            Random ASvalue2 = new Random();
						int ASnum2 = ASvalue2.Next(1, AScount2);
			      		repo.ListRealView.Self.Items[ASnum2].Select();
			      		repo.ListRealView.Self.Items[ASnum2].Click("center");
						Accessible accElement2 = new Accessible(repo.FormMain__Reference_Point_TN.ListItemSonobuoy_Pattern_Type);  
			  			string SonoPTypeValue = accElement2.Value;
			  			ValidateTrack.ReferenceValidateTrackRegression.SonoPType = SonoPTypeValue;
			  			Report.Info("Sonobuoy Pattern Type Value Entered = " + SonoPTypeValue);
			  			ValidateTrack.ReferenceValidateTrackRegression.SonPattype_OOR = false;

					}
					catch (ArgumentOutOfRangeException e)
					{								   			

					   		Report.Debug("List Count Out of Range for Sonobuoy Pattern Type, List Item Will Not be Validated");
					   		Report.Debug(e.ToString());	
					   		ValidateTrack.ReferenceValidateTrackRegression.SonPattype_OOR = true;
					   	
					}					
				
	   			
	   			//Enters Sonobuoy RF
	   			repo.FormMain__Reference_Point_TN.ListItemChannel_Number__Sonobuoy.Click("CenterLeft");
			   	Keyboard.Press(Keys.Tab);
				string b = SharedFunctions.Random(1, 128);
				Keyboard.Press(b);
	   			string SonoRFValue = b;
	   			ValidateTrack.ReferenceValidateTrackRegression.SonoRF = SonoRFValue;
	   			Report.Info("Sonobuoy RF Value Entered = " + SonoRFValue);
	
	   			//Enters Sonobuoy Pattern Radius
	   			repo.FormMain__Reference_Point_TN.ListItemSonobuoy_Pattern_Radius_.Click("CenterLeft");
			   	Keyboard.Press(Keys.Tab);
				string c = SharedFunctions.Random(1, 65536);
				Keyboard.Press(c);
	   			string SonoRadiusValue = c;
	   			ValidateTrack.ReferenceValidateTrackRegression.SonoRadius = SonoRadiusValue;
	   			Report.Info("Sonobuoy Pattern Radius Value Entered = " + SonoRadiusValue);
	   			
	   			//Enters Sonobuoy Spacing
	   			repo.FormMain__Reference_Point_TN.ListItemSonobuoy_Spacing.Click("CenterLeft");
			   	Keyboard.Press(Keys.Tab);
				string d = SharedFunctions.Random(1, 65536);
				Keyboard.Press(d);
	   			string SonoSpaceValue = d;
	   			ValidateTrack.ReferenceValidateTrackRegression.SonoSpace = SonoSpaceValue;
	   			Report.Info("Sonobuoy Spacing Value Entered = " + SonoSpaceValue);   			
	
	   			//Enters Sonobuoy Row Spacing
	   			repo.FormMain__Reference_Point_TN.ListItemSonobuoy_Row_Spacing.Click("CenterLeft");
			   	Keyboard.Press(Keys.Tab);
				string f = SharedFunctions.Random(1, 65536);
				Keyboard.Press(f);
	   			string SonoRSpaceValue = f;
	   			ValidateTrack.ReferenceValidateTrackRegression.SonoSpace = SonoRSpaceValue;
	   			Report.Info("Sonobuoy Row Spacing Value Entered = " + SonoRSpaceValue);
	
	   			//Enters Depth Indicator

					try
					{
						repo.FormMain__Reference_Point_TN.ListItemDepth_Indicator__Sonobuo.Click("CenterLeft");
					   	Keyboard.Press(Keys.Tab);
					   	Keyboard.Press("{LMenu down}{Down}{LMenu up}");
						Ranorex.List list3 = "//list[@processname='RealView']";
			            int AScount3 = list3.Items.Count;
			            Random ASvalue3 = new Random();
						int ASnum3 = ASvalue3.Next(1, AScount3);
			      		repo.ListRealView.Self.Items[ASnum3].Select();
			      		repo.ListRealView.Self.Items[ASnum3].Click("center");
						Accessible accElement3 = new Accessible(repo.FormMain__Reference_Point_TN.ListItemDepth_Indicator__Sonobuo);  
			  			string SonoDepthValue = accElement3.Value;
			  			ValidateTrack.ReferenceValidateTrackRegression.SonoDepth = SonoDepthValue;
			  			Report.Info("Depth Indicator Value Entered = " + SonoDepthValue);
			  			ValidateTrack.ReferenceValidateTrackRegression.DepInd_OOR = false;

					}
					catch (ArgumentOutOfRangeException e)
					{								   			

					   		Report.Debug("List Count Out of Range for Depth Indicator, List Item Will Not be Validated");
					   		Report.Debug(e.ToString());	
					   		ValidateTrack.ReferenceValidateTrackRegression.DepInd_OOR = true;
					   	
					}					
				
	   			
	   			//Holding Contact

					try
					{
						repo.FormMain__Reference_Point_TN.ListItemHolding_Contact.Click("CenterLeft");
					   	Keyboard.Press("{LMenu down}{Down}{LMenu up}");
						Ranorex.List list4 = "//list[@processname='RealView']";
			            int AScount4 = list4.Items.Count;
			            Random ASvalue4 = new Random();
						int ASnum4 = ASvalue4.Next(0, AScount4);
			      		repo.ListRealView.Self.Items[ASnum4].Select();
			      		repo.ListRealView.Self.Items[ASnum4].Click("center");
						Accessible accElement4 = new Accessible(repo.FormMain__Reference_Point_TN.ListItemHolding_Contact);  
			  			string HoldingValue = accElement4.Value;
			  			ValidateTrack.ReferenceValidateTrackRegression.Holding = HoldingValue;
			  			Report.Info("Holding Contact Value Entered = " + HoldingValue);
			  			ValidateTrack.ReferenceValidateTrackRegression.HoldCon_OOR = false;

					}
					catch (ArgumentOutOfRangeException e)
					{								   			

					   		Report.Debug("List Count Out of Range for Holding Contact, List Item Will Not be Validated");
					   		Report.Debug(e.ToString());	
					   		ValidateTrack.ReferenceValidateTrackRegression.HoldCon_OOR = true;
					   	
					}					
				
				
				Report.Info("Mouse Left DoubleClick item 'FormMain__Reference_Point_TN.ListItemSonobuoy_Info' at CenterLeft.");
				repo.FormMain__Reference_Point_TN.ListItemSonobuoy_Info.DoubleClick(Location.CenterLeft);
			}			
			else
			{
				ValidateTrack.ReferenceValidateTrackRegression.SonoFlag = false;
			}    
				
			repo.FormMain__Reference_Point_TN.SearchTimeout = OrigDur;
			repo.FormMain__Reference_Point_TN.ListItemSonobuoy_InfoInfo.SearchTimeout = OrigDur2;
		}		
		
		//************************************************************************************//
		//**********************************Enters TADIL TN***********************************//
		//************************************************************************************//
		
		public void TADILval()
		{
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			repo.FormMain__Reference_Point_TN.ListItemTADIL_TN.Click("CenterLeft");
		   	Keyboard.Press(Keys.Tab);
		  	string a = SharedFunctions.Random(128, 4094);
			string b = SharedFunctions.DecimalToBase(Convert.ToInt32(a), 8);
			Keyboard.Press(b);
   			string OrientValue = b;
   			ValidateTrack.ReferenceValidateTrackRegression.TADIL = b;
   			Report.Info("TADIL TN Value Entered = " + b);
		}	
		
		//************************************************************************************//
		//**********************************Enters ATDIL1 TN**********************************//
		//************************************************************************************//
		
		public void ATDL1val()
		{
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			repo.FormMain__Reference_Point_TN.ListItemATDL1_TN.Click("CenterLeft");
		   	Keyboard.Press(Keys.Tab);
		  	string a = SharedFunctions.ATDL1_TN();
			Keyboard.Press(a);
   			string OrientValue = a;
   			ValidateTrack.ReferenceValidateTrackRegression.ATDL1 = a;
   			Report.Info("ATDIL1 TN Value Entered = " + a);
		}			
		
		//************************************************************************************//
		//**********************************Enters NL1 TN**********************************//
		//************************************************************************************//
		
		public void NL1val()
		{
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			repo.FormMain__Reference_Point_TN.ListItemNL1_TN.Click("CenterLeft");
		   	Keyboard.Press(Keys.Tab);
		   	string a = SharedFunctions.NATO_TN();
			Keyboard.Press(a);
   			string OrientValue = a;
   			ValidateTrack.ReferenceValidateTrackRegression.NL1 = a;
   			Report.Info("NL1 TN Value Entered = " + a);
		}		
		
		//************************************************************************************//
		//**********************************Enters TADILJ TN**********************************//
		//************************************************************************************//
		
		public void TADILJval()
		{
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			repo.FormMain__Reference_Point_TN.ListItemTADIL_J_TN.Click("CenterLeft");
		  	Keyboard.Press(Keys.Tab);
		   	string a = SharedFunctions.Random(128, 32766);
			string b = SharedFunctions.DecimalToBase(Convert.ToInt32(a), 8);
			Keyboard.Press(b);
   			string OrientValue = b;
   			ValidateTrack.ReferenceValidateTrackRegression.TADILJ = b;
   			Report.Info("TADILJ TN Value Entered = " + b);
		}	
		
		//************************************************************************************//
		//********************************Enters External TN**********************************//
		//************************************************************************************//
		
		public void Extval()
		{
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			repo.FormMain__Reference_Point_TN.ListItemExternal_TN.Click("CenterLeft");
		   	Keyboard.Press(Keys.Tab);
		   	string a = SharedFunctions.Random(128, 32766);
			string b = SharedFunctions.DecimalToBase(Convert.ToInt32(a), 8);
			Keyboard.Press(b);
   			string OrientValue = b;
   			ValidateTrack.ReferenceValidateTrackRegression.Ext = b;
   			Report.Info("External TN Value Entered = " + b);
		}			
		
		//************************************************************************************//
		//***********************************Enters IDL TN************************************//
		//************************************************************************************//
		
		public void IDLval()
		{
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			repo.FormMainCreate.ListItemIDL_TN.Click("CenterLeft");
		    Keyboard.Press(Keys.Tab);
		    string a = SharedFunctions.IDL_TN();
			Keyboard.Press(a);
   			string OrientValue = a;
   			ValidateTrack.ReferenceValidateTrackRegression.IDL = a;
   			Report.Info("IDL TN Value Entered = " + a);
		}	
		
		//************************************************************************************//
		//*********************************Gets Track Count***********************************//
		//************************************************************************************//		
		
		public void GetTrackCount()
		{			
			Ranorex.Container cont1 = repo.FormTacViewC2.ContainerRvView;
			IList<Picture> list1 = cont1.Find<Picture>(@"/form[@title~'^TacViewC2\ \ \ \(map:\ .*']/element/container/picture[@accessiblevalue='Track']");
			TCount = list1.Count;	
		}		
		
		//************************************************************************************//
		//********************************Gets Track Number***********************************//
		//************************************************************************************//
		
		public void GetTrackNum()			
		{
		    TCount++;
		    Accessible pic1 = @"/form[@title~'^TacViewC2\ \ \ \(map:\ .*']/element/container/picture[@accessiblevalue='Track']" + "[" + TCount + "]";
   			Accessible accElement = new Accessible(pic1);  
   			string track1 = accElement.Name;
   			Report.Info("Track Number = " + track1);
   			ValidateTrack.ReferenceValidateTrackRegression.TrackNum = track1;	
   			Drop_Track.DropTrack.TrackNum = track1; 
		}

		//************************************************************************************//
		//******************************Randomly Plots a Track********************************//
		//************************************************************************************//		
		
		public void RandCoord()
		{	
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
	       	 Ranorex.Container test = @"/form[@title~'^TacViewC2\ \ \ \(map:\ .*']/element/container[@accessiblename='RvView']";
	       	 var a = test.ScreenRectangle.Width;
	       	 var b = test.ScreenRectangle.Height;
	       	 int c = Convert.ToInt32(a);
	       	 c = c - 100;
	       	 int d = Convert.ToInt32(b);
	       	 d = d - 100;
	       	 string w = SharedFunctions.Random(100, c);
	       	 string h = SharedFunctions.Random(100, d);
	    	 repo.FormTacViewC2.ContainerRvView.Click(MouseButtons.Right, "" + w + ";" + h + ""); 
	    	 
	    	Duration OrigDur = repo.FormRealView.MenuItemCreate_TrackInfo.SearchTimeout;
			repo.FormRealView.MenuItemCreate_TrackInfo.SearchTimeout = 1000;			
			
			if (repo.FormRealView.MenuItemCreate_TrackInfo.Exists())
			{
				return;
			}			
			else
			{
				RandCoord();
			}
			
			repo.FormRealView.MenuItemCreate_TrackInfo.SearchTimeout = OrigDur;
		}	
		
		//**************************************************************************************//
		//***************************Ranorex Generated Default Method***************************//
		//**************************************************************************************//		

		static ReferenceCreateTrackRegression()
		{
			//Your recording specific initialization code goes here.
		}

		//**************************************************************************************//
		//*****************************Clicks Save Button If Enabled****************************//
		//**************************************************************************************//
		
		public void Click_ButtonSave()
		{
			Duration OrigDur = repo.FormMain__Reference_Point_TN.ButtonSaveInfo.SearchTimeout;
			repo.FormMain__Reference_Point_TN.ButtonSaveInfo.SearchTimeout = 1500;
			
			if (repo.FormMain__Reference_Point_TN.ButtonSave.Enabled == true)
			{
				Report.Info("Mouse Left Click item 'FormMain__Reference_Point_TN.ButtonSave' at Center.");
				repo.FormMain__Reference_Point_TN.ButtonSave.Click();
			}
			else
			{
				Report.Debug("Save button is disabled to an error with the Reference Point Create Dialog. Please check the log report to determine the issue");
				repo.FormMain__Reference_Point_TN.ButtonCLOSE.Click();
				CreateTrack.ReferenceCreateTrackRegression.Start();
			}
			
			repo.FormMain__Reference_Point_TN.ButtonSaveInfo.SearchTimeout = OrigDur;
		}

		//**************************************************************************************//
		//*****************************Ranorex Generated Init Method****************************//
		//**************************************************************************************//
		
		private void Init()
		{
			// Your recording specific initialization code goes here.
		}
	}
}