///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;

namespace TacViewLib.LinkSpecific.Surveillance.Reference.CreateTrack
{
    public partial class CreateReferenceTrackL16_L11
    {
    	public static string PTypeValue;
		public static string AmpValue;
    	
		public static int TCount;
		
		//************************************************************************************//
		//*********************************Gets Track Count***********************************//
		//************************************************************************************//
		
		public void GetTrackCount()
		{			
			Ranorex.Container cont1 = repo.FormTacViewC2.ContainerRvView;
			IList<Picture> list1 = cont1.Find<Picture>(@"/form[@title~'^TacViewC2\ \ \ \(map:\ .*']/element/container/picture[@accessiblevalue='Track']");
			TCount = list1.Count;		    
		}			
		
		//************************************************************************************//
		//******************************Randomly Plots a Track********************************//
		//************************************************************************************//		
		
		public void RandCoord()
		{	
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			SharedFunctions.RandCoord();
		}		
		
		//************************************************************************************//
		//***************************Enters Random Point Type*********************************//
		//************************************************************************************//
		
		public void PTypeval()
		{	
//			int x = 0;
//			
//			while (x < 2)
//			{			
//				try
//				{
//					repo.FormMain__Reference_Point_TN.ListItemPoint_Type.Click("CenterLeft");
//					Keyboard.Press(Keys.Tab);
//					Keyboard.Press("{LMenu down}{Down}{LMenu up}");
//					Ranorex.List list2 = "//list[@processname='RealView']";
//			        int AScount = list2.Items.Count;
//			        Random ASvalue = new Random();
//					int ASnum = ASvalue.Next(0, AScount++);
//					repo.ListRealView.Self.Items[ASnum].Select();
//					repo.ListRealView.Self.Items[ASnum].Click("center");
//					Accessible accElement = new Accessible(repo.FormMain__Reference_Point_TN.ListItemPoint_Type);  
//					PTypeValue = accElement.Value;
//					ValidateTrack.ReferenceValidateTrackRegression.PType = PTypeValue;
//					Report.Info("Point Type Entered = " + PTypeValue);
//		   			ValidateTrack.ReferenceValidateTrackRegression.Ptype_OOR = false;
//		   			x=2;   				
//				}
//				catch (ArgumentOutOfRangeException e)
//				{								   			
//				   	x++;
//				    if (x == 1)
//				   	{
//				   		Report.Debug("List Count Out of Range for Point Type, Re-Executing Function");
//				   		Report.Debug(e.ToString());	
//				   	}
//				   	else if (x == 2)
//				   	{
//				   		Report.Debug("List Count Out of Range for Point Type, List Item Will Not be Validated");
//				   		Report.Debug(e.ToString());	
//				   		ValidateTrack.ReferenceValidateTrackRegression.Ptype_OOR = true;
//				   	}
//				}
//			}
		}
		
		//************************************************************************************//
		//**************************Enters Random Amplification*******************************//
		//************************************************************************************//
		
		public void Ampval()
		{	
//			int x = 0;
//			
//			while (x < 2)
//			{
//				try
//				{
//					repo.FormMain__Reference_Point_TN.ListItemAmplification.Click("CenterLeft");
//					Keyboard.Press(Keys.Tab);
//					Keyboard.Press("{LMenu down}{Down}{LMenu up}");
//					Ranorex.List list2 = "//list[@processname='RealView']";
//			        int AScount = list2.Items.Count;
//			        Random ASvalue = new Random();
//					int ASnum = ASvalue.Next(1, AScount++);
//					repo.ListRealView.Self.Items[ASnum].Select();
//					repo.ListRealView.Self.Items[ASnum].Click("center");
//					Accessible accElement = new Accessible(repo.FormMain__Reference_Point_TN.ListItemAmplification);  
//					AmpValue = accElement.Value;
//					ValidateTrack.ReferenceValidateTrackRegression.Amp = AmpValue;
//					Report.Info("Amplification Value Entered = " + AmpValue);
//					ValidateTrack.ReferenceValidateTrackRegression.Amp_OOR = false;
//					x=2;
//				}
//				catch (ArgumentOutOfRangeException e)
//				{								   			
//				   	x++;
//				    if (x == 1)
//				   	{
//				   		Report.Debug("List Count Out of Range for Amplification, Re-Executing Function");
//				   		Report.Debug(e.ToString());	
//				   	}
//				   	else if (x == 2)
//				   	{
//				   		Report.Debug("List Count Out of Range for Amplification, List Item Will Not be Validated");
//				   		Report.Debug(e.ToString());	
//				   		ValidateTrack.ReferenceValidateTrackRegression.Amp_OOR = true;
//				   	}
//				}
//			}
		}				
		
		//************************************************************************************//
		//*********************************Gets Track Number**********************************//
		//************************************************************************************//
		
		public void GetTrackNum()			
		{			
		    TCount++;
		    Accessible pic1 = @"/form[@title~'^TacViewC2\ \ \ \(map:\ .*']/element/container/picture[@accessiblevalue='Track']" + "[" + TCount + "]";
		    Accessible accElement = new Accessible(pic1);
			string track1 = accElement.Name;
	  		Report.Info("Track Number = " + track1);
	 		ValidateTrack.ValidateReferenceTrackL16_L11.TrackNum = track1;
	  		Drop_Track.DropTrack.TrackNum = track1;   	 
		}
		
		//**************************************************************************************//
		//*****************************Ranorex Generated Init Method****************************//
		//**************************************************************************************//
		
		private void Init()
		{
			// Your recording specific initialization code goes here.
		}
	}
}
