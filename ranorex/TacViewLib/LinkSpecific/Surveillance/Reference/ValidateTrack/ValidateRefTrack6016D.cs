///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;

namespace TacViewLib.LinkSpecific.Surveillance.Reference.ValidateTrack
{
    /// <summary>
    /// The ValidateRefTrack6016D recording.
    /// </summary>
    [TestModule("efae875b-fe54-4b3c-a93c-676b0ee522df", ModuleType.Recording, 1)]
    public partial class ValidateRefTrack6016D : ITestModule
    {
        /// <summary>
        /// Holds an instance of the TacViewLib.TacViewLibRepository repository.
        /// </summary>
        public static TacViewLib.TacViewLibRepository repo = TacViewLib.TacViewLibRepository.Instance;

        static ValidateRefTrack6016D instance = new ValidateRefTrack6016D();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public ValidateRefTrack6016D()
        {
            PtypeN = "4";
            Ptype = "Reference Point (General)";
            AmpN = "1";
            Amp = "Marshall Point";
            tracknumber = "";
            Connection1 = "";
            Connection2 = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static ValidateRefTrack6016D Instance
        {
            get { return instance; }
        }

#region Variables

        string _PtypeN;

        /// <summary>
        /// Gets or sets the value of variable PtypeN.
        /// </summary>
        [TestVariable("1738c8d6-f6c3-447c-9629-15e6496ff43c")]
        public string PtypeN
        {
            get { return _PtypeN; }
            set { _PtypeN = value; }
        }

        string _Ptype;

        /// <summary>
        /// Gets or sets the value of variable Ptype.
        /// </summary>
        [TestVariable("a6850b51-c4fc-4826-94bd-0038382cedd3")]
        public string Ptype
        {
            get { return _Ptype; }
            set { _Ptype = value; }
        }

        string _AmpN;

        /// <summary>
        /// Gets or sets the value of variable AmpN.
        /// </summary>
        [TestVariable("3d7d6b99-e631-4691-bbb2-dca86fc0c951")]
        public string AmpN
        {
            get { return _AmpN; }
            set { _AmpN = value; }
        }

        string _Amp;

        /// <summary>
        /// Gets or sets the value of variable Amp.
        /// </summary>
        [TestVariable("f493f50a-222b-468a-ac3d-af7ce55a7a6b")]
        public string Amp
        {
            get { return _Amp; }
            set { _Amp = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable tracknumber.
        /// </summary>
        [TestVariable("5cfcb8c4-9786-4396-b8a7-d4d83b6a3640")]
        public string tracknumber
        {
            get { return repo.tracknumber; }
            set { repo.tracknumber = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Connection1.
        /// </summary>
        [TestVariable("2b0ee20a-ddbe-471b-9131-db9fa65461d1")]
        public string Connection1
        {
            get { return repo.Connection1; }
            set { repo.Connection1 = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Connection2.
        /// </summary>
        [TestVariable("1e4535e0-3098-4732-8980-bf2504ec3f23")]
        public string Connection2
        {
            get { return repo.Connection2; }
            set { repo.Connection2 = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "3.1.1")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "3.1.1")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 250;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.0;

            Init();

            SetTrackNumberInRepo();
            Delay.Milliseconds(0);
            
            RightClickTrack();
            Delay.Milliseconds(0);
            
            ViewTrackProperties();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 2000ms.", new RecordItemIndex(3));
            Delay.Duration(2000, false);
            
            ValidatePtype();
            Delay.Milliseconds(0);
            
            ValidateAmp();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FormMain__Reference_Point_TN.ButtonCLOSE' at Center.", repo.FormMain__Reference_Point_TN.ButtonCLOSEInfo, new RecordItemIndex(6));
            repo.FormMain__Reference_Point_TN.ButtonCLOSE.Click();
            Delay.Milliseconds(0);
            
            RightClickTrack();
            Delay.Milliseconds(0);
            
            DropTrack();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 2000ms.", new RecordItemIndex(9));
            Delay.Duration(2000, false);
            
        }

#region Image Feature Data
#endregion
    }
}
