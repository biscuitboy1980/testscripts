///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using System.Windows.Forms;

using Ranorex;
using Ranorex.Core;

namespace TacViewLib.LinkSpecific.Surveillance.Reference.ValidateTrack
{
	/// <summary>
	/// The ValidateTrackTOAD2 recording.
	/// </summary>

	public partial class ValidateRefTrack6016D
	{
		
		public static string EnvCatN;
		public static string EnvCat;
		public static string ECAmpN;
		public static string ECAmp;
		public static string SpTrk;
		public static bool PointFlag;
		public static bool AmpFlag;
		public static bool EnvCatFlag;
		public static bool EnvCatAmpFlag;
		public static string TrackNum;
		public static bool ZoomFlag;
		
		//************************************************************************************//
		//*****************************Sets Track Number in Repo******************************//
		//************************************************************************************//
				
		public void SetTrackNumberInRepo()
		{
			tracknumber = TrackNum;	
			Report.Info("setting tracknumber to " + tracknumber);
		}

		//************************************************************************************//
		//*******************************Right Clicks on Track********************************//
		//************************************************************************************//				
				
		public void RightClickTrack()
		{			
			Duration OrigDur = repo.FormTacViewC2.PictureTrackInfo.SearchTimeout;
			repo.FormTacViewC2.PictureTrackInfo.SearchTimeout = 2000;			
			
			if (repo.FormTacViewC2.PictureTrackInfo.Exists())
			{
				Report.Info("Mouse Right Click item 'FormTacViewC2.PictureTrack' at Center.");
				repo.FormTacViewC2.PictureTrack.Click(MouseButtons.Right);
			}
			else
			{
				ZoomFlag = true;
				Report.Info("Track # " + TrackNum + " not found on the current display, going to world wide view");
				Report.Screenshot();
				repo.FormTacViewC2.ButtonZoom_Out_Max.Click();
				
				if (repo.FormTacViewC2.PictureTrackInfo.Exists())
				{
					Report.Info("Mouse Right Click item 'FormTacViewC2.PictureTrack' at Center.");
					repo.FormTacViewC2.PictureTrack.Click(MouseButtons.Right);
				}
				else
				{
					Report.Error("Unable to find Track # " + TrackNum + " anywhere in the world");
					Report.Screenshot();
					return;
				}				
			}
			
			repo.FormTacViewC2.PictureTrackInfo.SearchTimeout = OrigDur;
		}	
		
		//************************************************************************************//
		//********************Opens Track Dialog For Corresponding Track**********************//
		//************************************************************************************//
				
		public void ViewTrackProperties()
		{			
			Duration OrigDur = repo.FormRealView.MenuItemTracksInfo.SearchTimeout;
			repo.FormRealView.MenuItemTracksInfo.SearchTimeout = 1000;
			Duration OrigDur1 = repo.FormRealView.MenuItemTrackNumber2Info.SearchTimeout;
			repo.FormRealView.MenuItemTrackNumber2Info.SearchTimeout = 1000;			
			
			if (repo.FormRealView.MenuItemTracksInfo.Exists())
			{
				Report.Info("Mouse Left Click item 'FormRealView.MenuItemTracks'");
			    repo.FormRealView.MenuItemTracks.Click();
			    Report.Info("Mouse Left Click item 'FormTracks.MenuItemC2_HOST_2_Track'");
		        repo.FormTracks.MenuItemConnection2_Track.Click();
		       	Report.Info("Mouse Left Click item 'FormTOAD2.MenuItemTrack_Properties");
				repo.FormConnection2.MenuItemTrack_Properties.Click();
			}			
			else if (repo.FormRealView.MenuItemTrackNumber2Info.Exists())
			{
			    Report.Info("Mouse Left Click item 'repo.FormRealView.MenuItemTrackNumber2'");
		        repo.FormRealView.MenuItemTrackNumber2.Click();
		       	Report.Info("Mouse Left Click item 'FormTOAD2.MenuItemTrack_Properties");
				repo.FormConnection2.MenuItemTrack_Properties.Click();
			}
			
			repo.FormRealView.MenuItemTracksInfo.SearchTimeout = OrigDur;
			repo.FormRealView.MenuItemTrackNumber2Info.SearchTimeout = OrigDur1;
		}		

		//************************************************************************************//
		//*******************Validates Point Type value from csv file*************************//
		//************************************************************************************//
		
		public void ValidatePtype()
		{
			if (!PointFlag)
			{			
				Report.Info("Validating Accessible Value Equals (AccessibleValue='Hazard') on item 'FormMain__Reference_Point_TN.ListItemPoint_Type'.");
				Report.Info("Point Type Value Selected = " + Ptype + "-" + PtypeN);
				Validate.Attribute(repo.FormMain__Reference_Point_TN.ListItemPoint_TypeInfo, "AccessibleValue", Ptype, Validate.DefaultMessage, false);
			}
			else
			{
				Report.Info("Validating Accessible Value Equals (AccessibleValue='Hazard') on item 'FormMain__Reference_Point_TN.ListItemPoint_Type'.");
				Report.Info("CSV Value = " + Ptype + "-" + PtypeN);				
				Report.Error("Value " + Ptype + "-" + PtypeN + " Does Not Exist for Point Type Field, Selecting 1st Item Available");
			}
		}

		//************************************************************************************//
		//*******************Validates Amplification value from csv file**********************//
		//************************************************************************************//
		
		public void ValidateAmp()
		{
			if (!AmpFlag)
			{						
				Report.Info("Validating AttributeEqual (AccessibleValue='Missile Launch') on item 'FormMain__Reference_Point_TN.ListItemAmplification'.");
				Report.Info("Amplification Value Selected = " + Amp + "-" + AmpN);
				Validate.Attribute(repo.FormMain__Reference_Point_TN.ListItemAmplificationInfo, "AccessibleValue", Amp, Validate.DefaultMessage, false);
			}
			else
			{
				Report.Info("Validating AttributeEqual (AccessibleValue='Missile Launch') on item 'FormMain__Reference_Point_TN.ListItemAmplification'.");
				Report.Info("CSV Value = " + Amp + "-" + AmpN);				
				Report.Error("Value " + Amp + "-" + AmpN + " Does Not Exist for Amplication Field, Selecting 1st Item Available");
			}
		}

		//************************************************************************************//
		//******************Validates Environ/Category value from csv file********************//
		//************************************************************************************//		
		
		public void ValidateEnvironCat()
		{
			if (!EnvCatFlag)
			{			
				Report.Info("Validating AttributeEqual (AccessibleValue='Space') on item 'FormMain__Reference_Point_TN.ListItemEnviron_Category'.");
				Report.Info("Environment Category Value Selected = " + EnvCat + "-" + EnvCatN);
				Validate.Attribute(repo.FormMain__Reference_Point_TN.ListItemEnviron_CategoryInfo, "AccessibleValue", EnvCat, Validate.DefaultMessage, false);
			}
			else
			{
				Report.Info("Validating AttributeEqual (AccessibleValue='Space') on item 'FormMain__Reference_Point_TN.ListItemEnviron_Category'.");
				Report.Info("CSV Value = " + EnvCat + "-" + EnvCatN);			
				Report.Error("Value " + EnvCat + "-" + EnvCatN + " Does Not Exist for Environment/Category Field, Selecting 1st Item Available");
			}
		}

		//************************************************************************************//
		//***********Validates Environ/Category Amplification value from csv file*************//
		//************************************************************************************//
		
		public void ValidateEnvironCatAmp()
		{
			if (!EnvCatAmpFlag)
			{						
				Report.Info("Validating AttributeEqual (AccessibleValue='WARHEAD') on item 'FormMain__Reference_Point_TN.ListItemEnviron_Category_Amplifi'.");
				Report.Info("Environment Catefgory Amplification Value Selected = " + ECAmp + "-" + ECAmpN);
				Validate.Attribute(repo.FormMain__Reference_Point_TN.ListItemEnviron_Category_AmplifiInfo, "AccessibleValue", ECAmp, Validate.DefaultMessage, false);
			}
			else
			{
				Report.Info("Validating AttributeEqual (AccessibleValue='WARHEAD') on item 'FormMain__Reference_Point_TN.ListItemEnviron_Category_Amplifi'.");
				Report.Info("CSV Value = " + ECAmp + "-" + ECAmpN);				
				Report.Error("Value " + ECAmp + "-" + ECAmpN + " Does Not Exist for Environment/Category Amplification Field, Selecting 1st Item Available");
			}
		}
		
		//**************************************************************************************//
		//*****************************Ranorex Generated Init Method****************************//
		//**************************************************************************************//		

		private void Init()
		{
			// Your recording specific initialization code goes here.
		}

		//************************************************************************************//
		//****************************Drops Corresponding Track*******************************//
		//************************************************************************************//
		
		public void DropTrack()
		{		
			Drop_Track.DropTrack.Instance.Connection1 = Connection1;
			Drop_Track.DropTrack.Start();
		}			
	}
}
