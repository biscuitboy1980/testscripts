///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using System.Windows.Forms;

using CommonUtilLib;
using Ranorex;
using Ranorex.Core;

namespace TacViewLib.LinkSpecific.Surveillance.Reference.ValidateTrack
{
	/// <summary>
	/// The ValidateTrackRegression recording.
	/// </summary>

	public partial class ReferenceValidateTrackRegression
	{
		public static string SpTrk = CreateTrack.CreateSpaceTrack6016D.track1;
		public static bool ZoomFlag;
		
		//Basic Info
		public static string PType;
		public static string Amp;
		public static string EC;
		public static string ECAmp;
		public static string AC;
		public static string TF1;
		public static string HR1;
		public static string MN1;
		public static string SE;
		public static string TF2;
		public static string HR2;
		public static string MN2;
		public static string SE2;
		public static string Per;
		
		public static bool ECFlag;		
		public static bool ECAmpFlag;		
		public static bool ACFlag;		
		public static bool TF1Flag;	
		public static bool SEFlag;
		public static bool TF2Flag;					
		public static bool PerFlag;
		
		//Position & Velocity
		public static string Alt1;
		public static string Alt2;
		
		public static bool AltFlag;
		
		//Interface Info
		public static string Hi;	
		public static bool HiFlag;
		
		//Indicators
		public static string SPI;	
		
		public static bool SPIFlag;
		
		//Reference Point Info
		public static string Pos;
		public static string Burst;
		public static string Yield;
		public static string AxisMaj;
		public static string AxisMin;
		public static string Orient;
		public static string CirSq;
		
		public static bool AOPFlag;
		public static bool BurstFlag;
		public static bool YieldFlag;
		public static bool PosAccFlag;
		
		//Related Track Info
		public static string Slave;
		public static string Ref;
		public static string RelatedTN;
		
		public static bool SlaveFlag;
		
		//Other TNs
		public static string IDL;
		public static string TADIL;
		public static string ATDL1;
		public static string NL1;
		public static string TADILJ;
		public static string Ext;
		
		//Sonobouy Info
		public static string SonoType;
		public static string SonoPType;
		public static string SonoRF;
		public static string SonoRadius;
		public static string SonoSpace;
		public static string SonoRSpace;
		public static string SonoDepth;
		public static string Holding;
		
		public static bool SonoFlag;
		
		//Out of Range Flags
		public static bool Ptype_OOR;
		public static bool Amp_OOR;
		public static bool EnvCat_OOR;
		public static bool EnvCatAmp_OOR;
		public static bool AmpCon_OOR;
		public static bool TF1_OOR;
		public static bool TF2_OOR;
		public static bool PI_OOR;
		public static bool HiPri_OOR;
		public static bool SPI_OOR;
		public static bool PosAcc_OOR;
		public static bool Burst_OOR;
		public static bool EY_OOR;
		public static bool CirSqr_OOR;
		public static bool Slave_OOR;
		public static bool RefPos_OOR;
		public static bool Sontype_OOR;
		public static bool SonPattype_OOR;
		public static bool DepInd_OOR;
		public static bool HoldCon_OOR;
		
		public static string TrackNum;
		
		//************************************************************************************//
		//***************************Validates Point Type Value*******************************//
		//************************************************************************************//
				
		public void ValidatePtype()
		{
			bool Defect = false;
					
			if (Defect == false)
			{
			
				if (!Ptype_OOR)
				{
					Report.Info("Validating AttributeEqual (Text='(Point Type)') on item 'FormMain__Reference_Point_TN.ListItemPoint_Type'.");
					Report.Info("Value Entered = " + PType);
					Validate.Attribute(repo.FormMain__Reference_Point_TN.ListItemPoint_TypeInfo, "AccessibleValue", PType, Validate.DefaultMessage, false);
				}
			}
				
			else
			{
				Report.Debug("Altitude 2 field is currently not functioning and is written up in R-02142");
			}
		}
		
		//************************************************************************************//
		//**************************Validates Amplification Value*****************************//
		//************************************************************************************//
				
		public void ValidateAmp()
		{
			if (!Amp_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(Amplification)') on item 'FormMain__Reference_Point_TN.ListItemAmplification'.");
				Report.Info("Value Entered = " + Amp);
				Validate.Attribute(repo.FormMain__Reference_Point_TN.ListItemAmplificationInfo, "AccessibleValue", Amp, Validate.DefaultMessage, false);
			}
		}
		
		//************************************************************************************//
		//*************************Validates Environ/Category Value***************************//
		//************************************************************************************//
				
		public void ValidateEnvCat()
		{
			if (ECFlag && !EnvCat_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(Environ/Category)') on item 'FormMain__Reference_Point_TN.ListItemAmplification'.");
				Report.Info("Value Entered = " + EC);
				Validate.Attribute(repo.FormMain__Reference_Point_TN.ListItemEnviron_CategoryInfo, "AccessibleValue", EC, Validate.DefaultMessage, false);
			}
		}		

		//************************************************************************************//
		//******************Validates Environ/Category Amplification Value********************//
		//************************************************************************************//
				
		public void ValidateEnvCatAmp()
		{
			if (ECAmpFlag && !EnvCatAmp_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(Environ/Category Amplification)') on item 'FormMain__Reference_Point_TN.ListItemEnviron_Category_Amplifi'.");
				Report.Info("Value Entered = " + ECAmp);
				Validate.Attribute(repo.FormMain__Reference_Point_TN.ListItemEnviron_Category_AmplifiInfo, "AccessibleValue", ECAmp, Validate.DefaultMessage, false);
			}
		}	
		
		//************************************************************************************//
		//**********************Validates Amplification Confidence Value**********************//
		//************************************************************************************//
				
		public void ValidateAmpCon()
		{
			if (ACFlag && !AmpCon_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(Amplification Confidence)') on item 'FormMain__Reference_Point_TN.ListItemAmplification_Confidence'.");
				Report.Info("Value Entered = " + AC);
				Validate.Attribute(repo.FormMain__Reference_Point_TN.ListItemAmplification_ConfidenceInfo, "AccessibleValue", AC, Validate.DefaultMessage, false);
			}
		}		
		
		//************************************************************************************//
		//***************************Validates Time Function Value****************************//
		//************************************************************************************//
				
		public void ValidateTF1()
		{
			if (TF1Flag && !TF1_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(Time Function)') on item 'FormMain__Reference_Point_TN.ListItemTime_Function'.");
				Report.Info("Value Entered = " + TF1);
				Validate.Attribute(repo.FormMain__Reference_Point_TN.ListItemTime_Function1Info, "AccessibleValue", TF1, Validate.DefaultMessage, false);
				
				// Validates Hour
				Report.Info("Validating AttributeEqual (Text='(Hour)') on item 'FormMain__Reference_Point_TN.ListItemHour'.");
				Report.Info("Value Entered = " + HR1);
				Validate.Attribute(repo.FormMain__Reference_Point_TN.ListItemHour1Info, "AccessibleValue", HR1, Validate.DefaultMessage, false);
				
				// Validates Minute
				Report.Info("Validating AttributeEqual (Text='(Minute)') on item 'FormMain__Reference_Point_TN.ListItemMinute'.");
				Report.Info("Value Entered = " + MN1);
				Validate.Attribute(repo.FormMain__Reference_Point_TN.ListItemMinute1Info, "AccessibleValue", MN1, Validate.DefaultMessage, false);
			}
		}			
		
		//************************************************************************************//
		//*******************************Validates Seconds Value******************************//
		//************************************************************************************//
				
		public void ValidateSE()
		{
			if (SEFlag)
			{
				Report.Info("Validating AttributeEqual (Text='(Seconds)') on item 'FormMain__Reference_Point_TN.ListItemSeconds'.");
				Report.Info("Value Entered = " + SE);
				Validate.Attribute(repo.FormMain__Reference_Point_TN.ListItemSecondsInfo, "AccessibleValue", SE, Validate.DefaultMessage, false);
			}
		}	
		
		//************************************************************************************//
		//***************************Validates Time Function2 Value***************************//
		//************************************************************************************//
				
		public void ValidateTF2()
		{
			if (TF2Flag)
			{
				Report.Info("Validating AttributeEqual (Text='(Time Function2)') on item 'FormMain__Reference_Point_TN.ListItemTime_Function2'.");
				Report.Info("Value Entered = " + TF2);
				Validate.Attribute(repo.FormMain__Reference_Point_TN.ListItemTime_Function2Info, "AccessibleValue", TF2, Validate.DefaultMessage, false);
				
	 			// Validates Hour
				Report.Info("Validating AttributeEqual (Text='(Hour2)') on item 'FormMain__Reference_Point_TN.ListItemHour2'.");
				Report.Info("Value Entered = " + HR2);
				Validate.Attribute(repo.FormMain__Reference_Point_TN.ListItemHour2Info, "AccessibleValue", HR2, Validate.DefaultMessage, false);
				
	 			// Validates Minute
				Report.Info("Validating AttributeEqual (Text='(Minute2)') on item 'FormMain__Reference_Point_TN.ListItemMinute2'.");
				Report.Info("Value Entered = " + MN2);
				Validate.Attribute(repo.FormMain__Reference_Point_TN.ListItemMinute2Info, "AccessibleValue", MN2, Validate.DefaultMessage, false);
			}
		}			
		
		//************************************************************************************//
		//************************Validates Personnel Involved Value**************************//
		//************************************************************************************//
				
		public void ValidatePer()
		{
			if (PerFlag && !PI_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(Personnel Involved)') on item 'FormMain__Reference_Point_TN.ListItemPersonnel_Involved'.");
				Report.Info("Value Entered = " + Per);
				Validate.Attribute(repo.FormMain__Reference_Point_TN.ListItemPersonnel_InvolvedInfo, "AccessibleValue", Per, Validate.DefaultMessage, false);
			}
		}			
		
		//************************************************************************************//
		//****************************Validates Altitude1 Value*******************************//
		//************************************************************************************//
				
		public void ValidateAlt1()
		{
			Accessible accElement = new Accessible(repo.FormMain__Reference_Point_TN.ListItemAltitude);
			string RxAlt1= accElement.Value;
			
			if (RxAlt1 == "UNKNOWN")
			{
				Report.Info("Validating AttributeEqual (Text='(Altitude)') on item 'repo.FormMain__Reference_Point_TN.ListItemAltitude'.");
				Report.Info("Value Entered = " + Alt1);
				Report.Info("Value Received = " + RxAlt1);
				Report.Info("Allowable Deviation = +/- 100 Units");
				Report.Debug("Altitude 1 field has been received as 'UNKNOWN'. This is currently a known issue.");
			}
			else
			{
				Report.Info("Validating AttributeEqual (Text='(Altitude)') on item 'repo.FormMain__Reference_Point_TN.ListItemAltitude'.");
				Report.Info("Value Entered = " + Alt1);
				Report.Info("Value Received = " + RxAlt1);
				Report.Info("Allowable Deviation = +/- 100 Units");
				Validate.IsTrue((Convert.ToInt32(RxAlt1) > Convert.ToInt32(Alt1) - 100) && (Convert.ToInt32(RxAlt1) < Convert.ToInt32(Alt1) + 100), Validate.DefaultMessage, false);
			}
		}		
		
		//************************************************************************************//
		//****************************Validates Altitude2 Value*******************************//
		//************************************************************************************//
				
		public void ValidateAlt2()
		{	
			bool Defect = false;
			
			//****Setting to true, open defect***//
			Defect = true;			
			
			if (Defect == false)
			{			
				Accessible accElement = new Accessible(repo.FormMain__Reference_Point_TN.ListItemAltitude2);
				string RxAlt2= accElement.Value;
			
 				if (RxAlt2 == "UNKNOWN")
				{
					Report.Info("Validating AttributeEqual (Text='(Altitude 2)') on item 'repo.FormMain__Reference_Point_TN.ListItemAltitude2'.");
					Report.Info("Value Entered = " + Alt2);
					Report.Info("Value Received = " + RxAlt2);
					Report.Info("Allowable Deviation = +/- 100 Units");
					Validate.Attribute(repo.FormMain__Reference_Point_TN.ListItemAltitude2Info, "AccessibleValue", Alt2, Validate.DefaultMessage, false);
				}
				else
				{
					Report.Info("Validating AttributeEqual (Text='(Altitude 2)') on item 'repo.FormMain__Reference_Point_TN.ListItemAltitude2'.");
					Report.Info("Value Entered = " + Alt2);
					Report.Info("Value Received = " + RxAlt2);
					Report.Info("Allowable Deviation = +/- 100 Units");
					Validate.IsTrue((Convert.ToInt32(RxAlt2) > Convert.ToInt32(Alt2) - 100) && (Convert.ToInt32(RxAlt2) < Convert.ToInt32(Alt2) + 100), Validate.DefaultMessage, false);
				}
			}			
			else
			{
				Report.Debug("Altitude 2 field is currently not functioning and is written up in R-02142");
			}			
		}
		
		//************************************************************************************//
		//*******************************Validates SPI Value**********************************//
		//************************************************************************************//
				
		public void ValidateHiPriority()
		{			
			if (!HiPri_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(Hi Priority)') on item 'FormMain__Reference_Point_TN.ListItemHi_PriorityInfo'.");
				Report.Info("Value Entered = " + Hi);
				Report.Info("Hi Priority is a local value and will not be validated on the remote interface");
				//Validate.Attribute(repo.FormMain__Reference_Point_TN.ListItemHi_PriorityInfo, "AccessibleValue", Hi, Validate.DefaultMessage, false);
			}
		}			
		
		//************************************************************************************//
		//*******************************Validates SPI Value**********************************//
		//************************************************************************************//
				
		public void ValidateSPI()
		{
			if (SPIFlag && !SPI_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(SPI)') on item 'FormMain__Reference_Point_TN.ListItemSPI'.");
				Report.Info("Value Entered = " + SPI);
				Validate.Attribute(repo.FormMain__Reference_Point_TN.ListItemSpecialProccessingInfo, "AccessibleValue", SPI, Validate.DefaultMessage, false);
			}
		}	
		
		//************************************************************************************//
		//*************************Validates Position Accurracy Value*************************//
		//************************************************************************************//
				
		public void ValidatePos()
		{
			if (PosAccFlag && !PosAcc_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(Position Accurracy)') on item 'FormMain__Reference_Point_TN.ListItemPosition_Accuracy'.");
				Report.Info("Value Entered = " + Pos);
				Validate.Attribute(repo.FormMain__Reference_Point_TN.ListItemPosition_AccuracyInfo, "AccessibleValue", Pos, Validate.DefaultMessage, false);
			}
		}			
		
		//************************************************************************************//
		//***************************Validates Type of Burst Value****************************//
		//************************************************************************************//
				
		public void ValidateBurst()
		{
			if (BurstFlag && !Burst_OOR)
			{			
				Report.Info("Validating AttributeEqual (Text='(Type of Burst)') on item 'FormMain__Reference_Point_TN.ListItemType_of_Burst'.");
				Report.Info("Value Entered = " + Burst);
				Validate.Attribute(repo.FormMain__Reference_Point_TN.ListItemType_of_BurstInfo, "AccessibleValue", Burst, Validate.DefaultMessage, false);
			}
		}			
	
		//************************************************************************************//
		//*************************Validates Yield Estimate Value*****************************//
		//************************************************************************************//
				
		public void ValidateYield()
		{
			if (YieldFlag && !EY_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(Yield Estimate)') on item 'FormMain__Reference_Point_TN.ListItemEstimated_Yield'.");
				Report.Info("Value Entered = " + Yield);
				Validate.Attribute(repo.FormMain__Reference_Point_TN.ListItemEstimated_YieldInfo, "AccessibleValue", Yield, Validate.DefaultMessage, false);
			}
		}		
		
		//************************************************************************************//
		//*******************************Validates AOP Major Value****************************//
		//************************************************************************************//
				
		public void ValidateAOPMaj()
		{
			if (AOPFlag)
			{			
				Report.Info("Validating AttributeEqual (Text='(AOP Major)') on item 'FormMain__Reference_Point_TN.ListItemAOP_Major_Axis'.");
				Report.Info("Value Entered = " + AxisMaj);
				Validate.Attribute(repo.FormMain__Reference_Point_TN.ListItemAOP_Major_AxisInfo, "AccessibleValue", AxisMaj, Validate.DefaultMessage, false);
			}
		}	
		
		//************************************************************************************//
		//*******************************Validates AOP Minor Value****************************//
		//************************************************************************************//
				
		public void ValidateAOPMin()
		{
			if (AOPFlag)
			{			
				Report.Info("Validating AttributeEqual (Text='(AOP Minor)') on item 'FormMain__Reference_Point_TN.ListItemAOP_Minor_Axis'.");
				Report.Info("Value Entered = " + AxisMin);
				Validate.Attribute(repo.FormMain__Reference_Point_TN.ListItemAOP_Minor_AxisInfo, "AccessibleValue", AxisMin, Validate.DefaultMessage, false);
			}
		}			
		
		//************************************************************************************//
		//*****************************Validates Orientation Value****************************//
		//************************************************************************************//
				
		public void ValidateOrient()
		{
			if (AOPFlag)
			{			
				Report.Info("Validating AttributeEqual (Text='(Orientation)') on item 'FormMain__Reference_Point_TN.ListItemAOP_Orientation'.");
				Report.Info("Value Entered = " + Orient);
				Validate.Attribute(repo.FormMain__Reference_Point_TN.ListItemAOP_OrientationInfo, "AccessibleValue", Orient, Validate.DefaultMessage, false);
			}
		}		
		
		//************************************************************************************//
		//****************************Validates Circle/Square Value***************************//
		//************************************************************************************//
				
		public void ValidateCirSq()
		{
			if (AOPFlag && !CirSqr_OOR)
			{			
				Report.Info("Validating AttributeEqual (Text='(Circle/Square)') on item 'FormMain__Reference_Point_TN.ListItemAOP_Circle_Square_Switch'.");
				Report.Info("Value Entered = " + CirSq);
				Validate.Attribute(repo.FormMain__Reference_Point_TN.ListItemAOP_Circle_Square_SwitchInfo, "AccessibleValue", CirSq, Validate.DefaultMessage, false);
			}
		}			
		
		//************************************************************************************//
		//********************************Validates Slave Value*******************************//
		//************************************************************************************//
				
		public void ValidateSlave()
		{			
			bool Defect = false;
			
			//****Setting to true, open defect***//
			
			Defect = true;			
			
			if (Defect == false)
			{
				if (SlaveFlag && !Slave_OOR)
				{
					Report.Info("Validating AttributeEqual (Text='(Slave)') on item 'FormMain__Reference_Point_TN.ListItemSlaved_Indicator'.");
					Report.Info("Value Entered = " + Slave);
					Validate.Attribute(repo.FormMain__Reference_Point_TN.ListItemSlaved_IndicatorInfo, "AccessibleValue", Slave, Validate.DefaultMessage, false);
				}
				else
				{
					Report.Debug("Slave Indicator is currently not functioning and is written up in D-02469");
				}	
			}
		}		

		//************************************************************************************//
		//************************Validates Reference Position Value**************************//
		//************************************************************************************//
				
		public void ValidateRef()
		{			
			bool Defect = false;
			
			//****Setting to true, open defect***//
			
			Defect = true;			
			
			if (Defect == false)
			{			
				if (SlaveFlag && !RefPos_OOR)
				{
					Report.Info("Validating AttributeEqual (Text='(Reference Position)') on item 'FormMain__Reference_Point_TN.ListItemReference_Position'.");
					Report.Info("Value Entered = " + Ref);
					Validate.Attribute(repo.FormMain__Reference_Point_TN.ListItemReference_PositionInfo, "AccessibleValue", Ref, Validate.DefaultMessage, false);
				}
				else
				{
					Report.Debug("Reference Position is currently not functioning and is written up in D-04424");
				}	
			}
		}
		
		//************************************************************************************//
		//******************************Validates Related TN Value****************************//
		//************************************************************************************//
				
		public void ValidateRelatedTN()
		{
			bool Defect = false;
			
			//****Setting to true, open defect***//
			
			Defect = true;
			
			if (Defect == false)
			{
				if (SlaveFlag)
				{
					Report.Info("Validating AttributeEqual (Text='(Related TN)') on item 'FormMain__Reference_Point_TN.ListItemRelated_Track_Number'.");
					Report.Info("Value Entered = " + RelatedTN);
					Validate.Attribute(repo.FormMain__Reference_Point_TN.ListItemRelated_Track_NumberInfo, "AccessibleValue", RelatedTN, Validate.DefaultMessage, false);
				}
				else
				{
					Report.Debug("Related Track Number is currently not functioning and is written up in D-04424");
				}	
			}
		}	
		
		//************************************************************************************//
		//*****************************Validates Sonobouy Values******************************//
		//************************************************************************************//
				
		public void ValidateSono()
		{
			if (SonoFlag)
			{				
				Report.Info("Mouse Left DoubleClick item 'FormMainCreate.ListItemSonobuoy_Info' at CenterLeft.");
				repo.FormMain__Reference_Point_TN.ListItemSonobuoy_Info.DoubleClick(Location.CenterLeft);		
					
				//Sonobuoy Type
				if (!Sontype_OOR)
				{
					Report.Info("Validating AttributeEqual (Text='(Sonobuoy Type)') on item 'FormMain__Reference_Point_TN.ListItemSonobuoy_Type'.");
					Report.Info("Value Entered = " + SonoType);
					Validate.Attribute(repo.FormMain__Reference_Point_TN.ListItemSonobuoy_TypeInfo, "AccessibleValue", SonoType, Validate.DefaultMessage, false);
				}
			
				//Sonobuoy Pattern Type
				if (!SonPattype_OOR)
				{
					Report.Info("Validating AttributeEqual (Text='(Sonobuoy Pattern Type)') on item 'FormMain__Reference_Point_TN.ListItemSonobuoy_Pattern_Type'.");
					Report.Info("Value Entered = " + SonoPType);
					Validate.Attribute(repo.FormMain__Reference_Point_TN.ListItemSonobuoy_Pattern_TypeInfo, "AccessibleValue", SonoPType, Validate.DefaultMessage, false);
				}
				
				//Sonobuoy RF
				Report.Info("Validating AttributeEqual (Text='(Sonobuoy RF)') on item 'FormMain__Reference_Point_TN.ListItemChannel_Number__Sonobuoy'.");
				Report.Info("Value Entered = " + SonoRF);
				Validate.Attribute(repo.FormMain__Reference_Point_TN.ListItemChannel_Number__SonobuoyInfo, "AccessibleValue", SonoRF, Validate.DefaultMessage, false);
				
				//Sonobuoy Pattern Radius
				Report.Info("Validating AttributeEqual (Text='(Sonobuoy Pattern Radius)') on item 'FormMain__Reference_Point_TN.ListItemSonobuoy_Pattern_Radius_'.");
				Report.Info("Value Entered = " + SonoRadius);
				Validate.Attribute(repo.FormMain__Reference_Point_TN.ListItemSonobuoy_Pattern_Radius_Info, "AccessibleValue", SonoRadius, Validate.DefaultMessage, false);
				
				//Sonobuoy Spacing
				Report.Info("Validating AttributeEqual (Text='(Sonobuoy Spacing)') on item 'FormMain__Reference_Point_TN.ListItemSonobuoy_Spacing'.");
				Report.Info("Value Entered = " + SonoSpace);
				Validate.Attribute(repo.FormMain__Reference_Point_TN.ListItemSonobuoy_SpacingInfo, "AccessibleValue", SonoSpace, Validate.DefaultMessage, false);
							
				//Sonobuoy Row Spacing
				Report.Info("Validating AttributeEqual (Text='(Sonobuoy Row Spacing)') on item 'FormMain__Reference_Point_TN.ListItemSonobuoy_Row_Spacing'.");
				Report.Info("Value Entered = " + SonoRSpace);
				Validate.Attribute(repo.FormMain__Reference_Point_TN.ListItemSonobuoy_Row_SpacingInfo, "AccessibleValue", SonoRSpace, Validate.DefaultMessage, false);			
	
				//Sonobuoy Depth Indicator
				if (!DepInd_OOR)
				{
					Report.Info("Validating AttributeEqual (Text='(Sonobuoy Depth Indicator)') on item 'FormMain__Reference_Point_TN.ListItemDepth_Indicator__Sonobuo'.");
					Report.Info("Value Entered = " + SonoDepth);
					Validate.Attribute(repo.FormMain__Reference_Point_TN.ListItemDepth_Indicator__SonobuoInfo, "AccessibleValue", SonoDepth, Validate.DefaultMessage, false);				
				}
				
				//Sonobuoy Holding Contact
				if (!HoldCon_OOR)
				{
					Report.Info("Validating AttributeEqual (Text='(Sonobuoy Holding Contact)') on item 'FormMain__Reference_Point_TN.ListItemHolding_Contact'.");
					Report.Info("Value Entered = " + Holding);
					Validate.Attribute(repo.FormMain__Reference_Point_TN.ListItemHolding_ContactInfo, "AccessibleValue", Holding, Validate.DefaultMessage, false);	
				}
			}
		}			
		
		//************************************************************************************//
		//*******************************Validates IDL TN Value*******************************//
		//************************************************************************************//
				
		public void ValidateIDL()
		{			
			bool Defect = false;
			
			//****Setting to true, open defect***//
			
			Defect = true;
			
			if (Defect == false)
			{	
				Report.Info("Validating AttributeEqual (Text='(IDL TN)') on item 'FormMain__Reference_Point_TN.ListItemIDL_TN'.");
				Report.Info("Value Entered = " + IDL);
				Validate.Attribute(repo.FormMain__Reference_Point_TN.ListItemIDL_TNInfo, "AccessibleValue", IDL, Validate.DefaultMessage, false);
			}	
			else
			{
				Report.Debug("IDL Track Number is currently not functioning and is written up in R-02103");
			}	
		}
		
		//************************************************************************************//
		//******************************Validates TADIL TN Value******************************//
		//************************************************************************************//
				
		public void ValidateTADIL()
		{
			bool Defect = false;
			
			//****Setting to true, open defect***//
			
			Defect = true;
			
			if (Defect == false)
			{	
				Report.Info("Validating AttributeEqual (Text='(TADIL TN)') on item 'FormMain__Reference_Point_TN.ListItemTADIL_TN'.");
				Report.Info("Value Entered = " + TADIL);
				Validate.Attribute(repo.FormMain__Reference_Point_TN.ListItemTADIL_TNInfo, "AccessibleValue", TADIL, Validate.DefaultMessage, false);
			}			
			else
			{
				Report.Debug("TADIL Track Number is currently not functioning and is written up in R-02103");
			}	
		}
		
		//************************************************************************************//
		//******************************Validates ATDIL1 TN Value*****************************//
		//************************************************************************************//
				
		public void ValidateATDL()
		{
			bool Defect = false;
			
			//****Setting to true, open defect***//
			
			Defect = true;
			
			if (Defect == false)
			{		
				Report.Info("Validating AttributeEqual (Text='(ATDL-1 TN)') on item 'FormMain__Reference_Point_TN.ListItemATDL1_TN'.");
				Report.Info("Value Entered = " + ATDL1);
				Validate.Attribute(repo.FormMain__Reference_Point_TN.ListItemATDL1_TNInfo, "AccessibleValue", ATDL1, Validate.DefaultMessage, false);
			}	
			else
			{
				Report.Debug("ATDL-1 Track Number is currently not functioning and is written up in R-02103");
			}	
		}
		
		//************************************************************************************//
		//********************************Validates NL1 TN Value******************************//
		//************************************************************************************//
				
		public void ValidateNL1()
		{
			bool Defect = false;
			
			//****Setting to true, open defect***//
			
			Defect = true;
			
			if (Defect == false)
			{		
				Report.Info("Validating AttributeEqual (Text='(NL1 TN)') on item 'FormMain__Reference_Point_TN.ListItemNL1_TN'.");
				Report.Info("Value Entered = " + NL1);
				Validate.Attribute(repo.FormMain__Reference_Point_TN.ListItemNL1_TNInfo, "AccessibleValue", NL1, Validate.DefaultMessage, false);
			}			
			else
			{
				Report.Debug("NATO Link-1 Track Number is currently not functioning and is written up in R-02103");
			}	
		}
			
		//************************************************************************************//
		//******************************Validates TADILJ TN Value****************************//
		//************************************************************************************//
				
		public void ValidateTADILJ()
		{
			bool Defect = false;
			
			//****Setting to true, open defect***//
			
			Defect = true;
			
			if (Defect == false)
			{	
				Report.Info("Validating AttributeEqual (Text='(TADILJ TN)') on item 'FormMain__Reference_Point_TN.ListItemTADIL_J_TN'.");
				Report.Info("Value Entered = " + TADILJ);
				Validate.Attribute(repo.FormMain__Reference_Point_TN.ListItemTADIL_J_TNInfo, "AccessibleValue", TADILJ, Validate.DefaultMessage, false);
			}			
			else
			{
				Report.Debug("TADIL-J Track Number is currently not functioning and is written up in R-02103");
			}	
		}
		
		//************************************************************************************//
		//*****************************Validates External TN Value****************************//
		//************************************************************************************//
				
		public void ValidateExt()
		{
			bool Defect = false;
			
			//****Setting to true, open defect***//
			
			Defect = true;
			
			if (Defect == false)
			{	
				Report.Info("Validating AttributeEqual (Text='(External TN)') on item 'FormMain__Reference_Point_TN.ListItemExternal_TN'.");
				Report.Info("Value Entered = " + Ext);
				Validate.Attribute(repo.FormMain__Reference_Point_TN.ListItemExternal_TNInfo, "AccessibleValue", Ext, Validate.DefaultMessage, false);
			}		
			else
			{
				Report.Debug("External Track Number is currently not functioning and is written up in R-02103");
			}	
		}		
		
		//************************************************************************************//
		//************************************************************************************//
		//************************************************************************************//	
		
		public void RightClickTrack()
		{			
			Duration OrigDur = repo.FormTacViewC2.PictureTrackInfo.SearchTimeout;
			repo.FormTacViewC2.PictureTrackInfo.SearchTimeout = 2000;			
			
			if (repo.FormTacViewC2.PictureTrackInfo.Exists())
			{
				Report.Info("Mouse Right Click item 'FormTacViewC2.PictureTrack' at Center.");
				repo.FormTacViewC2.PictureTrack.Click(MouseButtons.Right);
			}
			else
			{
				ZoomFlag = true;
				Report.Info("Track # " + TrackNum + " not found on the current display, going to world wide view");
				Report.Screenshot();
				repo.FormTacViewC2.ButtonZoom_Out_Max.Click();
				
				if (repo.FormTacViewC2.PictureTrackInfo.Exists())
				{
					Report.Info("Mouse Right Click item 'FormTacViewC2.PictureTrack' at Center.");
					repo.FormTacViewC2.PictureTrack.Click(MouseButtons.Right);
				}
				else
				{
					Report.Error("Unable to find Track # " + TrackNum + " anywhere in the world");
					Report.Screenshot();
					return;
				}				
			}
			
			repo.FormTacViewC2.PictureTrackInfo.SearchTimeout = OrigDur;
		}	
		
		//************************************************************************************//
		//*****************************Sets Track Number in Repo******************************//
		//************************************************************************************//
		
		public void SetTrackNumberInRepo()
		{
			tracknumber = TrackNum;			
		}

		//************************************************************************************//
		//*******************Opens Track Dialog For Corresponding Track***********************//
		//************************************************************************************//	
		
		public void ViewTrackProperties()
		{			
			Duration OrigDur = repo.FormRealView.MenuItemTracksInfo.SearchTimeout;
			repo.FormRealView.MenuItemTracksInfo.SearchTimeout = 1000;
			Duration OrigDur1 = repo.FormRealView.MenuItemTrackNumber2Info.SearchTimeout;
			repo.FormRealView.MenuItemTrackNumber2Info.SearchTimeout = 1000;			
			
			if (repo.FormRealView.MenuItemTracksInfo.Exists())
			{
				Report.Info("Mouse Left Click item 'FormRealView.MenuItemTracks'");
			    repo.FormRealView.MenuItemTracks.Click();
			    Report.Info("Mouse Left Click item 'FormTracks.MenuItemC2_HOST_2_Track'");
		        repo.FormTracks.MenuItemConnection2_Track.Click();
		       	Report.Info("Mouse Left Click item 'FormTOAD2.MenuItemTrack_Properties' at 103;14.");
				repo.FormConnection2.MenuItemTrack_Properties.Click();
			}			
			else if (repo.FormRealView.MenuItemTrackNumber2Info.Exists())
			{
			    Report.Info("Mouse Left Click item 'repo.FormRealView.MenuItemTrackNumber2'");
		        repo.FormRealView.MenuItemTrackNumber2.Click();
		       	Report.Info("Mouse Left Click item 'FormTOAD2.MenuItemTrack_Properties' at 103;14.");
				repo.FormConnection2.MenuItemTrack_Properties.Click();
			}
			
			repo.FormRealView.MenuItemTracksInfo.SearchTimeout = OrigDur;
			repo.FormRealView.MenuItemTrackNumber2Info.SearchTimeout = OrigDur1;
		}
		
		//************************************************************************************//
		//****************************Drops Corresponding Track*******************************//
		//************************************************************************************//
		
		public void DropTrack()
		{			
			Drop_Track.DropTrack.Start();
		}
		
		//************************************************************************************//
		//***************************Validates Track is Dropped*******************************//
		//************************************************************************************//		

		public void Validate_DropTrack()
		{
			Duration OrigDur = repo.FormTacViewC2.PictureTrackInfo.SearchTimeout;
			repo.FormTacViewC2.PictureTrackInfo.SearchTimeout = 8000;

			Report.Info("Validating Track #" + TrackNum + " was dropped");
	
			bool result = Validate.NotExists(repo.FormTacViewC2.PictureTrackInfo, Validate.DefaultMessage, false);
			
			if (result == true)
			{
				Report.Success("Successfully dropped track#" + TrackNum);
			}
			else
			{
				Report.Debug("Track #" + TrackNum + " failed to drop within 8 seconds, proceeding to next track creation.");
				Report.Screenshot();				
			}
			
			repo.FormTacViewC2.PictureTrackInfo.SearchTimeout = OrigDur;
		}		
		
		//************************************************************************************//
		//*****************************Zooms Out to Locate Track******************************//
		//************************************************************************************//	
		
		public void Zoom500()
		{
			if (ZoomFlag == true)
			{
				Report.Info("Mouse Left Click item 'FormTacViewC2.ButtonSet_Range_to_500_km' at Center.");
				repo.FormTacViewC2.ButtonSet_Range_to_500_km.Click();
				Report.Info("Mouse Left Click item 'FormTacViewC2.Button_Center_on_Own_Site' at Center.");
				repo.FormTacViewC2.Button_Center_on_Own_Site.Click();
				ZoomFlag = false;
			}
		}
		
		//**************************************************************************************//
		//***************************Ranorex Generated Default Method***************************//
		//**************************************************************************************//		

		static ReferenceValidateTrackRegression()
		{
			//Your recording specific initialization code goes here.
		}
		
		//**************************************************************************************//
		//*****************************Ranorex Generated Init Method****************************//
		//**************************************************************************************//		

		private void Init()
		{
			// Your recording specific initialization code goes here.
		}
	}
}