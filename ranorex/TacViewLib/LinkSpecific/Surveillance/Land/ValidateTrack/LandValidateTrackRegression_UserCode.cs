///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using System.Windows.Forms;

using CommonUtilLib;
using Ranorex;
using Ranorex.Core;

namespace TacViewLib.LinkSpecific.Surveillance.Land.ValidateTrack
{
	/// <summary>
	/// The ValidateTrackRegression recording.
	/// </summary>

	public partial class LandValidateTrackRegression
	{	
		public static bool ZoomFlag = false;
		
		public static string TrackNum;
		
		//Basic Info
		public static string Ind;
		public static string ID;
		public static string Plat;		
		public static string Act;	
		public static string SType;	
		public static string Str;	
		
		public static bool IndFlag;

		//Position & Velocity
		public static string Elv;
		public static string HAE;
		public static string Vel;
		public static string Crs;
		public static string MagCrs;
		
		//Interface Info
		public static string TQ;		
		public static string RU;
		public static string Hi;	
		
		public static bool HIFlag;
		public static bool TQFlag;
		
		//Mode Codes/Special Codes
		public static string M1;
		public static string M2;
		public static string M3;
		public static string M4;
		public static string M5;
		public static string M5Nat;
		public static string M5ID;
		
		//Indicators
		public static string SPI;
		public static string PassAct;
		public static string SpecInt;
		public static string TF;
		public static string HR;
		public static string MN;
		
		public static bool SpecIntFlag;
		public static bool SPIFlag;
		
		//Land Info
		public static string TotVeh;
		public static string PerVeh;
		public static string Route;
		public static string TrkId;
		
		//AOP Info
		public static string AxisMaj;
		public static string AxisMin;
		public static string Orient;
		public static string CirSq;
		
		//Other TNs
		public static string IDL;
		public static string TADIL;
		public static string ATDL1;
		public static string NL1;
		public static string TADILJ;
		public static string Ext;
		
		//Flags
		public static bool Ind_OOR;
		public static bool ID_OOR;
		public static bool Plat_OOR;
		public static bool Act_OOR;
		public static bool Stype_OOR;
		public static bool Strength_OOR;
		public static bool HiPri_OOR;
		public static bool SPI_OOR;
		public static bool Mode1_OOR;
		public static bool Mode4_OOR;		
		public static bool Mode5_OOR;
		public static bool Mode5Nat_OOR;
		public static bool PAInd_OOR;
		public static bool SpecInt_OOR;
		public static bool TF_OOR;
		public static bool TotVeh_OOR;
		public static bool PoTV_OOR;
		public static bool TrkID_OOR;
		public static bool CirSqr_OOR;
		
		//************************************************************************************//
		//***********************Validates Point/Track Indicator Value************************//
		//************************************************************************************//
				
		public void ValidateInd()
		{
			if (!Ind_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(Point/Track Indicator)') on item 'repo.FormMain__Land_Point_Track_TN.ListItemPoint_Track_Ind'.");
				Report.Info("Value Entered = " + Ind);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN.ListItemPoint_Track_IndInfo, "AccessibleValue", Ind, Validate.DefaultMessage, false);
			}
		}
		
		//************************************************************************************//
		//******************************Validates Identity Value******************************//
		//************************************************************************************//
				
		public void ValidateId()
		{
			if (!ID_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(Identity)') on item 'repo.FormMain__Land_Point_Track_TN.ListItemIdentity'.");
				Report.Info("Value Entered = " + ID);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN.ListItemIdentityInfo, "AccessibleValue", ID, Validate.DefaultMessage, false);
			}
		}		

		//************************************************************************************//
		//******************************Validates Platform Value******************************//
		//************************************************************************************//
				
		public void ValidatePlat()
		{
			if (!Plat_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(Platform)') on item 'repo.FormMain__Land_Point_Track_TN.ListItemPlatform'.");
				Report.Info("Value Entered = " + Plat);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN.ListItemPlatformInfo, "AccessibleValue", Plat, Validate.DefaultMessage, false);
			}
		}	
		
		//************************************************************************************//
		//******************************Validates Activity Value******************************//
		//************************************************************************************//
				
		public void ValidateAct()
		{
			if (!Act_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(Activity)') on item 'repo.FormMain__Land_Point_Track_TN.ListItemActivity'.");
				Report.Info("Value Entered = " + Act);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN.ListItemActivityInfo, "AccessibleValue", Act, Validate.DefaultMessage, false);
			}
		}	
		
		//************************************************************************************//
		//***************************Validates Specific Type Value****************************//
		//************************************************************************************//
				
		public void ValidateSType()
		{
			if (!Stype_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(Specific Type)') on item 'repo.FormMain__Land_Point_Track_TN.ListItemSpecific_Type'.");
				Report.Info("Value Entered = " + SType);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN.ListItemSpecific_TypeInfo, "AccessibleValue", SType, Validate.DefaultMessage, false);
			}
		}	
		
		//************************************************************************************//
		//******************************Validates Strength Value******************************//
		//************************************************************************************//
		
		public void ValidateStr()
		{			
			bool Defect = false;
			
			//****Setting to true, open defect***//
			
			Defect = true;
		
			if (Defect == false)
			{	
			
				if (!Strength_OOR)
				{
					Report.Info("Validating AttributeEqual (Text='(Strength)') on item 'repo.FormMain__Land_Point_Track_TN.ListItemStrength'.");
					Report.Info("Value Entered = " + Str);
					Validate.Attribute(repo.FormMain__Land_Point_Track_TN.ListItemStrengthInfo, "AccessibleValue", Str, Validate.DefaultMessage, false);
				}
			}
			else
			{
				Report.Debug("Strength value is currently not functioning and is written up in D-04482");
			}		
		}				

		//************************************************************************************//
		//*****************************Validates Elevation Value******************************//
		//************************************************************************************//
				
		public void ValidateElv()
		{
			Accessible accElement = new Accessible(repo.FormMain__Land_Point_Track_TN.ListItemElevation__ft);
			string RxElv = accElement.Value;
			Report.Info("Validating AttributeEqual (Text='(Elevation)') on item 'repo.FormMain__Land_Point_Track_TN.ListItemElevation__ft'.");
			Report.Info("Value Entered = " + Elv);
			Report.Info("Value Received = " + RxElv);
			Report.Info("Allowable Deviation = +/- 5 Units");
			Validate.IsTrue((Convert.ToInt32(RxElv) > Convert.ToInt32(Elv) - 5) && (Convert.ToInt32(RxElv) < Convert.ToInt32(Elv) + 5), Validate.DefaultMessage, false);
		}			
		
		//************************************************************************************//
		//*********************************Validates HAE Value********************************//
		//************************************************************************************//
				
		public void ValidateHAE()
		{
			bool Defect = false;
			
			//****Setting to true, open defect***//
			
			Defect = true;
		
			if (Defect == false)
			{	
				Accessible accElement = new Accessible(repo.FormMain__Land_Point_Track_TN.ListItemHAE);
				string RxHAE = accElement.Value;
				Report.Info("Validating AttributeEqual (Text='(HAE)') on item 'repo.FormMain__Land_Point_Track_TN.ListItemHAE__ft_'.");
				Report.Info("Value Entered = " + HAE);
				Report.Info("Value Received = " + RxHAE);
				Report.Info("Allowable Deviation = +/- 5 Units");
				Validate.IsTrue((Convert.ToDouble(RxHAE) > Convert.ToDouble(HAE) - 5) && (Convert.ToDouble(RxHAE) < Convert.ToDouble(HAE) + 5), Validate.DefaultMessage, false);
			}
			else
			{
				Report.Debug("Passive/Active Indicator field is currently not functioning and is written up in D-03109");
			}
		}
				
		//************************************************************************************//
		//**********************Validates Course and Speed if Land Track**********************//
		//************************************************************************************//
				
		public void ValidateCrsSpd()
		{
			if (IndFlag)
			{
				//Validating Velocity
				Accessible accElement = new Accessible(repo.FormMain__Land_Point_Track_TN.ListItemSpeedVelocity);
				string RxVel = accElement.Value;
				Report.Info("Validating AttributeEqual (Text='(Velocity)') on item 'repo.FormMain__Land_Point_Track_TN.ListItemVelocity'.");
				Report.Info("Value Entered = " + Vel);
				Report.Info("Value Received = " + RxVel);
				Report.Info("Allowable Deviation = +/- 5 Units");
				Validate.IsTrue((Convert.ToDouble(RxVel) > Convert.ToDouble(Vel) - 5) && (Convert.ToDouble(RxVel) < Convert.ToDouble(Vel) + 5), Validate.DefaultMessage, false);
				
				//Validating True Course
				Accessible accElement1 = new Accessible(repo.FormMain__Land_Point_Track_TN.ListItemTrue_Course);
				string RxCrs = accElement1.Value;
				Report.Info("Validating AttributeEqual (Text='(True Course)') on item 'repo.FormMain__Land_Point_Track_TN.ListItemTrue_Course'.");
				Report.Info("Value Entered = " + Crs);
				Report.Info("Value Received = " + RxCrs );
				Report.Info("Allowable Deviation = +/- 5 Units");
				Validate.IsTrue((Convert.ToDouble(RxCrs) > Convert.ToDouble(Crs) - 5) && (Convert.ToDouble(RxCrs) < Convert.ToDouble(Crs) + 5), Validate.DefaultMessage, false);
				
				//Validating Magnetic Course
				Report.Info("Validating AttributeEqual (Text='Magnetic Course') on item 'FormMain__Land_Point_Track_TN.ListItemMagnetic_Course'.");
				Report.Info("Value Entered = " + MagCrs);
				Report.Info("Magnetic Course is a local value and will not be validated on the remote interface");
				//Validate.Attribute(repo.FormMain__Land_Point_Track_TN.ListItemMagnetic_CourseInfo, "AccessibleValue", MagCrs, Validate.DefaultMessage,false);		
			}
		}	
		
		//************************************************************************************//
		//******************************Validates Track Quality*******************************//
		//************************************************************************************//
		
		public void ValidateTrackQuality()
		{
			if (TQFlag)
			{
				Report.Info("Validating AttributeEqual (Text='Track Quality') on item 'FormMain__Land_Point_Track_TN.ListItemRemote_TQ'.");
				Report.Info("Value Entered = " + TQ);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN.ListItemRemote_TQInfo, "AccessibleValue", TQ, Validate.DefaultMessage, false);
			}
		}
		
		//************************************************************************************//
		//*****************************Validates Reporting Unit*******************************//
		//************************************************************************************//
		
		public void ValidateReportingUnit()
		{
			Report.Info("Validating AttributeEqual (Text='Reporting Unit') on item 'FormMain__Air_TN.ListItemReporting_Unit'.");
			Report.Info("Value Entered = " + RU);
			Validate.Attribute(repo.FormMain__Land_Point_Track_TN.ListItemReporting_UnitInfo, "AccessibleValue", RU, Validate.DefaultMessage, false);
		}
		
		//************************************************************************************//
		//****************************Validates HI Priority Value*****************************//
		//************************************************************************************//
				
		public void ValidateHiPriority()
		{
			if (!HiPri_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(Hi Priority)') on item 'FormMain__Land_Point_Track_TN.ListItemHi_PriorityInfo'.");
				Report.Info("Value Entered = " + Hi);
				Report.Info("Hi Priority is a local value and will not be validated on the remote interface");
				//Validate.Attribute(repo.FormMain__Land_Point_Track_TN.ListItemHi_PriorityInfo, "AccessibleValue", Hi, Validate.DefaultMessage, false);
			}
		}				
		
		//************************************************************************************//
		//****************************Validates Mode I Code Value*****************************//
		//************************************************************************************//
				
		public void ValidateMode1()
		{
			if (!Mode1_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(Mode I Code)') on item 'repo.FormMain__Land_Point_Track_TN.ListItemMode_1_Code'.");
				Report.Info("Value Entered = " + M1);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN.ListItemMode_1_CodeInfo, "AccessibleValue", M1, Validate.DefaultMessage, false);
			}
		}		

		//************************************************************************************//
		//****************************Validates Mode II Code Value****************************//
		//************************************************************************************//
		
		public void ValidateMode2()
		{
			Report.Info("Validating AttributeEqual (Text='Mode II Code') on item 'FormMain__Land_Point_Track_TN.ListItemMode_2_Code.");
			int val = Int32.Parse (M2);
			string Mode2 = val.ToString("D4");
			Report.Info("Value Entered = " + Mode2);
			Validate.Attribute(repo.FormMain__Land_Point_Track_TN.ListItemMode_2_CodeInfo, "AccessibleValue", Mode2, Validate.DefaultMessage, false);
		}
		
		//************************************************************************************//
		//**************************Validates Mode III Code Value*****************************//
		//************************************************************************************//
		
		public void ValidateMode3()
		{
			Report.Info("Validating AttributeEqual (Text='Mode III Code') on item 'FormMain__Land_Point_Track_TN.ListItemMode_3_Code.");
			int val = Int32.Parse (M3);
			string Mode3 = val.ToString("D4");
			Report.Info("Value Entered = " + Mode3);
			Validate.Attribute(repo.FormMain__Land_Point_Track_TN.ListItemMode_3_CodeInfo, "AccessibleValue", Mode3, Validate.DefaultMessage, false);
		}
		
		//************************************************************************************//
		//******************************Validates Mode IV Value*******************************//
		//************************************************************************************//
		
		public void ValidateMode4()
		{
			if (!Mode4_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='Mode IV Code') on item 'FormMain__Land_Point_Track_TN.ListItemMode_4_Indicator.");
				Report.Info("Value Entered = " + M4);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN.ListItemMode_4_IndicatorInfo, "AccessibleValue", M4, Validate.DefaultMessage, false);
			}
		}		
		
		//************************************************************************************//
		//******************************Validates Mode V Value********************************//
		//************************************************************************************//
		
		public void ValidateMode5()
		{
			if (!Mode5Nat_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='Mode V Code') on item 'FormMain__Land_Point_Track_TN.ListItemMode_5_Indicator.");
				Report.Info("Value Entered = " + M5);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN.ListItemMode_5_IndicatorInfo, "AccessibleValue", M5, Validate.DefaultMessage, false);
			}
		}
		
		//************************************************************************************//
		//***********************Validates Mode V Nationality Value***************************//
		//************************************************************************************//
		
		public void ValidateM5Nat()
		{
			if (!Mode5Nat_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='Mode V Nationality') on item 'FormMain__Land_Point_Track_TN.ListItemMode_5_Nationality.");
				Report.Info("Value Entered = " + M5Nat);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN.ListItemMode_5_NationalityInfo, "AccessibleValue", M5Nat, Validate.DefaultMessage, false);
			}
		}		
		
		//************************************************************************************//
		//***************************Validates Mode V ID Value********************************//
		//************************************************************************************//
		
		public void ValidateM5ID()
		{
			Report.Info("Validating AttributeEqual (Text='Mode V Platform ID') on item 'FormMain__Land_Point_Track_TN.ListItemMode_5_platformID'.");
			Report.Info("Value Entered = " + M5ID);		
			Validate.Attribute(repo.FormMain__Land_Point_Track_TN.ListItemMode_5_Platform_IDInfo, "AccessibleValue", M5ID, Validate.DefaultMessage, false);
		}	
		
		//************************************************************************************//
		//*********************************Validates SPI Value********************************//
		//************************************************************************************//
				
		public void ValidateSPI()
		{
			if (SPIFlag && !SPI_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(SPI)') on item 'repo.FormMain__Land_Point_Track_TN.ListItemSPI'.");
				Report.Info("Value Entered = " + SPI);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN.ListItemSPIInfo, "AccessibleValue", SPI, Validate.DefaultMessage, false);
			}		
		}
		
		//************************************************************************************//
		//*********************Validates Passive/Active Indicator Value***********************//
		//************************************************************************************//
				
		public void ValidatePassAct()
		{
			bool Defect = true;
					
			if (Defect == false)
			{
				if (!PAInd_OOR)
				{
					Report.Info("Validating AttributeEqual (Text='(Passive/Active Indicator)') on item 'repo.FormMain__Land_Point_Track_TN.ListItemPassive_Active_Ind'.");
					Report.Info("Value Entered = " + PassAct);
					Validate.Attribute(repo.FormMain__Land_Point_Track_TN.ListItemPassive_Active_IndInfo, "AccessibleValue", PassAct, Validate.DefaultMessage, false);
				}
			}
			else
			{
				Report.Debug("Passive/Active Indicator field is currently not functioning and is written up in R-02101");
			}
		}
		
		//************************************************************************************//
		//**************************Validates Special Interest Value**************************//
		//************************************************************************************//
				
		public void ValidateSpecInt()
		{
			if (SpecIntFlag && !SpecInt_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(Special Interest)') on item 'repo.FormMain__Land_Point_Track_TN.ListItemSpecial_Interest'.");
				Report.Info("Value Entered = " + SpecInt);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN.ListItemSpecial_InterestInfo, "AccessibleValue", SpecInt, Validate.DefaultMessage, false);
			}
		}			
		
		//************************************************************************************//
		//***************************Validates Time Function Value****************************//
		//************************************************************************************//
				
		public void ValidateTF()
		{
			
			bool Defect = true;
					
			if (Defect == false)
			{
				if (!TF_OOR)
				{
					Report.Info("Validating AttributeEqual (Text='(Time Function)') on item 'FormMain__Reference_Point_TN.FormMain__Land_Point_Track_TN'.");
					Report.Info("Value Entered = " + TF);
					Validate.Attribute(repo.FormMain__Land_Point_Track_TN.ListItemTime_FunctionInfo, "AccessibleValue", TF, Validate.DefaultMessage, false);
						
					// Validates Hour
					Report.Info("Validating AttributeEqual (Text='(Hour)') on item 'FormMain__Reference_Point_TN.FormMain__Land_Point_Track_TN'.");
					Report.Info("Value Entered = " + HR);
					Validate.Attribute(repo.FormMain__Land_Point_Track_TN.ListItemHourInfo, "AccessibleValue", HR, Validate.DefaultMessage, false);
						
					// Validates Minute
					Report.Info("Validating AttributeEqual (Text='(Minute)') on item 'FormMain__Reference_Point_TN.FormMain__Land_Point_Track_TN'.");
					Report.Info("Value Entered = " + MN);
					Validate.Attribute(repo.FormMain__Land_Point_Track_TN.ListItemMinuteInfo, "AccessibleValue", MN, Validate.DefaultMessage, false);
				}
				else
				{
					Report.Debug("Time Function & time fields are currently not functioning and is written up in D-02052");
				}
			}
		}
		
		//************************************************************************************//
		//***********************Validates Time Function Hour Entered*************************//
		//************************************************************************************//
				
		public void ValidateHR()
		{
			Report.Info("Validating AttributeEqual (Text='(Hour)') on item 'repo.FormMain__Land_Point_Track_TN.ListItemHour'.");
			Report.Info("Value Entered = " + HR);
			Validate.Attribute(repo.FormMain__Land_Point_Track_TN.ListItemHourInfo, "AccessibleValue", HR, Validate.DefaultMessage, false);
		}		

		//************************************************************************************//
		//***********************Validates Time Function Minute Entered***********************//
		//************************************************************************************//
				
		public void ValidateMin()
		{
			Report.Info("Validating AttributeEqual (Text='(Minute)') on item 'repo.FormMain__Land_Point_Track_TN.ListItemMinute'.");
			Report.Info("Value Entered = " + MN);
			Validate.Attribute(repo.FormMain__Land_Point_Track_TN.ListItemMinuteInfo, "AccessibleValue", MN, Validate.DefaultMessage, false);
		}		
		
		//************************************************************************************//
		//*************************Validates Total Number of Vehicles*************************//
		//************************************************************************************//
				
		public void ValidateTotVeh()
		{
			if (!TotVeh_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(Total Number of Vehicles)') on item 'repo.FormMain__Land_Point_Track_TN.ListItemTotal_Number_of_Vehicles'.");
				Report.Info("Value Entered = " + TotVeh);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN.ListItemTotal_Number_of_VehiclesInfo, "AccessibleValue", TotVeh, Validate.DefaultMessage, false);
			}
		}		
		
		//************************************************************************************//
		//************************Validates Percent of Tracked Vehicles***********************//
		//************************************************************************************//
				
		public void ValidatePerVeh()
		{
			if (!PoTV_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(Percent of Tracked Vehicles)') on item 'repo.FormMain__Land_Point_Track_TN.ListItemPercent_of_Tracked_Vehic'.");
				Report.Info("Value Entered = " + PerVeh);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN.ListItemPercent_of_Tracked_VehicInfo, "AccessibleValue", PerVeh, Validate.DefaultMessage, false);
			}
		}			
		
		//************************************************************************************//
		//************************Validates Percent of Tracked Vehicles***********************//
		//************************************************************************************//
				
		public void ValidateRoute()
		{
			
			bool Defect = true;
					
			if (Defect == false)
			{
				Report.Info("Validating AttributeEqual (Text='(Route Number)') on item 'repo.FormMain__Land_Point_Track_TN.ListItemRoute_Number'.");
				Report.Info("Value Entered = " + Route);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN.ListItemRoute_NumberInfo, "AccessibleValue", Route, Validate.DefaultMessage, false);
			}	
			else
			{
				Report.Debug("Route Number field is currently not functioning and is written up in D-03686");
			}
		}
		
		//************************************************************************************//
		//*****************************Validates Track Identifier*****************************//
		//************************************************************************************//
				
		public void ValidateTrkId()
		{
			if (!TrkID_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(Track Identifier)') on item 'repo.FormMain__Land_Point_Track_TN.ListItemTrack_Identifier'.");
				Report.Info("Value Entered = " + TrkId);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN.ListItemTrack_IdentifierInfo, "AccessibleValue", TrkId, Validate.DefaultMessage, false);
			}
		}			
		
		//************************************************************************************//
		//****************************Validates Circle/Square Value***************************//
		//************************************************************************************//
				
		public void ValidateCirSq()
		{
			if (!CirSqr_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(Circle/Square)') on item 'FormMain__Land_Point_Track_TN.ListItemAOP_Circle_Square_Switch'.");
				Report.Info("Value Entered = " + CirSq);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN.ListItemAOP_Circle_Square_SwitchInfo, "AccessibleValue", CirSq, Validate.DefaultMessage, false);
			}
		}		
		
		//************************************************************************************//
		//*******************************Validates AOP Major Value****************************//
		//************************************************************************************//
				
		public void ValidateAOPMaj()
		{
			Accessible accElement = new Accessible(repo.FormMain__Land_Point_Track_TN.ListItemAOP_Major_Axis);
			string RxAxisMag = accElement.Value;
			Report.Info("Validating AttributeEqual (Text='(AOP Major)') on item 'FormMain__Land_Point_Track_TN.ListItemAOP_Major_Axis'.");
			Report.Info("Value Entered = " + AxisMaj);
			Report.Info("Value Received = " + RxAxisMag);
			Report.Info("Allowable Deviation = +/- 1 Unit");
			Validate.IsTrue((Convert.ToDouble(RxAxisMag) > Convert.ToDouble(AxisMaj) - 1) && (Convert.ToDouble(RxAxisMag) < Convert.ToDouble(AxisMaj) + 1), Validate.DefaultMessage, false);
		}	
		
		//************************************************************************************//
		//*******************************Validates AOP Minor Value****************************//
		//************************************************************************************//
				
		public void ValidateAOPMin()
		{
			Accessible accElement = new Accessible(repo.FormMain__Land_Point_Track_TN.ListItemAOP_Minor_Axis);
			string RxAxisMin = accElement.Value;
			Report.Info("Validating AttributeEqual (Text='(AOP Minor)') on item 'FormMain__Land_Point_Track_TN.ListItemAOP_Minor_Axis'.");
			Report.Info("Value Entered = " + AxisMin);
			Report.Info("Value Received = " + RxAxisMin);
			Report.Info("Allowable Deviation = +/- 1 Unit");
			Validate.IsTrue((Convert.ToDouble(RxAxisMin) > Convert.ToDouble(AxisMin) - 1) && (Convert.ToDouble(RxAxisMin) < Convert.ToDouble(AxisMin) + 1), Validate.DefaultMessage, false);
		}			
		
		//************************************************************************************//
		//*****************************Validates Orientation Value****************************//
		//************************************************************************************//
				
		public void ValidateOrient()
		{
			Report.Info("Validating AttributeEqual (Text='(Orientation)') on item 'FormMain__Land_Point_Track_TN.ListItemAOP_Orientation'.");
			Report.Info("Value Entered = " + Orient + ".0");
			Validate.Attribute(repo.FormMain__Land_Point_Track_TN.ListItemAOP_OrientationInfo, "AccessibleValue", Orient + ".0", Validate.DefaultMessage, false);
		}		

		//************************************************************************************//
		//*******************************Validates IDL TN Value*******************************//
		//************************************************************************************//
				
		public void ValidateIDL()
		{
			bool Defect = true;
					
			if (Defect == false)
			{
				Report.Info("Validating AttributeEqual (Text='(IDL TN)') on item 'FormMain__Land_Point_Track_TN.ListItemIDL_TN'.");
				Report.Info("Value Entered = " + IDL);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN.ListItemIDL_TNInfo, "AccessibleValue", IDL, Validate.DefaultMessage, false);
			}			
			else
			{
				Report.Debug("IDL Track Number field is currently not functioning and is written up in R-02103");
			}
		}
		
		//************************************************************************************//
		//******************************Validates TADIL TN Value******************************//
		//************************************************************************************//
				
		public void ValidateTADIL()
		{
			bool Defect = true;
					
			if (Defect == false)
			{
				Report.Info("Validating AttributeEqual (Text='(TADIL TN)') on item 'FormMain__Land_Point_Track_TN.ListItemTADIL_TN'.");
				Report.Info("Value Entered = " + TADIL);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN.ListItemTADIL_TNInfo, "AccessibleValue", TADIL, Validate.DefaultMessage, false);
			}	
			else
			{
				Report.Debug("TADIL Track Number field is currently not functioning and is written up in R-02103");
			}
		}
		
		//************************************************************************************//
		//******************************Validates ATDIL1 TN Value*****************************//
		//************************************************************************************//
				
		public void ValidateATDL1()
		{
			bool Defect = true;
					
			if (Defect == false)
			{
				Report.Info("Validating AttributeEqual (Text='(ADTIL1 TN)') on item 'FormMain__Land_Point_Track_TN.ListItemATDL1_TN'.");
				Report.Info("Value Entered = " + ATDL1);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN.ListItemATDL1_TNInfo, "AccessibleValue", ATDL1, Validate.DefaultMessage, false);
			}
			else
			{
				Report.Debug("ATDL-1 Track Number field is currently not functioning and is written up in R-02103");
			}
		}
		
		//************************************************************************************//
		//********************************Validates NL1 TN Value******************************//
		//************************************************************************************//
				
		public void ValidateNL1()
		{
			bool Defect = true;
					
			if (Defect == false)
			{
				Report.Info("Validating AttributeEqual (Text='(NL1 TN)') on item 'FormMain__Land_Point_Track_TN.ListItemNL1_TN'.");
				Report.Info("Value Entered = " + NL1);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN.ListItemNL1_TNInfo, "AccessibleValue", NL1, Validate.DefaultMessage, false);
			}				
			else
			{
				Report.Debug("NATO Link-1 Track Number field is currently not functioning and is written up in R-02103");
			}
		}
		
		//************************************************************************************//
		//******************************Validates TADILJ TN Value****************************//
		//************************************************************************************//
				
		public void ValidateTADILJ()
		{
			bool Defect = true;
					
			if (Defect == false)
			{
				Report.Info("Validating AttributeEqual (Text='(TADILJ TN)') on item 'FormMain__Land_Point_Track_TN.ListItemTADIL_J_TN'.");
				Report.Info("Value Entered = " + TADILJ);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN.ListItemTADIL_J_TNInfo, "AccessibleValue", TADILJ, Validate.DefaultMessage, false);
			}
			else
			{
				Report.Debug("TADIL-J Track Number field is currently not functioning and is written up in R-02103");
			}
		}
		
		//************************************************************************************//
		//*****************************Validates External TN Value****************************//
		//************************************************************************************//
				
		public void ValidateExt()
		{
			bool Defect = true;
					
			if (Defect == false)
			{
				Report.Info("Validating AttributeEqual (Text='(External TN)') on item 'FormMain__Land_Point_Track_TN.ListItemExternal_TN'.");
				Report.Info("Value Entered = " + Ext);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN.ListItemExternal_TNInfo, "AccessibleValue", Ext, Validate.DefaultMessage, false);		
			}
			else
			{
				Report.Debug("External Track Number field is currently not functioning and is written up in R-02103");
			}
		}
		
		//**************************************************************************************//
		//***************************Ranorex Generated Default Method***************************//
		//**************************************************************************************//			

		static LandValidateTrackRegression()
		{
			//Your recording specific initialization code goes here.
		}
		
		//************************************************************************************//
		//***************************Creates Run-Time Repo Items******************************//
		//************************************************************************************//
		
		public void CreateTrackRepoItems()
		{			
			string currentPath = repo.FormTacViewC2.PictureTrackInfo.Path.ToString();
			repo.FormTacViewC2.PictureTrackInfo.Path = currentPath.Replace("%track%", TrackNum);
			Report.Info("Setting repo item FormTacViewC2.PictureTrack to " + repo.FormTacViewC2.PictureTrackInfo.Path.ToString());
			
			string currentPath1 = repo.FormTracks.MenuItemConnection2_TrackInfo.Path.ToString();
			repo.FormTracks.MenuItemConnection2_TrackInfo.Path = currentPath1.Replace("%track%", TrackNum);
			Report.Info("Setting repo item FormTracks.MenuItemC2_HOST_2_Track to " + repo.FormTracks.MenuItemConnection2_TrackInfo.Path.ToString());
			
			string currentPath2 = repo.FormRealView.MenuItemTrackNumber2Info.Path.ToString();
			repo.FormRealView.MenuItemTrackNumber2Info.Path = currentPath2.Replace("%track%", TrackNum);
			Report.Info("Setting repo item FormRealView.MenuItemTrackNumber2 to " + repo.FormRealView.MenuItemTrackNumber2Info.Path.ToString());
			
			string currentPath3 = repo.FormRealView.MenuItemTrackNumberInfo.Path.ToString();
			repo.FormRealView.MenuItemTrackNumberInfo.Path = currentPath3.Replace("%track%", TrackNum);
			Report.Info("Setting repo item FormRealView.MenuItemTrackNumber to " + repo.FormRealView.MenuItemTrackNumberInfo.Path.ToString());
			
			string currentPath4 = repo.FormTracks.MenuItemConnection1_TrackInfo.Path.ToString();
			repo.FormTracks.MenuItemConnection1_TrackInfo.Path = currentPath4.Replace("%track%", TrackNum);
			Report.Info("Setting repo item FormTracks.MenuItemC2_HOST_Track to " + repo.FormTracks.MenuItemConnection1_TrackInfo.Path.ToString());					
		}
		
		//************************************************************************************//
		//*******************************Right Clicks on Track********************************//
		//************************************************************************************//		
		
		public void RightClickTrack()
		{			
			Duration OrigDur = repo.FormTacViewC2.PictureTrackInfo.SearchTimeout;
			repo.FormTacViewC2.PictureTrackInfo.SearchTimeout = 2000;			
			
			if (repo.FormTacViewC2.PictureTrackInfo.Exists())
			{
				Report.Info("Mouse Right Click item 'FormTacViewC2.PictureTrack' at Center.");
				repo.FormTacViewC2.PictureTrack.Click(MouseButtons.Right);
			}
			else
			{
				ZoomFlag = true;
				Report.Info("Track # " + TrackNum + " not found on the current display, going to world wide view");
				Report.Screenshot();
				repo.FormTacViewC2.ButtonZoom_Out_Max.Click();
				
				if (repo.FormTacViewC2.PictureTrackInfo.Exists())
				{
					Report.Info("Mouse Right Click item 'FormTacViewC2.PictureTrack' at Center.");
					repo.FormTacViewC2.PictureTrack.Click(MouseButtons.Right);
				}
				else
				{
					Report.Error("Unable to find Track # " + TrackNum + " anywhere in the world");
					Report.Screenshot();
					return;
				}				
			}
			
			repo.FormTacViewC2.PictureTrackInfo.SearchTimeout = OrigDur;
		}	
		
		//************************************************************************************//
		//*****************************Sets Track Number in Repo******************************//
		//************************************************************************************//		
		
		public void SetTrackNumberInRepo()
		{
			tracknumber = TrackNum;
			
		}

		//************************************************************************************//
		//*******************Opens Track Dialog For Corresponding Track***********************//
		//************************************************************************************//
		
		public void ViewTrackProperties()
		{			
			Duration OrigDur = repo.FormRealView.MenuItemTracksInfo.SearchTimeout;
			repo.FormRealView.MenuItemTracksInfo.SearchTimeout = 1000;
			Duration OrigDur1 = repo.FormRealView.MenuItemTrackNumber2Info.SearchTimeout;
			repo.FormRealView.MenuItemTrackNumber2Info.SearchTimeout = 1000;			
			
			if (repo.FormRealView.MenuItemTracksInfo.Exists())
			{
				Report.Info("Mouse Left Click item 'FormRealView.MenuItemTracks'");
			    repo.FormRealView.MenuItemTracks.Click();
			    Report.Info("Mouse Left Click item 'FormTracks.MenuItemC2_HOST_2_Track'");
		        repo.FormTracks.MenuItemConnection2_Track.Click();
		       	Report.Info("Mouse Left Click item 'FormTOAD2.MenuItemTrack_Properties' at 103;14.");
				repo.FormConnection2.MenuItemTrack_Properties.Click();
			}			
			else if (repo.FormRealView.MenuItemTrackNumber2Info.Exists())
			{
			    Report.Info("Mouse Left Click item 'repo.FormRealView.MenuItemTrackNumber2'");
		        repo.FormRealView.MenuItemTrackNumber2.Click();
		       	Report.Info("Mouse Left Click item 'FormTOAD2.MenuItemTrack_Properties' at 103;14.");
				repo.FormConnection2.MenuItemTrack_Properties.Click();
			}
			
			repo.FormRealView.MenuItemTracksInfo.SearchTimeout = OrigDur;
			repo.FormRealView.MenuItemTrackNumber2Info.SearchTimeout = OrigDur1;
		}		
		
		//************************************************************************************//
		//****************************Drops Corresponding Track*******************************//
		//************************************************************************************//
		
		public void DropTrack()
		{			
			Drop_Track.DropTrack.Start();
		}

		//************************************************************************************//
		//***************************Validates Track is Dropped*******************************//
		//************************************************************************************//
		
		public void Validate_DropTrack()
		{
			Duration OrigDur = repo.FormTacViewC2.PictureTrackInfo.SearchTimeout;
			repo.FormTacViewC2.PictureTrackInfo.SearchTimeout = 8000;

			Report.Info("Validating Track #" + TrackNum + " was dropped");
	
			bool result = Validate.NotExists(repo.FormTacViewC2.PictureTrackInfo, Validate.DefaultMessage, false);
			
			if (result == true)
			{
				Report.Success("Successfully dropped track #" + TrackNum);
			}
			else
			{
				Report.Debug("Track #" + TrackNum + " failed to drop within 8 seconds, proceeding to next track creation.");
				Report.Screenshot();				
			}
			
			repo.FormTacViewC2.PictureTrackInfo.SearchTimeout = OrigDur;
		}		
	
		//************************************************************************************//
		//************************Resets Paths Created at Run-Time****************************//
		//************************************************************************************//
		
		public void ResetPaths()
		{
			string currentPath = repo.FormTacViewC2.PictureTrackInfo.Path.ToString();
			repo.FormTacViewC2.PictureTrackInfo.Path = currentPath.Replace(TrackNum, "%track%");
			Report.Info("Resetting repo item FormTacViewC2.PictureTrack repo item to" + repo.FormTacViewC2.PictureTrackInfo.Path.ToString());
		
			string currentPath1 = repo.FormTracks.MenuItemConnection2_TrackInfo.Path.ToString();
			repo.FormTracks.MenuItemConnection2_TrackInfo.Path = currentPath1.Replace(TrackNum, "%track%");
			Report.Info("Resetting repo item FormTracks.MenuItemC2_HOST_2_Track to " + repo.FormTracks.MenuItemConnection2_TrackInfo.Path.ToString());
			
			string currentPath2 = repo.FormRealView.MenuItemTrackNumber2Info.Path.ToString();
			repo.FormRealView.MenuItemTrackNumber2Info.Path = currentPath2.Replace(TrackNum, "%track%");
			Report.Info("Resetting repo item FormRealView.MenuItemTrackNumber2 to " + repo.FormRealView.MenuItemTrackNumber2Info.Path.ToString());
			
			string currentPath3 = repo.FormRealView.MenuItemTrackNumberInfo.Path.ToString();
			repo.FormRealView.MenuItemTrackNumberInfo.Path = currentPath3.Replace(TrackNum, "%track%");
			Report.Info("Resetting repo item FormRealView.MenuItemTrackNumber to " + repo.FormRealView.MenuItemTrackNumberInfo.Path.ToString());
			
			string currentPath4 = repo.FormTracks.MenuItemConnection1_TrackInfo.Path.ToString();
			repo.FormTracks.MenuItemConnection1_TrackInfo.Path = currentPath4.Replace(TrackNum, "%track%");
			Report.Info("Resetting repo item FormTracks.MenuItemC2_HOST_Track to " + repo.FormTracks.MenuItemConnection1_TrackInfo.Path.ToString());		
		}	
		
		//************************************************************************************//
		//*****************************Zooms Out to Locate Track******************************//
		//************************************************************************************//	
		
		public void Zoom500()
		{
			if (ZoomFlag == true)
			{
				Report.Info("Mouse Left Click item 'FormTacViewC2.ButtonSet_Range_to_500_km' at Center.");
				repo.FormTacViewC2.ButtonSet_Range_to_500_km.Click();
				Report.Info("Mouse Left Click item 'FormTacViewC2.Button_Center_on_Own_Site' at Center.");
				repo.FormTacViewC2.Button_Center_on_Own_Site.Click();
				ZoomFlag = false;
			}
		}

		//**************************************************************************************//
		//***************************Ranorex Generated Default Method***************************//
		//**************************************************************************************//
		
		public void ValidateHI()
		{
			//Your code here. Code inside this method will not be changed by the code generator.
			
		}
		
		//**************************************************************************************//
		//*****************************Ranorex Generated Init Method****************************//
		//**************************************************************************************//		

		private void Init()
		{
			// Your recording specific initialization code goes here.
		}

        public void sds()
        {
        }		
	}
}