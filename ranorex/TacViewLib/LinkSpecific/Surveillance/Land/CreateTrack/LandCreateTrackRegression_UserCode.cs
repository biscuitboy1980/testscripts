///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using System.Windows.Forms;

using CommonUtilLib;
using Ranorex;
using Ranorex.Core;

namespace TacViewLib.LinkSpecific.Surveillance.Land.CreateTrack
{
	/// <summary>
	/// The CreateTrack recording.
	/// </summary>
	
	public partial class LandCreateTrackRegression
	{	
		public static bool IndFlag;
		public static int TCount;
		public static string TFValue;
		
		//************************************************************************************//
		//************************Enters Random Point/Track Indicator*************************//
		//************************************************************************************//
		
		public void IndVal()
		{

				try
				{
					repo.FormMain__Land_Point_Track_TN.ListItemPoint_Track_Ind.Click("CenterLeft");
				    Keyboard.Press(Keys.Tab);
				    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List list2 = "//list[@processname='RealView']";
		            int AScount = list2.Items.Count;
		            Random ASvalue = new Random();
					int ASnum = ASvalue.Next(0, AScount);
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormMain__Land_Point_Track_TN.ListItemPoint_Track_Ind);  
		   			string IndValue = accElement.Value;
		   			ValidateTrack.LandValidateTrackRegression.Ind = IndValue;
		   			Report.Info("Point/Track Indicator Entered = " + IndValue);
		   			ValidateTrack.LandValidateTrackRegression.Ind_OOR = false;
		   			IndFlag=false;

					if (ASnum==1)
		   			{
		   				ValidateTrack.LandValidateTrackRegression.IndFlag=true;
		   				IndFlag=true;
		   			}
					else
					{
						ValidateTrack.LandValidateTrackRegression.IndFlag=false;
		   				IndFlag=false;
					}					
				}
				catch (ArgumentOutOfRangeException e)
				{								   			
	
			   			Report.Debug("List Count Out of Range for Point/Track Indicator, List Item Will Not be Validated");
			   			Report.Debug(e.ToString());	
			   			ValidateTrack.LandValidateTrackRegression.Ind_OOR = true;
			   		
				}				
			
		}
		
		//************************************************************************************//
		//*******************************Enters Random Identity*******************************//
		//************************************************************************************//
		
		public void IdVal()
		{
			
				try
				{
					repo.FormMain__Land_Point_Track_TN.ListItemIdentity.Click("CenterLeft");
				    Keyboard.Press(Keys.Tab);
				    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List list2 = "//list[@processname='RealView']";
		            int AScount = list2.Items.Count;
		            Random ASvalue = new Random();
					int ASnum = ASvalue.Next(0, AScount);
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormMain__Land_Point_Track_TN.ListItemIdentity);  
		   			string IDValue = accElement.Value;
		   			ValidateTrack.LandValidateTrackRegression.ID = IDValue;
		   			Report.Info("Identity Entered = " + IDValue);
		   			ValidateTrack.LandValidateTrackRegression.ID_OOR = false;

				}
				catch (ArgumentOutOfRangeException e)
				{								   			
	
			   			Report.Debug("List Count Out of Range for Identity, List Item Will Not be Validated");
			   			Report.Debug(e.ToString());	
			   			ValidateTrack.LandValidateTrackRegression.ID_OOR = true;
			   		
				}						
			
		}		
		
		//************************************************************************************//
		//*******************************Enters Random Platform*******************************//
		//************************************************************************************//
		
		public void PlatVal()
		{

				try
				{
					repo.FormMain__Land_Point_Track_TN.ListItemPlatform.Click("CenterLeft");
				    Keyboard.Press(Keys.Tab);
				    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List list2 = "//list[@processname='RealView']";
		            int AScount = list2.Items.Count;
		            Random ASvalue = new Random();
		            AScount--;
					int ASnum = ASvalue.Next(1, AScount-1);
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormMain__Land_Point_Track_TN.ListItemPlatform);  
		   			string PlatValue = accElement.Value;
		   			ValidateTrack.LandValidateTrackRegression.Plat = PlatValue;
		   			Report.Info("Platform Entered = " + PlatValue);
		   			ValidateTrack.LandValidateTrackRegression.Plat_OOR = false;

				}
				catch (ArgumentOutOfRangeException e)
				{								   			

			   			Report.Debug("List Count Out of Range for Platform, List Item Will Not be Validated");
			   			Report.Debug(e.ToString());	
			   			ValidateTrack.LandValidateTrackRegression.Plat_OOR = true;
			   		
				}					
			
		}		

		//************************************************************************************//
		//*******************************Enters Random Activity*******************************//
		//************************************************************************************//
		
		public void ActVal()
		{

				try
				{
					repo.FormMain__Land_Point_Track_TN.ListItemActivity.Click("CenterLeft");
				    Keyboard.Press(Keys.Tab);
				    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List list2 = "//list[@processname='RealView']";
		            int AScount = list2.Items.Count;
		            Random ASvalue = new Random();
		            AScount--;
					int ASnum = ASvalue.Next(1, AScount-1);
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormMain__Land_Point_Track_TN.ListItemActivity);  
		   			string ActValue = accElement.Value;
		   			ValidateTrack.LandValidateTrackRegression.Act = ActValue;
		   			Report.Info("Activity Entered = " + ActValue);
		   			ValidateTrack.LandValidateTrackRegression.Act_OOR = false;

				}
				catch (ArgumentOutOfRangeException e)
				{								   			

			   			Report.Debug("List Count Out of Range for Activity, List Item Will Not be Validated");
			   			Report.Debug(e.ToString());	
			   			ValidateTrack.LandValidateTrackRegression.Act_OOR = true;
			   		
				}					
			
		}	
		
		//************************************************************************************//
		//*****************************Enters Random Specific Type****************************//
		//************************************************************************************//
		
		public void STypeVal()
		{

				try
				{
					repo.FormMain__Land_Point_Track_TN.ListItemSpecific_Type.Click("CenterLeft");
				    Keyboard.Press(Keys.Tab);
				    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
				    Delay.Seconds(1);
					Ranorex.List list2 = "//list[@processname='RealView']";
		            int AScount = list2.Items.Count;
		            Random ASvalue = new Random();
					int ASnum = ASvalue.Next(1, AScount-1);
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormMain__Land_Point_Track_TN.ListItemSpecific_Type);  
		   			string STypeValue = accElement.Value;
		   			ValidateTrack.LandValidateTrackRegression.SType = STypeValue;
		   			Report.Info("Specific Type Entered = " + STypeValue);
		   			ValidateTrack.LandValidateTrackRegression.Stype_OOR = false;

				}
				catch (ArgumentOutOfRangeException e)
				{								   			

			   			Report.Debug("List Count Out of Range for Specific Type, List Item Will Not be Validated");
			   			Report.Debug(e.ToString());	
			   			ValidateTrack.LandValidateTrackRegression.Stype_OOR = true;
			   		
				}				
			
		}			

		//************************************************************************************//
		//*******************************Enters Random Strength*******************************//
		//************************************************************************************//
		
		public void StrVal()
		{

				try
				{
					repo.FormMain__Land_Point_Track_TN.ListItemStrength.Click("CenterLeft");
				    Keyboard.Press(Keys.Tab);
				    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List list2 = "//list[@processname='RealView']";
		            int AScount = list2.Items.Count;
		            Random ASvalue = new Random();
					int ASnum = ASvalue.Next(1, AScount-1);
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormMain__Land_Point_Track_TN.ListItemStrength);  
		   			string StrValue = accElement.Value;
		   			ValidateTrack.LandValidateTrackRegression.Str = StrValue;
		   			Report.Info("Strength Entered = " + StrValue);
		   			ValidateTrack.LandValidateTrackRegression.Strength_OOR = false;

				}
				catch (ArgumentOutOfRangeException e)
				{								   			
	
			   			Report.Debug("List Count Out of Range for Strength, List Item Will Not be Validated");
			   			Report.Debug(e.ToString());	
			   			ValidateTrack.LandValidateTrackRegression.Strength_OOR = true;
			   		
				}									
			
		}		
		
		//************************************************************************************//
		//***************************Enters Random Elevation Value****************************//
		//************************************************************************************//
		
		public void ElvVal()
		{
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			repo.FormMain__Land_Point_Track_TN.ListItemElevation__ft.Click("CenterLeft");
		    Keyboard.Press(Keys.Tab);
			string b = SharedFunctions.Random(1, 2046);
			int c = Int32.Parse(b);
			c=c*25;
			string d = c.ToString();
			Keyboard.Press(d);
   			string ElvValue = d;
   			ValidateTrack.LandValidateTrackRegression.Elv = ElvValue;
   			Report.Info("Elevation Value Entered = " + ElvValue);
		}				

		//************************************************************************************//
		//******************************Enters Random HAE Value*******************************//
		//************************************************************************************//
		
		public void HAEVal()
		{
			repo.FormMain__Land_Point_Track_TN.ListItemHAE.Click("CenterLeft");
		    Keyboard.Press(Keys.Tab);
			Random random = new Random();
			double a = random.Next(-159688, 159688);
			a = a*.01;
			Math.Round(a, 2);
			string b = a.ToString();
			Keyboard.Press(b);
   			string HAEValue = b;
   			ValidateTrack.LandValidateTrackRegression.HAE = HAEValue;
   			Report.Info("HAE Value Entered = " + HAEValue);
		}	

		//************************************************************************************//
		//*********Enters Random Track Quality if Point Type Indicator is set to Track********//
		//************************************************************************************//
		  
		public void TQ()
		{
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			
			if (IndFlag == true)
			{
	   			repo.FormMain__Land_Point_Track_TN.ListItemLocal_TQ.Click("CenterLeft");
			    Keyboard.Press(Keys.Tab);
				string d = SharedFunctions.Random(1, 15);
				Keyboard.Press(d);
	   			string TQValue = d;
	   			ValidateTrack.LandValidateTrackRegression.TQ = TQValue;
	   			Report.Info("Track Quality Entered = " + TQValue);
	   			ValidateTrack.LandValidateTrackRegression.TQFlag = true;
			}
		}
		
		//************************************************************************************//
		//**********************Stores Reporting Unit to Variable*****************************//
		//************************************************************************************//
		
		public void ReportingUnitval()
		{
			Accessible accElement3 = new Accessible(repo.FormMainCreate.ListItemReporting_Unit);  
			string ReportingUnit = accElement3.Value;
			TacViewLib.LinkSpecific.Surveillance.Land.ValidateTrack.LandValidateTrackRegression.RU = ReportingUnit;
		}			
		
		//************************************************************************************//
		//********************Enters Random Course and Speed if Land Track********************//
		//************************************************************************************//
		
		public void CrsSpdVal()
		{
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			
			if (IndFlag)
			{
				//Velocity
				repo.FormMain__Land_Point_Track_TN.ListItemSpeedVelocity.Click("CenterLeft");
			    Keyboard.Press(Keys.Tab);
				string b = SharedFunctions.Random(1, 4092);
				Keyboard.Press(b);
				Accessible accElement = new Accessible(repo.FormMain__Land_Point_Track_TN.ListItemSpeedVelocity);  
	   			string VelValue = b;
	   			ValidateTrack.LandValidateTrackRegression.Vel = VelValue;
	   			Report.Info("Velocity Value Entered = " + VelValue);			
		
				//True Course
				repo.FormMain__Land_Point_Track_TN.ListItemTrue_Course.Click("CenterLeft");
			    Keyboard.Press(Keys.Tab);
				string c = SharedFunctions.Random(1, 359);
				Keyboard.Press(c);
				Keyboard.Press(Keys.Tab); 
	   			string CrsValue = c;
	   			ValidateTrack.LandValidateTrackRegression.Crs = CrsValue;
	   			Report.Info("Course Value Entered = " + CrsValue);

	   			//Magnetic Course
				Accessible accElement1 = new Accessible(repo.FormMain__Land_Point_Track_TN.ListItemMagnetic_Course);  
	   			string MagValue = accElement1.Value;
	   			ValidateTrack.LandValidateTrackRegression.MagCrs = MagValue;
	   			Report.Info("Magnetic Course Value Entered = " + MagValue);
			}
		}			
		
		//************************************************************************************//
		//******************************Enters Random HI Priority*****************************//
		//************************************************************************************//
		
		public void HiPrival()
		{

				try
				{
					repo.FormMainCreate.ListItemHi_Priority.Click("CenterLeft");
				    Keyboard.Press(Keys.Tab);
				    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List list2 = "//list[@processname='RealView']";
		            int AScount = list2.Items.Count;
		            Random ASvalue = new Random();
					int ASnum = ASvalue.Next(0, AScount);
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click();
					Accessible accElement = new Accessible(repo.FormMainCreate.ListItemHi_Priority);  
		   			string HiPriValue = accElement.Value;
		   			ValidateTrack.LandValidateTrackRegression.Hi = HiPriValue;
		   			Report.Info("Hi Priority Value Entered = " + HiPriValue);
		   			ValidateTrack.LandValidateTrackRegression.HiPri_OOR = false;

				}
				catch (ArgumentOutOfRangeException e)
				{								   			

			   			Report.Debug("List Count Out of Range for Hi Priority, List Item Will Not be Validated");
			   			Report.Debug(e.ToString());	
			   			ValidateTrack.LandValidateTrackRegression.HiPri_OOR = true;
			   		
				}				
			
		}			
		
		//************************************************************************************//
		//*****************************Enters Random Mode I Value*****************************//
		//************************************************************************************//
		
		public void Mode1Val()
		{

				try
				{
					repo.FormMain__Land_Point_Track_TN.ListItemMode_1_Code.Click("CenterLeft");
				    Keyboard.Press(Keys.Tab);
				    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List list2 = "//list[@processname='RealView']";
		            int AScount = list2.Items.Count;
		            Random ASvalue = new Random();
					int ASnum = ASvalue.Next(1, AScount-1);
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click();
					Accessible accElement = new Accessible(repo.FormMain__Land_Point_Track_TN.ListItemMode_1_Code);  
		   			string M1Value = accElement.Value;
		   			ValidateTrack.LandValidateTrackRegression.M1 = M1Value;
		   			Report.Info("Mode 1 Value Entered = " + M1Value);	
		   			ValidateTrack.LandValidateTrackRegression.Mode1_OOR = false;

				}
				catch (ArgumentOutOfRangeException e)
				{								   			
	
			   			Report.Debug("List Count Out of Range for Mode 1, List Item Will Not be Validated");
			   			Report.Debug(e.ToString());	
			   			ValidateTrack.LandValidateTrackRegression.Mode1_OOR = true;
			   		
				}					
			
		}		
		
		//************************************************************************************//
		//***************************Enters Random Mode 2 Value*******************************//
		//************************************************************************************//
		
		public void Mode2Val()
		{
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			repo.FormMain__Land_Point_Track_TN.ListItemMode_2_Code.Click("CenterLeft");
		    Keyboard.Press(Keys.Tab);
			string a = SharedFunctions.Random(1, 4095);
			string b = SharedFunctions.DecimalToBase(Convert.ToInt32(a), 8);
			Keyboard.Press(b);
			Accessible accElement = new Accessible(repo.FormMain__Land_Point_Track_TN.ListItemMode_2_Code);  
   			string M2Value = b;
   			ValidateTrack.LandValidateTrackRegression.M2 = M2Value;
   			Report.Info("Mode 2 Value Entered = " + M2Value);
		}	
		
		//************************************************************************************//
		//***************************Enters Random Mode 3 Value*******************************//
		//************************************************************************************//
		
		public void Mode3Val()
		{
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			repo.FormMain__Land_Point_Track_TN.ListItemMode_3_Code.Click("CenterLeft");
		    Keyboard.Press(Keys.Tab);
			string a = SharedFunctions.Random(1, 4095);
			string b = SharedFunctions.DecimalToBase(Convert.ToInt32(a), 8);
			Keyboard.Press(b);
			Accessible accElement = new Accessible(repo.FormMain__Land_Point_Track_TN.ListItemMode_3_Code);  
   			string M3Value = b;
   			ValidateTrack.LandValidateTrackRegression.M3 = M3Value;
   			Report.Info("Mode 3 Value Entered = " + M3Value);
		}		
		
		//************************************************************************************//
		//************************Enters Random Mode 4 Indicator Value************************//
		//************************************************************************************//
		
		public void Mode4Val()
		{			

				try
				{
					repo.FormMain__Land_Point_Track_TN.ListItemMode_4_Indicator.Click("CenterLeft");
				    Keyboard.Press(Keys.Tab);
				    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List list2 = "//list[@processname='RealView']";
		            int AScount = list2.Items.Count;
		            Random ASvalue = new Random();
					int ASnum = ASvalue.Next(0, AScount);
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click();
					Accessible accElement = new Accessible(repo.FormMain__Land_Point_Track_TN.ListItemMode_4_Indicator);  
		   			string M4Value = accElement.Value;
		   			ValidateTrack.LandValidateTrackRegression.M4 = M4Value;
		   			Report.Info("Mode 4 Indicator Value Entered = " + M4Value);
		   			ValidateTrack.LandValidateTrackRegression.Mode4_OOR = false;

				}
				catch (ArgumentOutOfRangeException e)
				{								   			

			   			Report.Debug("List Count Out of Range for Mode 4, List Item Will Not be Validated");
			   			Report.Debug(e.ToString());	
			   			ValidateTrack.LandValidateTrackRegression.Mode4_OOR = true;
			   		
				}					
			
		}		
		
		//************************************************************************************//
		//***********************Enters Random Mode 5 Indicator Value*************************//
		//************************************************************************************//
		
		public void Mode5Val()
		{

				try
				{
					repo.FormMain__Land_Point_Track_TN.ListItemMode_5_Indicator.Click("CenterLeft");
				    Keyboard.Press(Keys.Tab);
				    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List list2 = "//list[@processname='RealView']";
		            int AScount = list2.Items.Count;
		            Random ASvalue = new Random();
					int ASnum = ASvalue.Next(1, AScount-1);
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click();
					Accessible accElement = new Accessible(repo.FormMain__Land_Point_Track_TN.ListItemMode_5_Indicator);  
		   			string M5Value = accElement.Value;
		   			ValidateTrack.LandValidateTrackRegression.M5 = M5Value;
		   			Report.Info("Mode 5 Indicator Value Entered = " + M5Value);
		   			ValidateTrack.LandValidateTrackRegression.Mode5_OOR = false;

				}
				catch (ArgumentOutOfRangeException e)
				{								   			

			   			Report.Debug("List Count Out of Range for Mode 5, List Item Will Not be Validated");
			   			Report.Debug(e.ToString());	
			   			ValidateTrack.LandValidateTrackRegression.Mode5_OOR = true;
			   		
				}					
			
		}
		
		//************************************************************************************//
		//**********************Enters Random Mode 5 Nationality Value************************//
		//************************************************************************************//
		
		public void Mode5NatVal()
		{

				try
				{
					repo.FormMain__Land_Point_Track_TN.ListItemMode_5_Nationality.Click();
				    Keyboard.Press(Keys.Tab);
				    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List list2 = "//list[@processname='RealView']";
		            int AScount = list2.Items.Count;
		            Random ASvalue = new Random();
					int ASnum = ASvalue.Next(1, AScount-1);
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click();
					Accessible accElement = new Accessible(repo.FormMain__Land_Point_Track_TN.ListItemMode_5_Nationality);  
		   			string M5NatValue = accElement.Value;
		   			ValidateTrack.LandValidateTrackRegression.M5Nat = M5NatValue;
		   			Report.Info("Mode 5 Nationality Value Entered = " + M5NatValue);
		   			ValidateTrack.LandValidateTrackRegression.Mode5Nat_OOR = false;
		
				}
				catch (ArgumentOutOfRangeException e)
				{								   			

			   			Report.Debug("List Count Out of Range for Mode 5 Nationality, List Item Will Not be Validated");
			   			Report.Debug(e.ToString());	
			   			ValidateTrack.LandValidateTrackRegression.Mode5Nat_OOR = true;
			   		
				}					
			
		}		
		
		//************************************************************************************//
		//***************************Enters Random Mode 5 ID Value****************************//
		//************************************************************************************//
		
		public void Mode5IDVal()
		{
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			repo.FormMain__Land_Point_Track_TN.ListItemMode_5_Platform_ID.Click();
		    Keyboard.Press(Keys.Tab);
			string b = SharedFunctions.Random(1, 16383);
			Keyboard.Press(b);
			Accessible accElement = new Accessible(repo.FormMain__Land_Point_Track_TN.ListItemMode_5_Platform_ID);  
   			string M5IDValue = b;
   			ValidateTrack.LandValidateTrackRegression.M5ID = M5IDValue;
   			Report.Info("Mode 5 ID Value Entered = " + M5IDValue);
		}	
				
		//************************************************************************************//
		//*********************************Enters Random SPI**********************************//
		//************************************************************************************//
		
		public void SPIVal()
		{

				try
				{
					repo.FormMain__Land_Point_Track_TN.ListItemSPI.Click("CenterLeft");
				    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List list2 = "//list[@processname='RealView']";
		            int AScount = list2.Items.Count;
		            Random ASvalue = new Random();
					int ASnum = ASvalue.Next(0, AScount);
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormMain__Land_Point_Track_TN.ListItemSPI);  
		   			string SPIValue = accElement.Value;
		   			ValidateTrack.LandValidateTrackRegression.SPI = SPIValue;
		   			Report.Info("SPI Value Entered = " + SPIValue);
		   			ValidateTrack.LandValidateTrackRegression.SPI_OOR = false;

		   			if (AScount==1)
		   			{
		   				ValidateTrack.LandValidateTrackRegression.SPIFlag=true;	
		   			}   
		   			else
		   			{
		   				ValidateTrack.LandValidateTrackRegression.SPIFlag=false;	
		   			}
				}
				catch (ArgumentOutOfRangeException e)
				{								   			
	
			   			Report.Debug("List Count Out of Range for SPI, List Item Will Not be Validated");
			   			Report.Debug(e.ToString());	
			   			ValidateTrack.LandValidateTrackRegression.SPI_OOR = true;
			   		
				}					
				
		}			

		//************************************************************************************//
		//***********************Enters Random Passive/Active Indicator***********************//
		//************************************************************************************//
		
		public void PassActVal()
		{

				try
				{
					repo.FormMain__Land_Point_Track_TN.ListItemPassive_Active_Ind.Click("CenterLeft");
				    Keyboard.Press(Keys.Tab);
				    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List list2 = "//list[@processname='RealView']";
		            int AScount = list2.Items.Count;
		            Random ASvalue = new Random();
					int ASnum = ASvalue.Next(0, AScount);
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormMain__Land_Point_Track_TN.ListItemPassive_Active_Ind);  
		   			string PassActValue = accElement.Value;
		   			ValidateTrack.LandValidateTrackRegression.PassAct = PassActValue;
		   			Report.Info("Passive/Active Indicator Value Entered = " + PassActValue);		
		   			ValidateTrack.LandValidateTrackRegression.PAInd_OOR = false;

				}
				catch (ArgumentOutOfRangeException e)
				{								   			

			   			Report.Debug("List Count Out of Range for Passive/Active Indicator, List Item Will Not be Validated");
			   			Report.Debug(e.ToString());	
			   			ValidateTrack.LandValidateTrackRegression.PAInd_OOR = true;
			   		
				}					
			
		}	
		
		//************************************************************************************//
		//***************************Enters Random Special Interest***************************//
		//************************************************************************************//
		
		public void SpecIntVal()
		{

				try
				{
					repo.FormMain__Land_Point_Track_TN.ListItemSpecial_Interest.Click("CenterLeft");
				    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List list2 = "//list[@processname='RealView']";
		            int AScount = list2.Items.Count;
		            Random ASvalue = new Random();
					int ASnum = ASvalue.Next(0, AScount);
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormMain__Land_Point_Track_TN.ListItemSpecial_Interest);  
		   			string SpecIntValue = accElement.Value;
		   			ValidateTrack.LandValidateTrackRegression.SpecInt = SpecIntValue;
		   			Report.Info("Special Interest Value Entered = " + SpecIntValue);
		   			ValidateTrack.LandValidateTrackRegression.SpecInt_OOR = false;
		
		   			if (AScount==1)
		   			{
		   				ValidateTrack.LandValidateTrackRegression.SpecIntFlag = true;	
		   			} 
		   			else
		   			{
		   				ValidateTrack.LandValidateTrackRegression.SpecIntFlag = false;	
		   			}
				}
				catch (ArgumentOutOfRangeException e)
				{								   			
	
			   			Report.Debug("List Count Out of Range for Special Interest, List Item Will Not be Validated");
			   			Report.Debug(e.ToString());	
			   			ValidateTrack.LandValidateTrackRegression.SpecInt_OOR = true;
			   		
				}					
						
		}			
		
		//************************************************************************************//
		//****************************Enters Random Time Function*****************************//
		//************************************************************************************//
		
		public void TFVal()
		{	

				try
				{
					repo.FormMain__Land_Point_Track_TN.ListItemTime_Function.Click("CenterLeft");
				    Keyboard.Press(Keys.Tab);
				    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List list2 = "//list[@processname='RealView']";
		            int AScount = list2.Items.Count;
		            Random ASvalue = new Random();
					int ASnum = ASvalue.Next(1, AScount-1);
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormMain__Land_Point_Track_TN.ListItemTime_Function);  
		   			TFValue = accElement.Value;
		   			ValidateTrack.LandValidateTrackRegression.TF = TFValue;
		   			Report.Info("Time Function Value Entered = " + TFValue);	
		   			ValidateTrack.LandValidateTrackRegression.TF_OOR = false;

				}
				catch (ArgumentOutOfRangeException e)
				{								   			

			   			Report.Debug("List Count Out of Range for Time Function, List Item Will Not be Validated");
			   			Report.Debug(e.ToString());	
			   			ValidateTrack.LandValidateTrackRegression.TF_OOR = true;
			   		
				}					
				
		}
		

		
			
		//************************************************************************************//
		//*******************************Enters Hour**********************************//
		//************************************************************************************//
	
		public void HourVal()
		{
			repo.FormMain__Land_Point_Track_TN.ListItemHour.Click("CenterLeft");
			string a = System.DateTime.Now.ToString("HH");
			string b = a.TrimStart('0');        	
			int HRVal = Convert.ToInt32(b);

			if (TFValue == "DEACTIVATION TIME" || TFValue == "ARRIVAL TIME")
			{
				
				if (HRVal == 23)
				{	
					HRVal = 00;
					string c = Convert.ToString(HRVal);
					repo.FormMain__Land_Point_Track_TN.ListItemHour.Click("CenterLeft");
		    		Keyboard.Press(Keys.Tab);
					Keyboard.Press(c);
	   				ValidateTrack.LandValidateTrackRegression.HR = c;
	   				Report.Info("Hour Value Entered = " + c);
				}
				
				else
				{	
					HRVal++;
					string c = Convert.ToString(HRVal);
					repo.FormMain__Land_Point_Track_TN.ListItemHour.Click("CenterLeft");
		    		Keyboard.Press(Keys.Tab);
					Keyboard.Press(c);
	   				ValidateTrack.LandValidateTrackRegression.HR = c;
	   				Report.Info("Hour Value Entered = " + c);
				}
			    	
	
			}
			
			else
			{
				repo.FormMain__Land_Point_Track_TN.ListItemHour.Click("CenterLeft");
			    Keyboard.Press(Keys.Tab);
				Keyboard.Press(b);
	   			ValidateTrack.LandValidateTrackRegression.HR = b;
	   			Report.Info("Hour Value Entered = " + b);	
			}
			

		}
		
		//************************************************************************************//
		//********************************Enters Current Minute*******************************//
		//************************************************************************************//
				
		public void MinuteVal()
		{
			repo.FormMain__Land_Point_Track_TN.ListItemMinute.Click("CenterLeft");
			Keyboard.Press(Keys.Tab);
			string a = System.DateTime.Now.ToString("mm");
			string b = a.TrimStart('0');        	
			Keyboard.Press(b);
		   	ValidateTrack.LandValidateTrackRegression.MN = b;
	   		Report.Info("Minute Value Entered = " + b);
		}		
		
		//************************************************************************************//
		//***********************Enters Random Total Number of Vehicles***********************//
		//************************************************************************************//
		
		public void TotVehVal()
		{

				try
				{
					repo.FormMain__Land_Point_Track_TN.ListItemTotal_Number_of_Vehicles.Click("CenterLeft");
				    Keyboard.Press(Keys.Tab);
				    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List list2 = "//list[@processname='RealView']";
		            int AScount = list2.Items.Count;
		            Random ASvalue = new Random();
					int ASnum = ASvalue.Next(1, AScount-1);
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormMain__Land_Point_Track_TN.ListItemTotal_Number_of_Vehicles);  
		   			string TotVehValue = accElement.Value;
		   			ValidateTrack.LandValidateTrackRegression.TotVeh = TotVehValue;
		   			Report.Info("Total Number of Vehicles Value Entered = " + TotVehValue);	
		   			ValidateTrack.LandValidateTrackRegression.TotVeh_OOR = false;

				}
				catch (ArgumentOutOfRangeException e)
				{								   			

			   			Report.Debug("List Count Out of Range for Total Number of Vehicles, List Item Will Not be Validated");
			   			Report.Debug(e.ToString());	
			   			ValidateTrack.LandValidateTrackRegression.TotVeh_OOR = true;
			   	
				}				
			
		}		
		
		//************************************************************************************//
		//**********************Enters Random Percent of Tracked Vehicles*********************//
		//************************************************************************************//
		
		public void PerVehVal()
		{

				try
				{
					repo.FormMain__Land_Point_Track_TN.ListItemPercent_of_Tracked_Vehic.Click("CenterLeft");
				    Keyboard.Press(Keys.Tab);
				    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List list2 = "//list[@processname='RealView']";
		            int AScount = list2.Items.Count;
		            Random ASvalue = new Random();
					int ASnum = ASvalue.Next(1, AScount-1);
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormMain__Land_Point_Track_TN.ListItemPercent_of_Tracked_Vehic);  
		   			string PerVehValue = accElement.Value;
		   			ValidateTrack.LandValidateTrackRegression.PerVeh = PerVehValue;
		   			Report.Info("Percent of Tracked Vehicles Entered = " + PerVehValue);	
		   			ValidateTrack.LandValidateTrackRegression.PoTV_OOR = false;

				}
				catch (ArgumentOutOfRangeException e)
				{								   			

			   			Report.Debug("List Count Out of Range for Percent of Tracked Vehicles, List Item Will Not be Validated");
			   			Report.Debug(e.ToString());	
			   			ValidateTrack.LandValidateTrackRegression.PoTV_OOR = true;
			   		
				}					
			
		}	
		
		//************************************************************************************//
		//**************************Enters Random Route Number Value**************************//
		//************************************************************************************//
		
		public void RouteVal()
		{
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			repo.FormMain__Land_Point_Track_TN.ListItemRoute_Number.Click("CenterLeft");
		    Keyboard.Press(Keys.Tab);
			string b = SharedFunctions.Random(1, 1023);
			Keyboard.Press(b);
   			string RouteValue = b;
   			ValidateTrack.LandValidateTrackRegression.Route = RouteValue;
   			Report.Info("Rounte Number Value Entered = " + RouteValue);
		}				
		
		//************************************************************************************//
		//************************Enters Random Track Identifier Value************************//
		//************************************************************************************//
		
		public void TrkIdVal()
		{

				try
				{
					repo.FormMain__Land_Point_Track_TN.ListItemTrack_Identifier.Click("CenterLeft");
				    Keyboard.Press(Keys.Tab);
				    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List list2 = "//list[@processname='RealView']";
		            int AScount = list2.Items.Count;
		            Random ASvalue = new Random();
					int ASnum = ASvalue.Next(1, AScount-1);
			  		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormMain__Land_Point_Track_TN.ListItemTrack_Identifier);  
		   			string TrkIdValue = accElement.Value;
		   			ValidateTrack.LandValidateTrackRegression.TrkId = TrkIdValue;
		   			Report.Info("Track Identifier Entered = " + TrkIdValue);
		   			ValidateTrack.LandValidateTrackRegression.TrkID_OOR = false;

				}
				catch (ArgumentOutOfRangeException e)
				{								   			

			   			Report.Debug("List Count Out of Range for Track Identifier, List Item Will Not be Validated");
			   			Report.Debug(e.ToString());	
			   			ValidateTrack.LandValidateTrackRegression.TrkID_OOR = true;
			   		
				}					
			
		}		
		
		//************************************************************************************//
		//*************************Enters Random Circle/Square Switch*************************//
		//************************************************************************************//
		
		public void CirSqVal()
		{

				try
				{
					repo.FormMain__Land_Point_Track_TN.ListItemAOP_Circle_Square_Switch.Click("CenterLeft");
				    Keyboard.Press(Keys.Tab);
				    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List list2 = "//list[@processname='RealView']";
		            int AScount = list2.Items.Count;
		            Random ASvalue = new Random();
					int ASnum = ASvalue.Next(1, AScount-1);
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormMain__Land_Point_Track_TN.ListItemAOP_Circle_Square_Switch);  
		   			string CirSqValue = accElement.Value;
		   			ValidateTrack.LandValidateTrackRegression.CirSq = CirSqValue;
		   			Report.Info("Circle/Square Switch Value Entered = " + CirSqValue);
		   			ValidateTrack.LandValidateTrackRegression.CirSqr_OOR = false;

				}
				catch (ArgumentOutOfRangeException e)
				{								   			

			   			Report.Debug("List Count Out of Range for Circle/Square Switch, List Item Will Not be Validated");
			   			Report.Debug(e.ToString());	
			   			ValidateTrack.LandValidateTrackRegression.CirSqr_OOR = true;
			   		
				}					
			
		}					
				
		//************************************************************************************//
		//***************************Enters Random AOP Major value****************************//
		//************************************************************************************//		
		
		public void AOPMajVal()
		{
			repo.FormMain__Land_Point_Track_TN.ListItemAOP_Major_Axis.Click("CenterLeft");
		    Keyboard.Press(Keys.Tab);
			Random random = new Random();
			double c = random.Next(0, 8257);
			c = c*.01;
			c=Math.Round(c, 2);
			string d = c.ToString();
			Keyboard.Press(d);
			ValidateTrack.LandValidateTrackRegression.AxisMaj = d;
			Report.Info("AOP Major Axis Value Entered = " + d);			
		}

		//************************************************************************************//
		//***************************Enters Random AOP Minor value****************************//
		//************************************************************************************//	
		
		public void AOPMinVal()
		{
			repo.FormMain__Land_Point_Track_TN.ListItemAOP_Minor_Axis.Click("CenterLeft");
		    Keyboard.Press(Keys.Tab);
			Random random = new Random();
			double e = random.Next(0, 8257);
			e = e*.01;
			e=Math.Round(e, 2);
			string f = e.ToString();			
			Keyboard.Press(f);	
			ValidateTrack.LandValidateTrackRegression.AxisMin = f;
			Report.Info("AOP Minor Axis Value Entered = " + f);
		}	
		
		//************************************************************************************//
		//******************************Enters Random Orientation*****************************//
		//************************************************************************************//
		
		public void OrientVal()
		{
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			repo.FormMain__Land_Point_Track_TN.ListItemAOP_Orientation.Click("CenterLeft");
		    Keyboard.Press(Keys.Tab);
			string b = SharedFunctions.Random(1, 180);
			Keyboard.Press(b);
   			string OrientValue = b;
   			ValidateTrack.LandValidateTrackRegression.Orient = OrientValue;
   			Report.Info("Orientation Value Entered = " + OrientValue);
		}	
		
		//************************************************************************************//
		//***********************************Enters IDL TN************************************//
		//************************************************************************************//
		
		public void IDLval()
		{
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			repo.FormMainCreate.ListItemIDL_TN.Click("CenterLeft");
		    Keyboard.Press(Keys.Tab);
		    string a = SharedFunctions.IDL_TN();
			Keyboard.Press(a);
   			string OrientValue = a;
   			ValidateTrack.LandValidateTrackRegression.IDL = a;
   			Report.Info("IDL TN Value Entered = " + a);
		}	
		
		//************************************************************************************//
		//**********************************Enters TADIL TN***********************************//
		//************************************************************************************//
		
		public void TADILVal()
		{
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			repo.FormMain__Land_Point_Track_TN.ListItemTADIL_TN.Click("CenterLeft");
		    Keyboard.Press(Keys.Tab);
		    string a = SharedFunctions.Random(128, 4094);
			string b = SharedFunctions.DecimalToBase(Convert.ToInt32(a), 8);
			Keyboard.Press(b);
   			string OrientValue = b;
   			ValidateTrack.LandValidateTrackRegression.TADIL = b;
   			Report.Info("TADIL TN Value Entered = " + b);
		}	
		
		//************************************************************************************//
		//**********************************Enters ATDIL1 TN**********************************//
		//************************************************************************************//
		
		public void ATDL1Val()
		{
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			repo.FormMain__Land_Point_Track_TN.ListItemATDL1_TN.Click("CenterLeft");
		    Keyboard.Press(Keys.Tab);
		    string a = SharedFunctions.ATDL1_TN();
			Keyboard.Press(a);
   			string OrientValue = a;
   			ValidateTrack.LandValidateTrackRegression.ATDL1 = a;
   			Report.Info("ATDIL1 TN Value Entered = " + a);
		}			
		
		//************************************************************************************//
		//**********************************Enters NL1 TN**********************************//
		//************************************************************************************//
		
		public void NL1Val()
		{
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			repo.FormMain__Land_Point_Track_TN.ListItemNL1_TN.Click("CenterLeft");
		    Keyboard.Press(Keys.Tab);
		    string a = SharedFunctions.NATO_TN();
			Keyboard.Press(a);
   			string OrientValue = a;
   			ValidateTrack.LandValidateTrackRegression.NL1 = a;
   			Report.Info("NL1 TN Value Entered = " + a);
		}		
		
		//************************************************************************************//
		//**********************************Enters TADILJ TN**********************************//
		//************************************************************************************//
		
		public void TADILJVal()
		{
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			repo.FormMain__Land_Point_Track_TN.ListItemTADIL_J_TN.Click("CenterLeft");
		    Keyboard.Press(Keys.Tab);
		    string a = SharedFunctions.Random(128, 32766);
			string b = SharedFunctions.DecimalToBase(Convert.ToInt32(a), 8);
			Keyboard.Press(b);
   			string OrientValue = b;
   			ValidateTrack.LandValidateTrackRegression.TADILJ = b;
   			Report.Info("TADILJ TN Value Entered = " + b);
		}	
		
		//************************************************************************************//
		//********************************Enters External TN**********************************//
		//************************************************************************************//
		
		public void ExtVal()
		{
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			repo.FormMain__Land_Point_Track_TN.ListItemExternal_TN.Click("CenterLeft");
		    Keyboard.Press(Keys.Tab);
		    string a = SharedFunctions.Random(128, 32766);
			string b = SharedFunctions.DecimalToBase(Convert.ToInt32(a), 8);
			Keyboard.Press(b);
   			string OrientValue = b;
   			ValidateTrack.LandValidateTrackRegression.Ext = b;
   			Report.Info("External TN Value Entered = " + b);
		}	
		
		//************************************************************************************//
		//*********************************Gets Track Count***********************************//
		//************************************************************************************//
		
		public void GetTrackCount()
		{			
			Ranorex.Container cont1 = repo.FormTacViewC2.ContainerRvView;
			IList<Picture> list1 = cont1.Find<Picture>(@"/form[@title~'^TacViewC2\ \ \ \(map:\ .*']/element/container/picture[@accessiblevalue='Track']");
			TCount = list1.Count;		    
		}
		
		//************************************************************************************//
		//*********************************Gets Track Number**********************************//
		//************************************************************************************//
		
		public void GetTrackNum()			
		{			
		    TCount++;
		    Accessible pic1 = @"/form[@title~'^TacViewC2\ \ \ \(map:\ .*']/element/container/picture[@accessiblevalue='Track']" + "[" + TCount + "]";
   			Accessible accElement = new Accessible(pic1);  
   			string track1 = accElement.Name;
   			Report.Info("Track Number = " + track1);
   			ValidateTrack.LandValidateTrackRegression.TrackNum = track1;
   			Drop_Track.DropTrack.TrackNum = track1;   			
		}

		//**************************************************************************************//
		//**************************Ranorex Generated Default Method****************************//
		//**************************************************************************************//
		
		static LandCreateTrackRegression()
		{
			//Your recording specific initialization code goes here.
		}
		
		//************************************************************************************//
		//******************************Randomly Plots a Track********************************//
		//************************************************************************************//		
		
		public void RandCoord()
		{	
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
	       	Ranorex.Container test = @"/form[@title~'^TacViewC2\ \ \ \(map:\ .*']/element/container[@accessiblename='RvView']";
	       	var a = test.ScreenRectangle.Width;
	       	var b = test.ScreenRectangle.Height;
	       	int c = Convert.ToInt32(a);
	       	c = c - 100;
	       	int d = Convert.ToInt32(b);
	       	d = d - 100;
	       	string w = SharedFunctions.Random(100, c);
	       	string h = SharedFunctions.Random(100, d);
	    	repo.FormTacViewC2.ContainerRvView.Click(MouseButtons.Right, "" + w + ";" + h + ""); 
	    	 
	    	Duration OrigDur = repo.FormRealView.MenuItemCreate_TrackInfo.SearchTimeout;
			repo.FormRealView.MenuItemCreate_TrackInfo.SearchTimeout = 1000;			
			
			if (repo.FormRealView.MenuItemCreate_TrackInfo.Exists())
			{
				return;
			}			
			else
			{
				RandCoord();
			}
			
			repo.FormRealView.MenuItemCreate_TrackInfo.SearchTimeout = OrigDur;
		}
		
		//**************************************************************************************//
		//****************************Ranorex Generated Init Method*****************************//
		//**************************************************************************************//		

		private void Init()
		{
			// Your recording specific initialization code goes here.
		}	
	}
}