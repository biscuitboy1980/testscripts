///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;

namespace TacViewLib.LinkSpecific.TrackManagement.WeatherOverTarget
{
    /// <summary>
    /// The CreateWOT recording.
    /// </summary>
    [TestModule("acb99de1-f7c2-4050-86ef-e94388dd1b17", ModuleType.Recording, 1)]
    public partial class CreateWOT : ITestModule
    {
        /// <summary>
        /// Holds an instance of the TacViewLib.TacViewLibTrackManagement repository.
        /// </summary>
        public static TacViewLib.TacViewLibTrackManagement repo = TacViewLib.TacViewLibTrackManagement.Instance;

        static CreateWOT instance = new CreateWOT();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public CreateWOT()
        {
            tracknumber = "";
            Connection1 = "";
            Connection2 = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static CreateWOT Instance
        {
            get { return instance; }
        }

#region Variables

        /// <summary>
        /// Gets or sets the value of variable tracknumber.
        /// </summary>
        [TestVariable("d1d89472-de0f-4ff5-876c-f56c5d651161")]
        public string tracknumber
        {
            get { return repo.tracknumber; }
            set { repo.tracknumber = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Connection1.
        /// </summary>
        [TestVariable("8ecedb1f-5c05-4fdd-8956-1f2816f91cbf")]
        public string Connection1
        {
            get { return repo.Connection1; }
            set { repo.Connection1 = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Connection2.
        /// </summary>
        [TestVariable("cdea6444-9499-45fe-b6fc-3becf823b815")]
        public string Connection2
        {
            get { return repo.Connection2; }
            set { repo.Connection2 = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "3.1.1")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "3.1.1")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 250;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.0;

            Init();

            Report.Log(ReportLevel.Info, "Delay", "Waiting for 2000ms.", new RecordItemIndex(0));
            Delay.Duration(2000, false);
            
            SetTrackNumberInRepo();
            Delay.Milliseconds(0);
            
            RightClickTrack();
            Delay.Milliseconds(0);
            
            CreateWeatherOverTarget();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 500ms.", new RecordItemIndex(4));
            Delay.Duration(500, false);
            
            Hour();
            Delay.Milliseconds(0);
            
            Minute();
            Delay.Milliseconds(0);
            
            QNH();
            Delay.Milliseconds(0);
            
            WindDir();
            Delay.Milliseconds(0);
            
            WindSp();
            Delay.Milliseconds(0);
            
            Visibility();
            Delay.Milliseconds(0);
            
            CloudCover1();
            Delay.Milliseconds(0);
            
            CloudHeight1();
            Delay.Milliseconds(0);
            
            CloudCover4();
            Delay.Milliseconds(0);
            
            CloudHeight4();
            Delay.Milliseconds(0);
            
            CloudCover5();
            Delay.Milliseconds(0);
            
            CloudHeight5();
            Delay.Milliseconds(0);
            
            CloudCover6();
            Delay.Milliseconds(0);
            
            CloudHeight6();
            Delay.Milliseconds(0);
            
            ActualWeather();
            Delay.Milliseconds(0);
            
            ActualWeatherDes();
            Delay.Milliseconds(0);
            
            ActualWeatherInt();
            Delay.Milliseconds(0);
            
            HeightOfObs();
            Delay.Milliseconds(0);
            
            RelativeHum();
            Delay.Milliseconds(0);
            
            SWC();
            Delay.Milliseconds(0);
            
            WeatherAmp();
            Delay.Milliseconds(0);
            
            CHLL();
            Delay.Milliseconds(0);
            
            CHUL();
            Delay.Milliseconds(0);
            
            IHLL();
            Delay.Milliseconds(0);
            
            IHUL();
            Delay.Milliseconds(0);
            
            EnRoute();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FormCreate_Weather_Over.ButtonSave' at Center.", repo.FormCreate_Weather_Over.ButtonSaveInfo, new RecordItemIndex(31));
            repo.FormCreate_Weather_Over.ButtonSave.Click();
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
}
