///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
// 
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;

namespace TacViewLib.LinkSpecific.TrackManagement.Correlation
{
    public partial class ValidateCorrelation
    {
		public static string track1;	
		public static string track2;	
		
		public static bool ZoomFlag;
		
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

		//************************************************************************************//
		//*****************************Sets Track Number in Repo******************************//
		//************************************************************************************//
		
		public void SetRetainedTrackNumberInRepo()
		{
			tracknumber = track1;	
			Report.Info("Setting tracknumber to " + tracknumber);
		}        
        
		//************************************************************************************//
		//*****************************Validates Track is Retained****************************//
		//************************************************************************************//
		
        public void ValidateRetainedTrack()
        {
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'FormTacViewC2.PictureTrackInfo'.", repo.FormTacViewC2.PictureTrackInfo, new RecordItemIndex(-1));
            Validate.Exists(repo.FormTacViewC2.PictureTrackInfo);
        }
        
		//************************************************************************************//
		//*****************************Sets Track Number in Repo******************************//
		//************************************************************************************//
		
		public void SetDroppedtTrackNumberInRepo()
		{
			tracknumber = track2;	
			Report.Info("Setting tracknumber to " + tracknumber);
		}        
		
		//************************************************************************************//
		//*****************************Validates Track is Retained****************************//
		//************************************************************************************//
		
		public void ValidateDroppedTrack()
		{
			Duration OrigDur = repo.FormTacViewC2.SelfInfo.SearchTimeout;
			repo.FormTacViewC2.SelfInfo.SearchTimeout = 8000;			
			Duration OrigDur1 = repo.FormTacViewC2.PictureTrackInfo.SearchTimeout;
			repo.FormTacViewC2.PictureTrackInfo.SearchTimeout = 8000;

			Report.Info("Validating Track #" + track2 + " was dropped");
	
			bool result = Validate.NotExists(repo.FormTacViewC2.PictureTrackInfo, Validate.DefaultMessage, false);
			
			if (result == true)
			{
				Report.Success("Successfully correlated track #" + track1 + " and track #" +track2);
			}
			else
			{
				Report.Error("Unable to correlate track #" + track1 + " and track #" +track2);
				Report.Screenshot();				
			}
			
			repo.FormTacViewC2.PictureTrackInfo.SearchTimeout = OrigDur1;
			repo.FormTacViewC2.SelfInfo.SearchTimeout = OrigDur;
		}
		
		//************************************************************************************//
		//*******************************Right Clicks on Track********************************//
		//************************************************************************************//		
		
		public void RightClickTrack()
		{			
			Duration OrigDur = repo.FormTacViewC2.PictureTrackInfo.SearchTimeout;
			repo.FormTacViewC2.PictureTrackInfo.SearchTimeout = 2000;			
			
			if (repo.FormTacViewC2.PictureTrackInfo.Exists())
			{
				Report.Info("Mouse Right Click item 'FormTacViewC2.PictureTrack' at Center.");
				repo.FormTacViewC2.PictureTrack.Click(MouseButtons.Right);
			}
			else
			{
				ZoomFlag = true;
				Report.Info("Track # " + track1 + " not found on the current display, going to world wide view");
				Report.Screenshot();
				repo.FormTacViewC2.ButtonZoom_Out_Max.Click();
				
				if (repo.FormTacViewC2.PictureTrackInfo.Exists())
				{
					Report.Info("Mouse Right Click item 'FormTacViewC2.PictureTrack' at Center.");
					repo.FormTacViewC2.PictureTrack.Click(MouseButtons.Right);
				}
				else
				{
					Report.Error("Unable to find Track # " + track1 + " anywhere in the world");
					Report.Screenshot();
					return;
				}				
			}
			
			repo.FormTacViewC2.PictureTrackInfo.SearchTimeout = OrigDur;
		}		

		//************************************************************************************//
		//****************************Drops Corresponding Track*******************************//
		//************************************************************************************//
		
		public void DropTrack()
		{			
			TrackManagement.DropTrack.DropTrack.Start();
		}

		//************************************************************************************//
		//***************************Validates Track is Dropped*******************************//
		//************************************************************************************//
		
		public void Validate_DropTrack()
		{
			Duration OrigDur = repo.FormTacViewC2.PictureTrackInfo.SearchTimeout;
			repo.FormTacViewC2.PictureTrackInfo.SearchTimeout = 8000;

			Report.Info("Validating Track #" + track1 + " was dropped");
	
			bool result = Validate.NotExists(repo.FormTacViewC2.PictureTrackInfo, Validate.DefaultMessage, false);
			
			if (result == true)
			{
				Report.Success("Successfully dropped track #" + track1);
			}
			else
			{
				Report.Debug("Track #" + track1 + " failed to drop within 8 seconds, proceeding to next track creation.");
				Report.Screenshot();				
			}
			
			repo.FormTacViewC2.PictureTrackInfo.SearchTimeout = OrigDur;
		}			
    }
}