///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;

namespace TacViewLib.LinkSpecific.TrackManagement.AirfieldStatus
{
    /// <summary>
    /// The ValidateAirfieldStatus recording.
    /// </summary>
    [TestModule("dc9cd6d8-e267-4b3b-9fd8-9a481e663334", ModuleType.Recording, 1)]
    public partial class ValidateAirfieldStatus : ITestModule
    {
        /// <summary>
        /// Holds an instance of the TacViewLib.TacViewLibTrackManagement repository.
        /// </summary>
        public static TacViewLib.TacViewLibTrackManagement repo = TacViewLib.TacViewLibTrackManagement.Instance;

        static ValidateAirfieldStatus instance = new ValidateAirfieldStatus();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public ValidateAirfieldStatus()
        {
            tracknumber = "";
            Connection1 = "";
            Connection2 = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static ValidateAirfieldStatus Instance
        {
            get { return instance; }
        }

#region Variables

        /// <summary>
        /// Gets or sets the value of variable tracknumber.
        /// </summary>
        [TestVariable("4f408999-483e-4609-ac15-a37340c148c9")]
        public string tracknumber
        {
            get { return repo.tracknumber; }
            set { repo.tracknumber = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Connection1.
        /// </summary>
        [TestVariable("7916deb2-49fa-4f6e-98cc-d21020c57e5a")]
        public string Connection1
        {
            get { return repo.Connection1; }
            set { repo.Connection1 = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Connection2.
        /// </summary>
        [TestVariable("782ab5db-76a8-432f-8cc1-b135de6c8f01")]
        public string Connection2
        {
            get { return repo.Connection2; }
            set { repo.Connection2 = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "3.1.1")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "3.1.1")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 250;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.0;

            Init();

            Report.Log(ReportLevel.Info, "Delay", "Waiting for 2000ms.", new RecordItemIndex(0));
            Delay.Duration(2000, false);
            
            SetTrackNumberInRepo();
            Delay.Milliseconds(0);
            
            RightClickTrack();
            Delay.Milliseconds(0);
            
            ViewTrackProperties();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 500ms.", new RecordItemIndex(4));
            Delay.Duration(500, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FormMain__Land_Point_Track_TN.TabPageAirfield_Status__Land_Po' at Center.", repo.FormMain__Land_Point_Track_TN.TabPageAirfield_Status__Land_PoInfo, new RecordItemIndex(5));
            repo.FormMain__Land_Point_Track_TN.TabPageAirfield_Status__Land_Po.Click();
            Delay.Milliseconds(0);
            
            ValidateAirStat();
            Delay.Milliseconds(0);
            
            ValidateAirRaid();
            Delay.Milliseconds(0);
            
            ValidateNCI();
            Delay.Milliseconds(0);
            
            ValidateBCI();
            Delay.Milliseconds(0);
            
            ValidateCCI();
            Delay.Milliseconds(0);
            
            ValidateBWS();
            Delay.Milliseconds(0);
            
            ValidateCrash();
            Delay.Milliseconds(0);
            
            ValidateShoradez();
            Delay.Milliseconds(0);
            
            ValidateObsHr();
            Delay.Milliseconds(0);
            
            ValidateObsMin();
            Delay.Milliseconds(0);
            
            ValidateSRI();
            Delay.Milliseconds(0);
            
            ValidateQNH();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left DoubleClick item 'FormMain__Land_Point_Track_TN_Airfield.ListItemAirfield_StatusPlus' at Center.", repo.FormMain__Land_Point_Track_TN_Airfield.ListItemAirfield_StatusPlusInfo, new RecordItemIndex(18));
            repo.FormMain__Land_Point_Track_TN_Airfield.ListItemAirfield_StatusPlus.DoubleClick();
            Delay.Milliseconds(0);
            
            ValidateARDirection();
            Delay.Milliseconds(0);
            
            ValidateARAvailLen();
            Delay.Milliseconds(0);
            
            ValidateARVisRange();
            Delay.Milliseconds(0);
            
            ValidateARStatus();
            Delay.Milliseconds(0);
            
            ValidateARGCA();
            Delay.Milliseconds(0);
            
            ValidateARILS();
            Delay.Milliseconds(0);
            
            ValidateARApproachLight();
            Delay.Milliseconds(0);
            
            ValidateARArrestBar();
            Delay.Milliseconds(0);
            
            ValidateARBrakeAction();
            Delay.Milliseconds(0);
            
            ValidateARArrestWire();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left DoubleClick item 'FormMain__Land_Point_Track_TN_Airfield.ListItemActive_RunwayPlus' at Center.", repo.FormMain__Land_Point_Track_TN_Airfield.ListItemActive_RunwayPlusInfo, new RecordItemIndex(29));
            repo.FormMain__Land_Point_Track_TN_Airfield.ListItemActive_RunwayPlus.DoubleClick();
            Delay.Milliseconds(0);
            
            ValidateWindDir();
            Delay.Milliseconds(0);
            
            ValidateWindSp();
            Delay.Milliseconds(0);
            
            ValidateWindGust();
            Delay.Milliseconds(0);
            
            ValidateCC1();
            Delay.Milliseconds(0);
            
            ValidateCH1();
            Delay.Milliseconds(0);
            
            ValidateCC2();
            Delay.Milliseconds(0);
            
            ValidateCC2();
            Delay.Milliseconds(0);
            
            ValidateCC3();
            Delay.Milliseconds(0);
            
            ValidateCH3();
            Delay.Milliseconds(0);
            
            ValidateVisibilty();
            Delay.Milliseconds(0);
            
            ValidateWindShear();
            Delay.Milliseconds(0);
            
            ValidateAWDes();
            Delay.Milliseconds(0);
            
            ValidateAWIntenseProx();
            Delay.Milliseconds(0);
            
            ValidateActWeather();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left DoubleClick item 'FormMain__Land_Point_Track_TN_Airfield.ListItemWeatherPlus' at Center.", repo.FormMain__Land_Point_Track_TN_Airfield.ListItemWeatherPlusInfo, new RecordItemIndex(44));
            repo.FormMain__Land_Point_Track_TN_Airfield.ListItemWeatherPlus.DoubleClick();
            Delay.Milliseconds(0);
            
            ValidateAVTUR();
            Delay.Milliseconds(0);
            
            ValidateLiquidOxy();
            Delay.Milliseconds(0);
            
            ValidateNitrogen();
            Delay.Milliseconds(0);
            
            ValidateAIM9L();
            Delay.Milliseconds(0);
            
            ValidateAIM9M();
            Delay.Milliseconds(0);
            
            ValidateAIM9P();
            Delay.Milliseconds(0);
            
            ValidateSkyFlash();
            Delay.Milliseconds(0);
            
            ValidateAIM120();
            Delay.Milliseconds(0);
            
            ValidateAIM132();
            Delay.Milliseconds(0);
            
            ValidateMagicI();
            Delay.Milliseconds(0);
            
            ValidateMagicII();
            Delay.Milliseconds(0);
            
            ValidateSuper530();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FormMain__Land_Point_Track_TN_Airfield.ListItemMICA_AAM' at Center.", repo.FormMain__Land_Point_Track_TN_Airfield.ListItemMICA_AAMInfo, new RecordItemIndex(57));
            repo.FormMain__Land_Point_Track_TN_Airfield.ListItemMICA_AAM.Click(150);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'PgDn' Press.", new RecordItemIndex(58));
            Keyboard.Press(System.Windows.Forms.Keys.Next, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(150);
            
            ValidateSuper530D();
            Delay.Milliseconds(0);
            
            ValidateMICA();
            Delay.Milliseconds(0);
            
            ValidateAAM1();
            Delay.Milliseconds(0);
            
            ValidateAAM2();
            Delay.Milliseconds(0);
            
            ValidateAAM3();
            Delay.Milliseconds(0);
            
            ValidateAAM4();
            Delay.Milliseconds(0);
            
            ValidateDurandol();
            Delay.Milliseconds(0);
            
            ValidateBAP();
            Delay.Milliseconds(0);
            
            ValidateASM1();
            Delay.Milliseconds(0);
            
            ValidateASM2();
            Delay.Milliseconds(0);
            
            ValidateASM3();
            Delay.Milliseconds(0);
            
            ValidateASM4();
            Delay.Milliseconds(0);
            
            ValidateDepthCharge();
            Delay.Milliseconds(0);
            
            ValidateNDB();
            Delay.Milliseconds(0);
            
            ValidateBomb500();
            Delay.Milliseconds(0);
            
            ValidateBomb1000();
            Delay.Milliseconds(0);
            
            ValidateAmmo20();
            Delay.Milliseconds(0);
            
            ValidateAmmo27();
            Delay.Milliseconds(0);
            
            ValidateAmmo30();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FormMain__Land_Point_Track_TN_Airfield.ButtonCLOSE' at Center.", repo.FormMain__Land_Point_Track_TN_Airfield.ButtonCLOSEInfo, new RecordItemIndex(78));
            repo.FormMain__Land_Point_Track_TN_Airfield.ButtonCLOSE.Click();
            Delay.Milliseconds(0);
            
            RightClickTrack();
            Delay.Milliseconds(0);
            
            DropTrack();
            Delay.Milliseconds(0);
            
            Validate_DropTrack();
            Delay.Milliseconds(0);
            
            Zoom500();
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
}
