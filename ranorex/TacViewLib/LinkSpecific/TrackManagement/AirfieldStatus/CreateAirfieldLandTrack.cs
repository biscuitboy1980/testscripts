///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;

namespace TacViewLib.LinkSpecific.TrackManagement.AirfieldStatus
{
    /// <summary>
    /// The CreateAirfieldLandTrack recording.
    /// </summary>
    [TestModule("b805735a-d109-49c3-9fa0-5eeb6713d111", ModuleType.Recording, 1)]
    public partial class CreateAirfieldLandTrack : ITestModule
    {
        /// <summary>
        /// Holds an instance of the TacViewLib.TacViewLibTrackManagement repository.
        /// </summary>
        public static TacViewLib.TacViewLibTrackManagement repo = TacViewLib.TacViewLibTrackManagement.Instance;

        static CreateAirfieldLandTrack instance = new CreateAirfieldLandTrack();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public CreateAirfieldLandTrack()
        {
            Connection2 = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static CreateAirfieldLandTrack Instance
        {
            get { return instance; }
        }

#region Variables

        /// <summary>
        /// Gets or sets the value of variable Connection1.
        /// </summary>
        [TestVariable("01507ba3-3b9b-4a38-a144-5d239f9d113d")]
        public string Connection1
        {
            get { return repo.Connection1; }
            set { repo.Connection1 = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Connection2.
        /// </summary>
        [TestVariable("513a55e4-d611-4131-a473-ae9d9aa6d89a")]
        public string Connection2
        {
            get { return repo.Connection2; }
            set { repo.Connection2 = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "3.1.1")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "3.1.1")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 250;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.0;

            Init();

            GetTrackCount();
            Delay.Milliseconds(0);
            
            RandCoord();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FormRealView.MenuItemCreate_Track' at Center.", repo.FormRealView.MenuItemCreate_TrackInfo, new RecordItemIndex(2));
            repo.FormRealView.MenuItemCreate_Track.Click(150);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FormCreate_Track.MenuItemConnection1' at Center.", repo.FormCreate_Track.MenuItemConnection1Info, new RecordItemIndex(3));
            repo.FormCreate_Track.MenuItemConnection1.Click(150);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FormConnection1.MenuItemLand_Point_Track' at Center.", repo.FormConnection1.MenuItemLand_Point_TrackInfo, new RecordItemIndex(4));
            repo.FormConnection1.MenuItemLand_Point_Track.Click(150);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FormMain__Land_Point_Track_TN.ListItemIdentity' at CenterLeft.", repo.FormMain__Land_Point_Track_TN.ListItemIdentityInfo, new RecordItemIndex(5));
            repo.FormMain__Land_Point_Track_TN.ListItemIdentity.Click(Location.CenterLeft);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'friend'.", new RecordItemIndex(6));
            Keyboard.Press("friend");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}{Tab}'.", new RecordItemIndex(7));
            Keyboard.Press("{Tab}{Tab}");
            Delay.Milliseconds(50);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'airfield'.", new RecordItemIndex(8));
            Keyboard.Press("airfield");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}'.", new RecordItemIndex(9));
            Keyboard.Press("{Tab}");
            Delay.Milliseconds(150);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FormMain__Land_Point_Track_TN.ButtonSave' at Center.", repo.FormMain__Land_Point_Track_TN.ButtonSaveInfo, new RecordItemIndex(10));
            repo.FormMain__Land_Point_Track_TN.ButtonSave.Click(150);
            Delay.Milliseconds(100);
            
            GetTrackNum();
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
}
