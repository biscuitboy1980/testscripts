///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using System.Windows.Forms;

using CommonUtilLib;
using Ranorex;
using Ranorex.Core;

namespace TacViewLib.LinkSpecific.TrackManagement.AirfieldStatus
{
	/// <summary>
	/// The CreateAirfieldStatus recording.
	/// </summary>
	public partial class CreateAirfieldStatus
	{		
		public static string TrackNum;
		
		//**************************************************************************************//
		//***************************Ranorex Generated Default Method***************************//
		//**************************************************************************************//
		
		static CreateAirfieldStatus()
		{
			//Your recording specific initialization code goes here.
		}
		
		//************************************************************************************//
		//*****************************Sets Track Number in Repo******************************//
		//************************************************************************************//
		
		public void SetTrackNumberInRepo()
		{
			tracknumber = TrackNum;	
		}
		
		//************************************************************************************//
		//***************************Opens Airfield Status Dialog*****************************//
		//************************************************************************************//	
		
		public void CreateAirStatus()
		{			
			Duration OrigDur = repo.FormRealView.MenuItemTracksInfo.SearchTimeout;
			repo.FormRealView.MenuItemTracksInfo.SearchTimeout = 1000;
			Duration OrigDur1 = repo.FormRealView.MenuItemTrackNumber2Info.SearchTimeout;
			repo.FormRealView.MenuItemTrackNumberInfo.SearchTimeout = 1000;			
			
			if (repo.FormRealView.MenuItemTracksInfo.Exists())
			{
				Report.Info("Mouse Left Click item 'FormRealView.MenuItemTracks'");
			    repo.FormRealView.MenuItemTracks.Click("Center");
			    Report.Info("Mouse Left Click item 'FormTracks.MenuItemC2_HOST_Track'");
		        repo.FormTracks.MenuItemC2_HOST_Track.Click("Center");
		       	Report.Info("Mouse Left Click item 'FormTOAD.MenuItemTrack_Management'");
				repo.FormConnection1withTrackNum.MenuItemTrack_Management.Click("Center");
				Report.Info("Mouse Left Click item 'FormTrack_Management.MenuItemCreate_Airfield_Status__' at Center.");
				repo.FormTrack_Management.MenuItemCreate_Airfield_Status__.Click("Center");
			}			
			else if (repo.FormRealView.MenuItemTrackNumberInfo.Exists())
			{
			    Report.Info("Mouse Left Click item 'repo.FormRealView.MenuItemTrackNumber'");
		        repo.FormRealView.MenuItemTrackNumber.Click();
		       	Report.Info("Mouse Left Click item 'FormTOAD.MenuItemTrack_Management'");
				repo.FormConnection1withTrackNum.MenuItemTrack_Management.Click("Center");
				Report.Info("Mouse Left Click item 'FormTrack_Management.MenuItemCreate_Airfield_Status__' at Center.");
				repo.FormTrack_Management.MenuItemCreate_Airfield_Status__.Click("Center");
			}
			
			repo.FormRealView.MenuItemTracksInfo.SearchTimeout = OrigDur;
			repo.FormRealView.MenuItemTrackNumberInfo.SearchTimeout = OrigDur1;
		}
		
		//************************************************************************************//
		//*************************Enters Random Airfield Status Value************************//
		//************************************************************************************//
		
		public void AirfieldStat()
		{

				repo.FormCreate_Airfield_Status.ListItemAirfield_Status.Click("CenterLeft");
			    Keyboard.Press(Keys.Tab);
			    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
				Ranorex.List list2 = "//list[@processname='RealView']";
	            int AScount = list2.Items.Count;
	            Random ASvalue = new Random();
				int ASnum = ASvalue.Next(0, AScount);
				if (ASnum < 0 || ASnum > AScount)
				{

						Keyboard.Press(Keys.Escape);
						Report.Debug("List Count Out of Range for Airfield Status, Field will not be validated");
						ValidateAirfieldStatus.AirStat_OOR=true;
					
				}
				else
				{
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormCreate_Airfield_Status.ListItemAirfield_Status);  
		   			string AirStatValue = accElement.Value;
		   			ValidateAirfieldStatus.AirStat = AirStatValue;
		   			Report.Info("Airfield Status Value Entered = " + AirStatValue);
		   		
				}
		
		}	
		
		//************************************************************************************//
		//*************************Enters Random Air Raid State Value*************************//
		//************************************************************************************//
		
		public void AirRaidStat()
		{

				repo.FormCreate_Airfield_Status.ListItemAir_Raid_State.Click("CenterLeft");
			    Keyboard.Press(Keys.Tab);
			    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
				Ranorex.List list2 = "//list[@processname='RealView']";
	            int AScount = list2.Items.Count;
	            Random ASvalue = new Random();
				int ASnum = ASvalue.Next(1, AScount-1);
				if (ASnum < 1 || ASnum > AScount)
				{

						Keyboard.Press(Keys.Escape);
						Report.Debug("List Count Out of Range for Air Raid State, Field will not be validated");
						ValidateAirfieldStatus.AirRaid_OOR=true;
				
				}
				else
				{
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormCreate_Airfield_Status.ListItemAir_Raid_State);  
		   			string AirRaidValue = accElement.Value;
		   			ValidateAirfieldStatus.AirRaid = AirRaidValue;
		   			Report.Info("Air Raid State Value Entered = " + AirRaidValue);
		   			
				}
			
		}	
		
		//************************************************************************************//
		//****************Enters Random Nuclear Contamination Indicator Value*****************//
		//************************************************************************************//
		
		public void NucContInd()
		{

				repo.FormCreate_Airfield_Status.ListItemNuclear_Contamination_In.Click("CenterLeft");
			    Keyboard.Press(Keys.Tab);
			    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
				Ranorex.List list2 = "//list[@processname='RealView']";
	            int AScount = list2.Items.Count;
	            Random ASvalue = new Random();
				int ASnum = ASvalue.Next(0, AScount);
				if (ASnum < 0 || ASnum > AScount)
				{

						Keyboard.Press(Keys.Escape);
						Report.Debug("List Count Out of Range for Nuclear Contamination Indicator, Field will not be validated");
						ValidateAirfieldStatus.NucContInd_OOR=true;
					
				}
				else
				{
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormCreate_Airfield_Status.ListItemNuclear_Contamination_In);  
		   			string NucContIndValue = accElement.Value;
		   			ValidateAirfieldStatus.NucContInd = NucContIndValue;
		   			Report.Info("Nuclear Contamination Indicator Value Entered = " + NucContIndValue);
		   		
				}
			
		}			
		
		//************************************************************************************//
		//**************Enters Random Biological Contamination Indicator Value****************//
		//************************************************************************************//
		
		public void BioContInd()
		{

				repo.FormCreate_Airfield_Status.ListItemBiological_Contamination.Click("CenterLeft");
			    Keyboard.Press(Keys.Tab);
			    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
				Ranorex.List list2 = "//list[@processname='RealView']";
	            int AScount = list2.Items.Count;
	            Random ASvalue = new Random();
				int ASnum = ASvalue.Next(0, AScount);
				if (ASnum < 0 || ASnum > AScount)
				{

						Keyboard.Press(Keys.Escape);
						Report.Debug("List Count Out of Range for Biological Contamination Indicator, Field will not be validated");
						ValidateAirfieldStatus.BioContInd_OOR=true;
					
				}
				else
				{
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormCreate_Airfield_Status.ListItemBiological_Contamination);  
		   			string BioContIndValue = accElement.Value;
		   			ValidateAirfieldStatus.BioContInd = BioContIndValue;
		   			Report.Info("Biological Contamination Indicator Value Entered = " + BioContIndValue);
		   		
				}
			
		}		
		
		//************************************************************************************//
		//****************Enters Random Chemical Contamination Indicator Value****************//
		//************************************************************************************//
		
		public void ChemContInd()
		{

				repo.FormCreate_Airfield_Status.ListItemChemical_Contamination_I.Click("CenterLeft");
			    Keyboard.Press(Keys.Tab);
			    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
				Ranorex.List list2 = "//list[@processname='RealView']";
	            int AScount = list2.Items.Count;
	            Random ASvalue = new Random();
				int ASnum = ASvalue.Next(0, AScount);
				if (ASnum < 0 || ASnum > AScount)
				{

						Keyboard.Press(Keys.Escape);
						Report.Debug("List Count Out of Range for Chemical Contamination Indicator, Field will not be validated");
						ValidateAirfieldStatus.ChemContInd_OOR=true;
					
				}
				else
				{
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormCreate_Airfield_Status.ListItemChemical_Contamination_I);  
		   			string ChemContIndValue = accElement.Value;
		   			ValidateAirfieldStatus.ChemContInd = ChemContIndValue;
		   			Report.Info("Chemical Contamination Indicator Value Entered = " + ChemContIndValue);
		   		
				}
			
		}		
		
		//************************************************************************************//
		//************************Enters Random Base Weather State Value**********************//
		//************************************************************************************//
		
		public void BaseWeatherStat()
		{

				repo.FormCreate_Airfield_Status.ListItemBase_Weather_State.Click("CenterLeft");
			    Keyboard.Press(Keys.Tab);
			    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
				Ranorex.List list2 = "//list[@processname='RealView']";
	            int AScount = list2.Items.Count;
	            Random ASvalue = new Random();
				int ASnum = ASvalue.Next(1, AScount);
				if (ASnum < 1 || ASnum > AScount)
				{
	
						Keyboard.Press(Keys.Escape);
						Report.Debug("List Count Out of Range for Base Weather State, Field will not be validated");
						ValidateAirfieldStatus.BWS_OOR=true;
					
				}
				else
				{
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormCreate_Airfield_Status.ListItemBase_Weather_State);  
		   			string BWSValue = accElement.Value;
		   			ValidateAirfieldStatus.BWS = BWSValue;
		   			Report.Info("Base Weather State Value Entered = " + BWSValue);
		   		
				}
			
		}		
		
		//************************************************************************************//
		//*************************Enters Random Crash Service Value**************************//
		//************************************************************************************//
		
		public void CrashService()
		{

				repo.FormCreate_Airfield_Status.ListItemCrash_Service.Click("CenterLeft");
			    Keyboard.Press(Keys.Tab);
			    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
				Ranorex.List list2 = "//list[@processname='RealView']";
	            int AScount = list2.Items.Count;
	            Random ASvalue = new Random();
				int ASnum = ASvalue.Next(1, AScount);
				if (ASnum < 1 || ASnum > AScount)
				{
	
						Keyboard.Press(Keys.Escape);
						Report.Debug("List Count Out of Range for Crash Service, Field will not be validated");
						ValidateAirfieldStatus.Crash_OOR=true;
					
				}
				else
				{
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormCreate_Airfield_Status.ListItemCrash_Service);  
		   			string CrashValue = accElement.Value;
		   			ValidateAirfieldStatus.Crash = CrashValue;
		   			Report.Info("Crash Service Value Entered = " + CrashValue);
		   		
				}
			
		}			
		
		//************************************************************************************//
		//****************************Enters Random Shoradez Value****************************//
		//************************************************************************************//
		
		public void Shoradez()
		{
	
				repo.FormCreate_Airfield_Status.ListItemShoradez.Click("CenterLeft");
			    Keyboard.Press(Keys.Tab);
			    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
				Ranorex.List list2 = "//list[@processname='RealView']";
	            int AScount = list2.Items.Count;
	            Random ASvalue = new Random();
				int ASnum = ASvalue.Next(0, AScount);
				if (ASnum < 0 || ASnum > AScount)
				{
	
						Keyboard.Press(Keys.Escape);
						Report.Debug("List Count Out of Range for Shoradez, Field will not be validated");
						ValidateAirfieldStatus.Shoradez_OOR=true;
					
				}
				else
				{
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormCreate_Airfield_Status.ListItemShoradez);  
		   			string ShoradezValue = accElement.Value;
		   			ValidateAirfieldStatus.Shoradez = ShoradezValue;
		   			Report.Info("Shoradez Value Entered = " + ShoradezValue);
		   			
				}
			
		}		
		
		//************************************************************************************//
		//********************Enters Random Time of Observation Hour Value********************//
		//************************************************************************************//
		
		public void TimeObsHr()
		{
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			repo.FormCreate_Airfield_Status.ListItemTime_of_Observation_Hour.Click("CenterLeft");
		    Keyboard.Press(Keys.Tab);
			string b = SharedFunctions.Random(1, 24);
			Keyboard.Press(b);
			Accessible accElement = new Accessible(repo.FormCreate_Airfield_Status.ListItemTime_of_Observation_Hour);  
   			string ObsHrValue = b;
   			ValidateAirfieldStatus.ObsHr = ObsHrValue;
   			Report.Info("Time of Observation Hour Value Entered = " + ObsHrValue);	
		}		
		
		//************************************************************************************//
		//*********************Enters Time of Observation Minute Value************************//
		//************************************************************************************//
		
		public void TimeObsMin()
		{
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			repo.FormCreate_Airfield_Status.ListItemTime_of_Observation_Minu.Click("CenterLeft");
		    Keyboard.Press(Keys.Tab);
			string b = SharedFunctions.Random(1, 60);
			Keyboard.Press(b);
			Accessible accElement = new Accessible(repo.FormCreate_Airfield_Status.ListItemTime_of_Observation_Minu);  
   			string ObsMinValue = b;
   			ValidateAirfieldStatus.ObsMin = ObsMinValue;
   			Report.Info("Time of Observation Minute Value Entered = " + ObsMinValue);	
		}			
		
		//************************************************************************************//
		//********************Enters Random Secondary Runway Indicator Value******************//
		//************************************************************************************//
		
		public void SecRunInd()
		{

				repo.FormCreate_Airfield_Status.ListItemSecondary_Runway_Indicat.Click("CenterLeft");
			    Keyboard.Press(Keys.Tab);
			    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
				Ranorex.List list2 = "//list[@processname='RealView']";
	            int AScount = list2.Items.Count;
	            Random ASvalue = new Random();
				int ASnum = ASvalue.Next(0, AScount);
				if (ASnum < 0 || ASnum > AScount)
				{

						Keyboard.Press(Keys.Escape);
						Report.Debug("List Count Out of Range for Secondary Runway Indicator, Field will not be validated");
						ValidateAirfieldStatus.SRI_OOR=true;
					
				}
				else
				{
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormCreate_Airfield_Status.ListItemSecondary_Runway_Indicat);  
		   			string SRIValue = accElement.Value;
		   			ValidateAirfieldStatus.SRI = SRIValue;
		   			Report.Info("Secondary Runway Indicator Value Entered = " + SRIValue);
		   			
				}
			
		}		
		
		//************************************************************************************//
		//****************************Enters Random QNH Value*********************************//
		//************************************************************************************//
		
		public void QNH()
		{
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			repo.FormCreate_Airfield_Status.ListItemQNH.Click("CenterLeft");
		    Keyboard.Press(Keys.Tab);
			string b = SharedFunctions.Random(950, 1051);
			Keyboard.Press(b);
			Accessible accElement = new Accessible(repo.FormCreate_Airfield_Status.ListItemQNH);  
   			string QNHValue = b;
   			ValidateAirfieldStatus.QNH = QNHValue;
   			Report.Info("QNH Value Entered = " + QNHValue);	
		}			
		
		//************************************************************************************//
		//*******************Enters Random Active Runway Direction Value**********************//
		//************************************************************************************//
		
		public void ARDirection()
		{
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			repo.FormCreate_Airfield_Status.ListItemActive_Runway_Direction.Click("CenterLeft");
		    Keyboard.Press(Keys.Tab);
//			string b = SharedFunctions.Random(0, 35);
//			int a = Convert.ToInt32(b);
//			a = a * 10;
//			b = a.ToString();
		    string b = SharedFunctions.Random(1, 64);
			Keyboard.Press(b);
			Accessible accElement = new Accessible(repo.FormCreate_Airfield_Status.ListItemActive_Runway_Direction);  
   			string ARDirValue = b;
   			ValidateAirfieldStatus.ARDir = ARDirValue;
   			Report.Info("Active Runway Direction Value Entered = " + ARDirValue);	
		}
		
		//************************************************************************************//
		//***************Enters Random Active Runway Available Length Value*******************//
		//************************************************************************************//
		
		public void ARAvailableLength()
		{
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			repo.FormCreate_Airfield_Status.ListItemActive_Runway_Available_.Click("CenterLeft");
		    Keyboard.Press(Keys.Tab);
			string b = SharedFunctions.Random(0, 62);
			int a = Convert.ToInt32(b);
			a = a * 100;
			b = a.ToString();
			Keyboard.Press(b);
			Accessible accElement = new Accessible(repo.FormCreate_Airfield_Status.ListItemActive_Runway_Available_);  
   			string ARAvailLenValue = b;
   			ValidateAirfieldStatus.ARAvailLen = ARAvailLenValue;
   			Report.Info("Active Runway Available Length Value Entered = " + ARAvailLenValue);	
		}		
		
		//************************************************************************************//
		//*****************Enters Random Active Runway Visual Range Value*********************//
		//************************************************************************************//
		
		public void ARVisualRange()
		{
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			repo.FormCreate_Airfield_Status.ListItemActive_Runway_Visual_Ran.Click("CenterLeft");
		    Keyboard.Press(Keys.Tab);
			string b = SharedFunctions.Random(0, 14);
			int a = Convert.ToInt32(b);
			a = a * 100;
			b = a.ToString();
			Keyboard.Press(b);
			Accessible accElement = new Accessible(repo.FormCreate_Airfield_Status.ListItemActive_Runway_Visual_Ran);  
   			string ARVisRanValue = b;
   			ValidateAirfieldStatus.ARVisRan = ARVisRanValue;
   			Report.Info("Active Runway Visual Range Value Entered = " + ARVisRanValue);	
		}				
		
		//************************************************************************************//
		//**********************Enters Random Active Runway Status Value**********************//
		//************************************************************************************//
		
		public void ARStatus()
		{

				repo.FormCreate_Airfield_Status.ListItemActive_Runway_Status.Click("CenterLeft");
			    Keyboard.Press(Keys.Tab);
			    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
				Ranorex.List list2 = "//list[@processname='RealView']";
	            int AScount = list2.Items.Count;
	            Random ASvalue = new Random();
				int ASnum = ASvalue.Next(1, AScount);
				if (ASnum < 1 || ASnum > AScount)
				{

						Keyboard.Press(Keys.Escape);
						Report.Debug("List Count Out of Range for Active Runway Status, Field will not be validated");
						ValidateAirfieldStatus.ARStat_OOR=true;
					
				}
				else
				{
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormCreate_Airfield_Status.ListItemActive_Runway_Status);  
		   			string ARStatValue = accElement.Value;
		   			ValidateAirfieldStatus.ARStat = ARStatValue;
		   			Report.Info("Active Runway Status Value Entered = " + ARStatValue);
		   			
				}
			
		}		
		
		//************************************************************************************//
		//************************Enters Random Active Runway GCA Value***********************//
		//************************************************************************************//
		
		public void ARGCA()
		{

				repo.FormCreate_Airfield_Status.ListItemActive_Runway_GCA.Click("CenterLeft");
			    Keyboard.Press(Keys.Tab);
			    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
				Ranorex.List list2 = "//list[@processname='RealView']";
	            int AScount = list2.Items.Count;
	            Random ASvalue = new Random();
				int ASnum = ASvalue.Next(0, AScount);
				if (ASnum < 0 || ASnum > AScount)
				{

						Keyboard.Press(Keys.Escape);
						Report.Debug("List Count Out of Range for Active Runway GCA, Field will not be validated");
						ValidateAirfieldStatus.ARGCA_OOR=true;
					
				}
				else
				{
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormCreate_Airfield_Status.ListItemActive_Runway_GCA);  
		   			string ARGCAValue = accElement.Value;
		   			ValidateAirfieldStatus.ARGCA = ARGCAValue;
		   			Report.Info("Active Runway GCA Value Entered = " + ARGCAValue);
		   		
				}
			
		}			
		
		//************************************************************************************//
		//************************Enters Random Active Runway ILS Value***********************//
		//************************************************************************************//
		
		public void ARILS()
		{

				repo.FormCreate_Airfield_Status.ListItemActive_Runway_ILS.Click("CenterLeft");
			    Keyboard.Press(Keys.Tab);
			    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
				Ranorex.List list2 = "//list[@processname='RealView']";
	            int AScount = list2.Items.Count;
	            Random ASvalue = new Random();
				int ASnum = ASvalue.Next(0, AScount);
				if (ASnum < 0 || ASnum > AScount)
				{

						Keyboard.Press(Keys.Escape);
						Report.Debug("List Count Out of Range for Active Runway ILS, Field will not be validated");
						ValidateAirfieldStatus.ARILS_OOR=true;
					
				}
				else
				{
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormCreate_Airfield_Status.ListItemActive_Runway_ILS);  
		   			string ARILSValue = accElement.Value;
		   			ValidateAirfieldStatus.ARILS = ARILSValue;
		   			Report.Info("Active Runway ILS Value Entered = " + ARILSValue);
		   		
				}
			
		}		
		
		//************************************************************************************//
		//*****************Enters Random Active Runway Approach Lighting Value****************//
		//************************************************************************************//
		
		public void ARApproachLight()
		{

				repo.FormCreate_Airfield_Status.ListItemActive_Runway_Approach_L.Click("CenterLeft");
			    Keyboard.Press(Keys.Tab);
			    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
				Ranorex.List list2 = "//list[@processname='RealView']";
	            int AScount = list2.Items.Count;
	            Random ASvalue = new Random();
				int ASnum = ASvalue.Next(1, AScount);
				if (ASnum < 1 || ASnum > AScount)
				{

						Keyboard.Press(Keys.Escape);
						Report.Debug("List Count Out of Range for Active Runway Approach Lighting, Field will not be validated");
						ValidateAirfieldStatus.ARApproachLight_OOR=true;
					
				}
				else
				{
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormCreate_Airfield_Status.ListItemActive_Runway_Approach_L);  
		   			string ARApproachLightValue = accElement.Value;
		   			ValidateAirfieldStatus.ARApproachLight = ARApproachLightValue;
		   			Report.Info("Active Runway Approach Lighting Value Entered = " + ARApproachLightValue);
		   		
				}
			
		}			

		//************************************************************************************//
		//******************Enters Random Active Runway Arrest Barrier Value******************//
		//************************************************************************************//
		
		public void ARArrestBar()
		{

				repo.FormCreate_Airfield_Status.ListItemActive_Runway_Arrester_B.Click("CenterLeft");
			    Keyboard.Press(Keys.Tab);
			    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
				Ranorex.List list2 = "//list[@processname='RealView']";
	            int AScount = list2.Items.Count;
	            Random ASvalue = new Random();
				int ASnum = ASvalue.Next(0, AScount);
				if (ASnum < 0 || ASnum > AScount)
				{

						Keyboard.Press(Keys.Escape);
						Report.Debug("List Count Out of Range for Active Runway Arrest Barrier, Field will not be validated");
						ValidateAirfieldStatus.ARApproachLight_OOR=true;
					
				}
				else
				{
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormCreate_Airfield_Status.ListItemActive_Runway_Arrester_B);  
		   			string ARArrestBarValue = accElement.Value;
		   			ValidateAirfieldStatus.ARArrestBar = ARArrestBarValue;
		   			Report.Info("Active Runway Arrest Barrier Value Entered = " + ARArrestBarValue);
		   		
				}
			
		}			
		
		//************************************************************************************//
		//******************Enters Random Active Runway Braking Action Value******************//
		//************************************************************************************//
		
		public void ARBrakeAct()
		{
	
				repo.FormCreate_Airfield_Status.ListItemActive_Runway_Braking_Ac.Click("CenterLeft");
			    Keyboard.Press(Keys.Tab);
			    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
				Ranorex.List list2 = "//list[@processname='RealView']";
	            int AScount = list2.Items.Count;
	            Random ASvalue = new Random();
				int ASnum = ASvalue.Next(1, AScount);
				if (ASnum < 1 || ASnum > AScount)
				{

						Keyboard.Press(Keys.Escape);
						Report.Debug("List Count Out of Range for Active Runway Braking Action, Field will not be validated");
						ValidateAirfieldStatus.ARBrakeAct_OOR=true;
					
				}
				else
				{
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormCreate_Airfield_Status.ListItemActive_Runway_Braking_Ac);  
		   			string ARBrakeActValue = accElement.Value;
		   			ValidateAirfieldStatus.ARBrakeAct = ARBrakeActValue;
		   			Report.Info("Active Runway Braking Action Value Entered = " + ARBrakeActValue);
		   		
				}
			
		}			
		
		//************************************************************************************//
		//******************Enters Random Active Runway Arrester Wires Value******************//
		//************************************************************************************//
		
		public void ARArrestWire()
		{

				repo.FormCreate_Airfield_Status.ListItemActive_Runway_Arrester_W.Click("CenterLeft");
			    Keyboard.Press(Keys.Tab);
			    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
				Ranorex.List list2 = "//list[@processname='RealView']";
	            int AScount = list2.Items.Count;
	            Random ASvalue = new Random();
				int ASnum = ASvalue.Next(1, AScount);
				if (ASnum < 1 || ASnum > AScount)
				{
	
						Keyboard.Press(Keys.Escape);
						Report.Debug("List Count Out of Range for Active Runway Arrester Wires, Field will not be validated");
						ValidateAirfieldStatus.ARBrakeAct_OOR=true;
					
				}
				else
				{
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormCreate_Airfield_Status.ListItemActive_Runway_Arrester_W);  
		   			string ARArrestWireValue = accElement.Value;
		   			ValidateAirfieldStatus.ARArrestWire = ARArrestWireValue;
		   			Report.Info("Active Runway Arrester Wires Value Entered = " + ARArrestWireValue);
		   			
				}
			
		}	
		
		//************************************************************************************//
		//****************************Enters Random QFE Value*********************************//
		//************************************************************************************//
		
		public void QFE()
		{
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			repo.FormCreate_Airfield_Status.ListItemQFE.Click("CenterLeft");
		    Keyboard.Press(Keys.Tab);
			string b = SharedFunctions.Random(950, 1051);
			Keyboard.Press(b);
			Accessible accElement = new Accessible(repo.FormCreate_Airfield_Status.ListItemQFE);  
   			string QFEValue = b;
   			ValidateAirfieldStatus.QFE = QFEValue;
   			Report.Info("QFE Value Entered = " + QFEValue);	
		}			
		
		//************************************************************************************//
		//************************Enters Random Wind Direction Value**************************//
		//************************************************************************************//
		
		public void WindDir()
		{
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			repo.FormCreate_Airfield_Status.ListItemWind_Direction__5_degree.Click("CenterLeft");
		    Keyboard.Press(Keys.Tab);
			string b = SharedFunctions.Random(1, 72);
			int a = Convert.ToInt32(b);
			a = a * 5;
			b = a.ToString();
			Keyboard.Press(b);
			Accessible accElement = new Accessible(repo.FormCreate_Airfield_Status.ListItemWind_Direction__5_degree);  
   			string WindDirValue = b;
   			ValidateAirfieldStatus.WindDir = WindDirValue;
   			Report.Info("Wind Direction Value Entered = " + WindDirValue);	
		}				
		
		//************************************************************************************//
		//***************************Enters Random Wind Speed Value***************************//
		//************************************************************************************//
		
		public void WindSp()
		{
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			repo.FormCreate_Airfield_Status.ListItemWind_Speed__knots_.Click("CenterLeft");
		    Keyboard.Press(Keys.Tab);
			string b = SharedFunctions.Random(0, 125);
			Keyboard.Press(b);
			Accessible accElement = new Accessible(repo.FormCreate_Airfield_Status.ListItemWind_Speed__knots_);  
   			string WindSpValue = b;
   			ValidateAirfieldStatus.WindSp = WindSpValue;
   			Report.Info("Wind Speed Value Entered = " + WindSpValue);	
		}				
		
		//************************************************************************************//
		//***************************Enters Random Wind Gust Value****************************//
		//************************************************************************************//
		
		public void WindGust()
		{
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			repo.FormCreate_Airfield_Status.ListItemWind_Gust_Increment.Click("CenterLeft");
		    Keyboard.Press(Keys.Tab);
			string b = SharedFunctions.Random(0, 13);
			int a = Convert.ToInt32(b);
			a = a * 5;
			b = a.ToString();
			Keyboard.Press(b);
			Accessible accElement = new Accessible(repo.FormCreate_Airfield_Status.ListItemWind_Gust_Increment);  
   			string WindGustValue = b;
   			ValidateAirfieldStatus.WindGust = WindGustValue;
   			Report.Info("Wind Gust Value Entered = " + WindGustValue);	
		}
		
		//************************************************************************************//
		//**************************Enters Random Cloud Cover 1 Value*************************//
		//************************************************************************************//
		
		public void CloudCover1()
		{

			
				repo.FormCreate_Airfield_Status.ListItemCloud_Cover_1.Click("CenterLeft");
			    Keyboard.Press(Keys.Tab);
			    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
				Ranorex.List list2 = "//list[@processname='RealView']";
	            int AScount = list2.Items.Count;
	            Random ASvalue = new Random();
				int ASnum = ASvalue.Next(0, AScount);
				if (ASnum < 0 || ASnum > AScount)
				{

						Keyboard.Press(Keys.Escape);
						Report.Debug("List Count Out of Range for Cloud Cover 1, Field will not be validated");
						ValidateAirfieldStatus.CC1_OOR=true;
					
				}
				else
				{
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormCreate_Airfield_Status.ListItemCloud_Cover_1);  
		   			string CC1Value = accElement.Value;
		   			ValidateAirfieldStatus.CC1 = CC1Value;
		   			Report.Info("Cloud Cover 1 Value Entered = " + CC1Value);
		   		
				}
			
		}	
		
		//************************************************************************************//
		//***********************Enters Random Cloud Height 1 Value***************************//
		//************************************************************************************//
		
		public void CloudHeight1()
		{
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			repo.FormCreate_Airfield_Status.ListItemCloud_Height_1.Click("CenterLeft");
		    Keyboard.Press(Keys.Tab);
			string b = SharedFunctions.Random(1, 61);
			int a = Convert.ToInt32(b);
			a = a * 100;
			b = a.ToString();
			Keyboard.Press(b);
			Accessible accElement = new Accessible(repo.FormCreate_Airfield_Status.ListItemCloud_Height_1);  
   			string CH1Value = b;
   			ValidateAirfieldStatus.CH1 = CH1Value;
   			Report.Info("Cloud Height 1 Value Entered = " + CH1Value);	
		}
		
		//************************************************************************************//
		//**************************Enters Random Cloud Cover 2 Value*************************//
		//************************************************************************************//
		
		public void CloudCover2()
		{

				repo.FormCreate_Airfield_Status.ListItemCloud_Cover_2.Click("CenterLeft");
			    Keyboard.Press(Keys.Tab);
			    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
				Ranorex.List list2 = "//list[@processname='RealView']";
	            int AScount = list2.Items.Count;
	            Random ASvalue = new Random();
				int ASnum = ASvalue.Next(0, AScount);
				if (ASnum < 0 || ASnum > AScount)
				{

						Keyboard.Press(Keys.Escape);
						Report.Debug("List Count Out of Range for Cloud Cover 2, Field will not be validated");
						ValidateAirfieldStatus.CC2_OOR=true;
					
				}
				else
				{
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormCreate_Airfield_Status.ListItemCloud_Cover_2);  
		   			string CC2Value = accElement.Value;
		   			ValidateAirfieldStatus.CC2 = CC2Value;
		   			Report.Info("Cloud Cover 2 Value Entered = " + CC2Value);
		   			
				}
			
		}	
		
		//************************************************************************************//
		//***********************Enters Random Cloud Height 2 Value***************************//
		//************************************************************************************//
		
		public void CloudHeight2()
		{
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			repo.FormCreate_Airfield_Status.ListItemCloud_Height_2.Click("CenterLeft");
		    Keyboard.Press(Keys.Tab);
			string b = SharedFunctions.Random(1, 61);
			int a = Convert.ToInt32(b);
			a = a * 100;
			b = a.ToString();
			Keyboard.Press(b);
			Accessible accElement = new Accessible(repo.FormCreate_Airfield_Status.ListItemCloud_Height_2);  
   			string CH2Value = b;
   			ValidateAirfieldStatus.CH2 = CH2Value;
   			Report.Info("Cloud Height 2 Value Entered = " + CH2Value);	
		}		

		//************************************************************************************//
		//**************************Enters Random Cloud Cover 3 Value*************************//
		//************************************************************************************//
		
		public void CloudCover3()
		{

				repo.FormCreate_Airfield_Status.ListItemCloud_Cover_3.Click("CenterLeft");
			    Keyboard.Press(Keys.Tab);
			    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
				Ranorex.List list2 = "//list[@processname='RealView']";
	            int AScount = list2.Items.Count;
	            Random ASvalue = new Random();
				int ASnum = ASvalue.Next(0, AScount);
				if (ASnum < 0 || ASnum > AScount)
				{

						Keyboard.Press(Keys.Escape);
						Report.Debug("List Count Out of Range for Cloud Cover 3, Field will not be validated");
						ValidateAirfieldStatus.CC3_OOR=true;
					
				}
				else
				{
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormCreate_Airfield_Status.ListItemCloud_Cover_3);  
		   			string CC3Value = accElement.Value;
		   			ValidateAirfieldStatus.CC3 = CC3Value;
		   			Report.Info("Cloud Cover 3 Value Entered = " + CC3Value);
		   			
				}
			
		}	
		
		//************************************************************************************//
		//***********************Enters Random Cloud Height 3 Value***************************//
		//************************************************************************************//
		
		public void CloudHeight3()
		{
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			repo.FormCreate_Airfield_Status.ListItemCloud_Height_3.Click("CenterLeft");
		    Keyboard.Press(Keys.Tab);
			string b = SharedFunctions.Random(1, 61);
			int a = Convert.ToInt32(b);
			a = a * 100;
			b = a.ToString();
			Keyboard.Press(b);
			Accessible accElement = new Accessible(repo.FormCreate_Airfield_Status.ListItemCloud_Height_3);  
   			string CH3Value = b;
   			ValidateAirfieldStatus.CH3 = CH3Value;
   			Report.Info("Cloud Height 3 Value Entered = " + CH3Value);	
		}		
		
		//************************************************************************************//
		//**************************Enters Random Visibility Value****************************//
		//************************************************************************************//
		
		public void Visibility()
		{
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			repo.FormCreate_Airfield_Status.ListItemVisibility.Click("CenterLeft");
		    Keyboard.Press(Keys.Tab);
			string b = SharedFunctions.Random(1, 125);
			int a = Convert.ToInt32(b);
			a = a * 100;
			b = a.ToString();
			Keyboard.Press(b);
			Accessible accElement = new Accessible(repo.FormCreate_Airfield_Status.ListItemVisibility);  
   			string VisValue = b;
   			ValidateAirfieldStatus.Vis = VisValue;
   			Report.Info("Visibility Value Entered = " + VisValue);	
		}	
		
		//************************************************************************************//
		//*********************Enters Random Wind Shear Indicator Value***********************//
		//************************************************************************************//
		
		public void WindShear()
		{
	
				repo.FormCreate_Airfield_Status.ListItemWind_Shear_Indicator.Click("CenterLeft");
			    Keyboard.Press(Keys.Tab);
			    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
				Ranorex.List list2 = "//list[@processname='RealView']";
	            int AScount = list2.Items.Count;
	            Random ASvalue = new Random();
				int ASnum = ASvalue.Next(1, AScount);
				if (ASnum < 1 || ASnum > AScount)
				{
	
						Keyboard.Press(Keys.Escape);
						Report.Debug("List Count Out of Range for Wind Shear Indicator, Field will not be validated");
						ValidateAirfieldStatus.WindShear_OOR=true;
					
				}
				else
				{
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormCreate_Airfield_Status.ListItemWind_Shear_Indicator);  
		   			string WindShearValue = accElement.Value;
		   			ValidateAirfieldStatus.WindShear = WindShearValue;
		   			Report.Info("Cloud Cover 3 Value Entered = " + WindShearValue);
		   			
				}
			
		}		
		
		//************************************************************************************//
		//*******************Enters Random Actual Weather Descriptor Value********************//
		//************************************************************************************//
		
		public void ActualWeatherDes()
		{
	
				repo.FormCreate_Airfield_Status.ListItemActual_Weather_Descripto.Click("CenterLeft");
			    Keyboard.Press(Keys.Tab);
			    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
				Ranorex.List list2 = "//list[@processname='RealView']";
	            int AScount = list2.Items.Count;
	            Random ASvalue = new Random();
				int ASnum = ASvalue.Next(1, AScount);
				if (ASnum < 1 || ASnum > AScount)
				{

						Keyboard.Press(Keys.Escape);
						Report.Debug("List Count Out of Range for Actual Weather Descriptor, Field will not be validated");
						ValidateAirfieldStatus.ActWeatherDes_OOR=true;
					
				}
				else
				{
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormCreate_Airfield_Status.ListItemActual_Weather_Descripto);  
		   			string ActWeatherDesValue = accElement.Value;
		   			ValidateAirfieldStatus.ActWeatherDes = ActWeatherDesValue;
		   			Report.Info("Actual Weather Descriptor Value Entered = " + ActWeatherDesValue);
		   	
				}
			
		}			
		
		//************************************************************************************//
		//**************Enters Random Actual Weather Intensity Proximity Value****************//
		//************************************************************************************//
		
		public void ActualWeatherInt()
		{
	
				repo.FormCreate_Airfield_Status.ListItemActual_Weather_Intensity.Click("CenterLeft");
			    Keyboard.Press(Keys.Tab);
			    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
				Ranorex.List list2 = "//list[@processname='RealView']";
	            int AScount = list2.Items.Count;
	            Random ASvalue = new Random();
				int ASnum = ASvalue.Next(1, AScount);
				if (ASnum < 1 || ASnum > AScount)
				{
	
						Keyboard.Press(Keys.Escape);
						Report.Debug("List Count Out of Range for Actual Weather Intensity Proximity, Field will not be validated");
						ValidateAirfieldStatus.ActWeatherInt_OOR=true;
					
				}
				else
				{
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormCreate_Airfield_Status.ListItemActual_Weather_Intensity);  
		   			string ActWeatherIntValue = accElement.Value;
		   			ValidateAirfieldStatus.ActWeatherInt = ActWeatherIntValue;
		   			Report.Info("Actual Weather Intensity Proximity Value Entered = " + ActWeatherIntValue);
		   		
				}
			
		}			
		
		//************************************************************************************//
		//************************Enters Random Actual Weather Value**************************//
		//************************************************************************************//
		
		public void ActualWeather()
		{

				repo.FormCreate_Airfield_Status.ListItemActual_Weather.Click("CenterLeft");
			    Keyboard.Press(Keys.Tab);
			    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
				Ranorex.List list2 = "//list[@processname='RealView']";
	            int AScount = list2.Items.Count;
	            Random ASvalue = new Random();
				int ASnum = ASvalue.Next(1, AScount);
				if (ASnum < 1 || ASnum > AScount)
				{

						Keyboard.Press(Keys.Escape);
						Report.Debug("List Count Out of Range for Actual Weather, Field will not be validated");
						ValidateAirfieldStatus.ActWeather_OOR=true;
					
				}
				else
				{
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormCreate_Airfield_Status.ListItemActual_Weather);  
		   			string ActWeatherValue = accElement.Value;
		   			ValidateAirfieldStatus.ActWeather = ActWeatherValue;
		   			Report.Info("Actual Weather Value Entered = " + ActWeatherValue);
		   		
				}
			
		}		
		
		//************************************************************************************//
		//****************************Enters Random AVTUR Value*******************************//
		//************************************************************************************//
		
		public void AVTUR()
		{

				repo.FormCreate_Airfield_Status.ListItemAVTUR.Click("CenterLeft");
			    Keyboard.Press(Keys.Tab);
			    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
				Ranorex.List list2 = "//list[@processname='RealView']";
	            int AScount = list2.Items.Count;
	            Random ASvalue = new Random();
				int ASnum = ASvalue.Next(0, AScount);
				if (ASnum < 0 || ASnum > AScount)
				{

						Keyboard.Press(Keys.Escape);
						Report.Debug("List Count Out of Range for AVTUR, Field will not be validated");
						ValidateAirfieldStatus.AVTUR_OOR=true;
					
				}
				else
				{
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormCreate_Airfield_Status.ListItemAVTUR);  
		   			string AVTURValue = accElement.Value;
		   			ValidateAirfieldStatus.AVTUR = AVTURValue;
		   			Report.Info("AVTUR Value Entered = " + AVTURValue);
		   			
				}
			
		}			
		
		//************************************************************************************//
		//*************************Enters Random Liquid Oxygen Value**************************//
		//************************************************************************************//
		
		public void LiquidOxygen()
		{

				repo.FormCreate_Airfield_Status.ListItemLiquid_Oxygen.Click("CenterLeft");
			    Keyboard.Press(Keys.Tab);
			    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
				Ranorex.List list2 = "//list[@processname='RealView']";
	            int AScount = list2.Items.Count;
	            Random ASvalue = new Random();
				int ASnum = ASvalue.Next(0, AScount);
				if (ASnum < 0 || ASnum > AScount)
				{

						Keyboard.Press(Keys.Escape);
						Report.Debug("List Count Out of Range for Liquid Oxygen, Field will not be validated");
						ValidateAirfieldStatus.LiqOxy_OOR=true;
					
				}
				else
				{
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormCreate_Airfield_Status.ListItemLiquid_Oxygen);  
		   			string LiqOxyValue = accElement.Value;
		   			ValidateAirfieldStatus.LiqOxy = LiqOxyValue;
		   			Report.Info("Liquid Oxygen Value Entered = " + LiqOxyValue);
		   	
				}
			
		}			
		
		//************************************************************************************//
		//****************************Enters Random Nitrogen Value****************************//
		//************************************************************************************//
		
		public void Nitrogen()
		{

				repo.FormCreate_Airfield_Status.ListItemNitrogen.Click("CenterLeft");
			    Keyboard.Press(Keys.Tab);
			    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
				Ranorex.List list2 = "//list[@processname='RealView']";
	            int AScount = list2.Items.Count;
	            Random ASvalue = new Random();
				int ASnum = ASvalue.Next(0, AScount);
				if (ASnum < 0 || ASnum > AScount)
				{

						Keyboard.Press(Keys.Escape);
						Report.Debug("List Count Out of Range for Nitrogen, Field will not be validated");
						ValidateAirfieldStatus.Nitro_OOR=true;
					
				}
				else
				{
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormCreate_Airfield_Status.ListItemNitrogen);  
		   			string NitroValue = accElement.Value;
		   			ValidateAirfieldStatus.Nitro = NitroValue;
		   			Report.Info("Nitrogen Value Entered = " + NitroValue);
		   			
				}
			
		}		
		
		//************************************************************************************//
		//**************************Enters Random AIM-9L AAM Value****************************//
		//************************************************************************************//
		
		public void AIM9L()
		{

				repo.FormCreate_Airfield_Status.ListItemAIM_9L_AAM.Click("CenterLeft");
			    Keyboard.Press(Keys.Tab);
			    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
				Ranorex.List list2 = "//list[@processname='RealView']";
	            int AScount = list2.Items.Count;
	            Random ASvalue = new Random();
				int ASnum = ASvalue.Next(0, AScount);
				if (ASnum < 0 || ASnum > AScount)
				{
		
						Keyboard.Press(Keys.Escape);
						Report.Debug("List Count Out of Range for AIM-9L AAM, Field will not be validated");
						ValidateAirfieldStatus.AIM9L_OOR=true;
					
				}
				else
				{
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormCreate_Airfield_Status.ListItemAIM_9L_AAM);  
		   			string AIM9LValue = accElement.Value;
		   			ValidateAirfieldStatus.AIM9L = AIM9LValue;
		   			Report.Info("AIM-9L AAM Value Entered = " + AIM9LValue);
		   		
				}
			
		}	
		
		//************************************************************************************//
		//**************************Enters Random AIM-9L AAM Value****************************//
		//************************************************************************************//
		
		public void AIM9M()
		{

				repo.FormCreate_Airfield_Status.ListItemAIM_9M_AAM.Click("CenterLeft");
			    Keyboard.Press(Keys.Tab);
			    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
				Ranorex.List list2 = "//list[@processname='RealView']";
	            int AScount = list2.Items.Count;
	            Random ASvalue = new Random();
				int ASnum = ASvalue.Next(0, AScount);
				if (ASnum < 0 || ASnum > AScount)
				{
	
						Keyboard.Press(Keys.Escape);
						Report.Debug("List Count Out of Range for AIM-9M AAM, Field will not be validated");
						ValidateAirfieldStatus.AIM9L_OOR=true;
					
				}
				else
				{
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormCreate_Airfield_Status.ListItemAIM_9M_AAM);  
		   			string AIM9MValue = accElement.Value;
		   			ValidateAirfieldStatus.AIM9M = AIM9MValue;
		   			Report.Info("AIM-9M AAM Value Entered = " + AIM9MValue);
		   		
				}
			
		}			
		
		//************************************************************************************//
		//**************************Enters Random AIM-9P AAM Value****************************//
		//************************************************************************************//
		
		public void AIM9P()
		{

				repo.FormCreate_Airfield_Status.ListItemAIM_9P_AAM.Click("CenterLeft");
			    Keyboard.Press(Keys.Tab);
			    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
				Ranorex.List list2 = "//list[@processname='RealView']";
	            int AScount = list2.Items.Count;
	            Random ASvalue = new Random();
				int ASnum = ASvalue.Next(0, AScount);
				if (ASnum < 0 || ASnum > AScount)
				{
	
						Keyboard.Press(Keys.Escape);
						Report.Debug("List Count Out of Range for AIM-9P AAM, Field will not be validated");
						ValidateAirfieldStatus.AIM9P_OOR=true;
					
				}
				else
				{
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormCreate_Airfield_Status.ListItemAIM_9P_AAM);  
		   			string AIM9PValue = accElement.Value;
		   			ValidateAirfieldStatus.AIM9P = AIM9PValue;
		   			Report.Info("AIM-9P AAM Value Entered = " + AIM9PValue);
		   		
				}
			
		}			
		
		//************************************************************************************//
		//**************************Enters Random Sky Flash Value****************************//
		//************************************************************************************//
		
		public void SkyFlash()
		{

				repo.FormCreate_Airfield_Status.ListItemSky_Flash_AAM.Click("CenterLeft");
			    Keyboard.Press(Keys.Tab);
			    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
				Ranorex.List list2 = "//list[@processname='RealView']";
	            int AScount = list2.Items.Count;
	            Random ASvalue = new Random();
				int ASnum = ASvalue.Next(0, AScount);
				if (ASnum < 0 || ASnum > AScount)
				{
	
						Keyboard.Press(Keys.Escape);
						Report.Debug("List Count Out of Range for Sky Flash, Field will not be validated");
						ValidateAirfieldStatus.SkyFlash_OOR=true;
					
				}
				else
				{
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormCreate_Airfield_Status.ListItemSky_Flash_AAM);  
		   			string SkyFlashValue = accElement.Value;
		   			ValidateAirfieldStatus.SkyFlash = SkyFlashValue;
		   			Report.Info("Sky Flash Value Entered = " + SkyFlashValue);
		   		
				}
			
		}				
		
		//************************************************************************************//
		//**************************Enters Random AIM-120 AMRAAM Value****************************//
		//************************************************************************************//
		
		public void AIM120()
		{

				repo.FormCreate_Airfield_Status.ListItemAIM_120_AMRAAM.Click("CenterLeft");
			    Keyboard.Press(Keys.Tab);
			    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
				Ranorex.List list2 = "//list[@processname='RealView']";
	            int AScount = list2.Items.Count;
	            Random ASvalue = new Random();
				int ASnum = ASvalue.Next(0, AScount);
				if (ASnum < 0 || ASnum > AScount)
				{
	
						Keyboard.Press(Keys.Escape);
						Report.Debug("List Count Out of Range for AIM-120 AMRAAM, Field will not be validated");
						ValidateAirfieldStatus.AIM120_OOR=true;
					
				}
				else
				{
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormCreate_Airfield_Status.ListItemAIM_120_AMRAAM);  
		   			string AIM120Value = accElement.Value;
		   			ValidateAirfieldStatus.AIM120 = AIM120Value;
		   			Report.Info("AIM-120 AMRAAM Value Entered = " + AIM120Value);
		   		
				}
			
		}			
		
		//************************************************************************************//
		//*************************Enters Random AIM-132 AMSAAM Value*************************//
		//************************************************************************************//
		
		public void AIM132()
		{

				repo.FormCreate_Airfield_Status.ListItemAIM_132_ASRAAM.Click("CenterLeft");
			    Keyboard.Press(Keys.Tab);
			    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
				Ranorex.List list2 = "//list[@processname='RealView']";
	            int AScount = list2.Items.Count;
	            Random ASvalue = new Random();
				int ASnum = ASvalue.Next(0, AScount);
				if (ASnum < 0 || ASnum > AScount)
				{

						Keyboard.Press(Keys.Escape);
						Report.Debug("List Count Out of Range for AIM-132 AMSAAM, Field will not be validated");
						ValidateAirfieldStatus.AIM132_OOR=true;
					
				}
				else
				{
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormCreate_Airfield_Status.ListItemAIM_132_ASRAAM);  
		   			string AIM132Value = accElement.Value;
		   			ValidateAirfieldStatus.AIM132 = AIM132Value;
		   			Report.Info("AIM-132 AMSAAM Value Entered = " + AIM132Value);
		   		
				}
			
		}			
		
		//************************************************************************************//
		//**************************Enters Random Magic I AAM Value****************************//
		//************************************************************************************//
		
		public void MagicI()
		{

				repo.FormCreate_Airfield_Status.ListItemMagic_I_AAM.Click("CenterLeft");
			    Keyboard.Press(Keys.Tab);
			    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
				Ranorex.List list2 = "//list[@processname='RealView']";
	            int AScount = list2.Items.Count;
	            Random ASvalue = new Random();
				int ASnum = ASvalue.Next(0, AScount);
				if (ASnum < 0 || ASnum > AScount)
				{

						Keyboard.Press(Keys.Escape);
						Report.Debug("List Count Out of Range for Magic I AAM, Field will not be validated");
						ValidateAirfieldStatus.MagicI_OOR=true;
					
				}
				else
				{
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormCreate_Airfield_Status.ListItemMagic_I_AAM);  
		   			string MagicIValue = accElement.Value;
		   			ValidateAirfieldStatus.MagicI = MagicIValue;
		   			Report.Info("Magic I AAM Value Entered = " + MagicIValue);
		   
				}
			
		}	

		//************************************************************************************//
		//**************************Enters Random Magic II AAM Value****************************//
		//************************************************************************************//
		
		public void MagicII()
		{

				repo.FormCreate_Airfield_Status.ListItemMagic_II_AAM.Click("CenterLeft");
			    Keyboard.Press(Keys.Tab);
			    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
				Ranorex.List list2 = "//list[@processname='RealView']";
	            int AScount = list2.Items.Count;
	            Random ASvalue = new Random();
				int ASnum = ASvalue.Next(0, AScount);
				if (ASnum < 0 || ASnum > AScount)
				{
	
						Keyboard.Press(Keys.Escape);
						Report.Debug("List Count Out of Range for Magic II AAM, Field will not be validated");
						ValidateAirfieldStatus.MagicII_OOR=true;
					
				}
				else
				{
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormCreate_Airfield_Status.ListItemMagic_II_AAM);  
		   			string MagicIIValue = accElement.Value;
		   			ValidateAirfieldStatus.MagicII = MagicIIValue;
		   			Report.Info("Magic II AAM Value Entered = " + MagicIIValue);
		   		
				}
			
		}	
		
		//************************************************************************************//
		//*************************Enters Random Super 530 AAM Value**************************//
		//************************************************************************************//
		
		public void Super530()
		{

				repo.FormCreate_Airfield_Status.ListItemSuper_530_AAM.Click("CenterLeft");
			    Keyboard.Press(Keys.Tab);
			    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
				Ranorex.List list2 = "//list[@processname='RealView']";
	            int AScount = list2.Items.Count;
	            Random ASvalue = new Random();
				int ASnum = ASvalue.Next(0, AScount);
				if (ASnum < 0 || ASnum > AScount)
				{

						Keyboard.Press(Keys.Escape);
						Report.Debug("List Count Out of Range for Super 530 AAM, Field will not be validated");
						ValidateAirfieldStatus.Super530_OOR=true;
					
				}
				else
				{
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormCreate_Airfield_Status.ListItemSuper_530_AAM);  
		   			string Super530Value = accElement.Value;
		   			ValidateAirfieldStatus.Super530 = Super530Value;
		   			Report.Info("Super 530 AAM Value Entered = " + Super530Value);
		   		
				}
			
		}		
		
		//************************************************************************************//
		//*************************Enters Random Super 530D AAM Value**************************//
		//************************************************************************************//
		
		public void Super530D()
		{

				repo.FormCreate_Airfield_Status.ListItemSuper_530D_AAM.Click("CenterLeft");
			    Keyboard.Press(Keys.Tab);
			    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
				Ranorex.List list2 = "//list[@processname='RealView']";
	            int AScount = list2.Items.Count;
	            Random ASvalue = new Random();
				int ASnum = ASvalue.Next(0, AScount);
				if (ASnum < 0 || ASnum > AScount)
				{

						Keyboard.Press(Keys.Escape);
						Report.Debug("List Count Out of Range for Super 530D AAM, Field will not be validated");
						ValidateAirfieldStatus.Super530_OOR=true;
					
				}
				else
				{
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormCreate_Airfield_Status.ListItemSuper_530D_AAM);  
		   			string Super530DValue = accElement.Value;
		   			ValidateAirfieldStatus.Super530D = Super530DValue;
		   			Report.Info("Super 530D AAM Value Entered = " + Super530DValue);
		   		
				}
			
		}		
		
		//************************************************************************************//
		//***************************Enters Random MICA AAM Value*****************************//
		//************************************************************************************//
		
		public void MICA()
		{

				repo.FormCreate_Airfield_Status.ListItemMICA_AAM.Click("CenterLeft");
			    Keyboard.Press(Keys.Tab);
			    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
				Ranorex.List list2 = "//list[@processname='RealView']";
	            int AScount = list2.Items.Count;
	            Random ASvalue = new Random();
				int ASnum = ASvalue.Next(0, AScount);
				if (ASnum < 0 || ASnum > AScount)
				{

						Keyboard.Press(Keys.Escape);
						Report.Debug("List Count Out of Range for MICA AAM, Field will not be validated");
						ValidateAirfieldStatus.MICA_OOR=true;
					
				}
				else
				{
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormCreate_Airfield_Status.ListItemMICA_AAM);  
		   			string MICAValue = accElement.Value;
		   			ValidateAirfieldStatus.MICA = MICAValue;
		   			Report.Info("MICA AAM Value Entered = " + MICAValue);
		   
				}
			
		}		
		
		//************************************************************************************//
		//***************************Enters Random TBD AAM 1 Value*****************************//
		//************************************************************************************//
		
		public void AAM1()
		{

				repo.FormCreate_Airfield_Status.ListItemTBD_AAM_1.Click("CenterLeft");
			    Keyboard.Press(Keys.Tab);
			    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
				Ranorex.List list2 = "//list[@processname='RealView']";
	            int AScount = list2.Items.Count;
	            Random ASvalue = new Random();
				int ASnum = ASvalue.Next(0, AScount);
				if (ASnum < 0 || ASnum > AScount)
				{

						Keyboard.Press(Keys.Escape);
						Report.Debug("List Count Out of Range for TBD AAM 1, Field will not be validated");
						ValidateAirfieldStatus.AAM1_OOR=true;
					
				}
				else
				{
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormCreate_Airfield_Status.ListItemTBD_AAM_1);  
		   			string AAM1Value = accElement.Value;
		   			ValidateAirfieldStatus.AAM1 = AAM1Value;
		   			Report.Info("TBD AAM 1 Value Entered = " + AAM1Value);
		   		
				}
			
		}			
		
		//************************************************************************************//
		//***************************Enters Random TBD AAM 2 Value*****************************//
		//************************************************************************************//
		
		public void AAM2()
		{
	
				repo.FormCreate_Airfield_Status.ListItemTBD_AAM_2.Click("CenterLeft");
			    Keyboard.Press(Keys.Tab);
			    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
				Ranorex.List list2 = "//list[@processname='RealView']";
	            int AScount = list2.Items.Count;
	            Random ASvalue = new Random();
				int ASnum = ASvalue.Next(0, AScount);
				if (ASnum < 0 || ASnum > AScount)
				{
	
						Keyboard.Press(Keys.Escape);
						Report.Debug("List Count Out of Range for TBD AAM 2, Field will not be validated");
						ValidateAirfieldStatus.AAM2_OOR=true;
					
				}
				else
				{
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormCreate_Airfield_Status.ListItemTBD_AAM_2);  
		   			string AAM2Value = accElement.Value;
		   			ValidateAirfieldStatus.AAM2 = AAM2Value;
		   			Report.Info("TBD AAM 2 Value Entered = " + AAM2Value);

				}
			
		}			
		
		//************************************************************************************//
		//***************************Enters Random TBD AAM 3 Value*****************************//
		//************************************************************************************//
		
		public void AAM3()
		{

				repo.FormCreate_Airfield_Status.ListItemTBD_AAM_3.Click("CenterLeft");
			    Keyboard.Press(Keys.Tab);
			    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
				Ranorex.List list2 = "//list[@processname='RealView']";
	            int AScount = list2.Items.Count;
	            Random ASvalue = new Random();
				int ASnum = ASvalue.Next(0, AScount);
				if (ASnum < 0 || ASnum > AScount)
				{

						Keyboard.Press(Keys.Escape);
						Report.Debug("List Count Out of Range for TBD AAM 3, Field will not be validated");
						ValidateAirfieldStatus.AAM3_OOR=true;
					
				}
				else
				{
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormCreate_Airfield_Status.ListItemTBD_AAM_3);  
		   			string AAM3Value = accElement.Value;
		   			ValidateAirfieldStatus.AAM3 = AAM3Value;
		   			Report.Info("TBD AAM 3 Value Entered = " + AAM3Value);
		   			
				}
			
		}			
		
		//************************************************************************************//
		//***************************Enters Random TBD AAM 4 Value*****************************//
		//************************************************************************************//
		
		public void AAM4()
		{

				repo.FormCreate_Airfield_Status.ListItemTBD_AAM_4.Click("CenterLeft");
			    Keyboard.Press(Keys.Tab);
			    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
				Ranorex.List list2 = "//list[@processname='RealView']";
	            int AScount = list2.Items.Count;
	            Random ASvalue = new Random();
				int ASnum = ASvalue.Next(0, AScount);
				if (ASnum < 0 || ASnum > AScount)
				{
	
						Keyboard.Press(Keys.Escape);
						Report.Debug("List Count Out of Range for TBD AAM 4, Field will not be validated");
						ValidateAirfieldStatus.AAM4_OOR=true;
					
				}
				else
				{
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormCreate_Airfield_Status.ListItemTBD_AAM_4);  
		   			string AAM4Value = accElement.Value;
		   			ValidateAirfieldStatus.AAM4 = AAM4Value;
		   			Report.Info("TBD AAM 4 Value Entered = " + AAM4Value);
		   			
				}
			
		}				
		
		//************************************************************************************//
		//*************************Enters Random Durandal ASM Value***************************//
		//************************************************************************************//
		
		public void Durandal()
		{

				repo.FormCreate_Airfield_Status.ListItemDurandal_ASM.Click("CenterLeft");
			    Keyboard.Press(Keys.Tab);
			    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
				Ranorex.List list2 = "//list[@processname='RealView']";
	            int AScount = list2.Items.Count;
	            Random ASvalue = new Random();
				int ASnum = ASvalue.Next(0, AScount);
				if (ASnum < 0 || ASnum > AScount)
				{
		
						Keyboard.Press(Keys.Escape);
						Report.Debug("List Count Out of Range for Durandal ASM, Field will not be validated");
						ValidateAirfieldStatus.Durandal_OOR=true;
					
				}
				else
				{
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormCreate_Airfield_Status.ListItemDurandal_ASM);  
		   			string DurandalValue = accElement.Value;
		   			ValidateAirfieldStatus.Durandal = DurandalValue;
		   			Report.Info("Durandal ASM Value Entered = " + DurandalValue);
		   		
				}
			
		}				
		
		//************************************************************************************//
		//*************************Enters Random BAP 100 ASM Value***************************//
		//************************************************************************************//
		
		public void BAP()
		{

				repo.FormCreate_Airfield_Status.ListItemBAP_100_ASM.Click("CenterLeft");
			    Keyboard.Press(Keys.Tab);
			    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
				Ranorex.List list2 = "//list[@processname='RealView']";
	            int AScount = list2.Items.Count;
	            Random ASvalue = new Random();
				int ASnum = ASvalue.Next(0, AScount);
				if (ASnum < 0 || ASnum > AScount)
				{
	
						Keyboard.Press(Keys.Escape);
						Report.Debug("List Count Out of Range for BAP 100 ASM , Field will not be validated");
						ValidateAirfieldStatus.BAP_OOR=true;
					
				}
				else
				{
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormCreate_Airfield_Status.ListItemBAP_100_ASM);  
		   			string BAPValue = accElement.Value;
		   			ValidateAirfieldStatus.BAP = BAPValue;
		   			Report.Info("BAP 100 ASM  Value Entered = " + BAPValue);
		   			
				}
			
		}		
		
		//************************************************************************************//
		//***************************Enters Random TBD ASM 1 Value*****************************//
		//************************************************************************************//
		
		public void ASM1()
		{

				repo.FormCreate_Airfield_Status.ListItemTBD_ASM_1.Click("CenterLeft");
			    Keyboard.Press(Keys.Tab);
			    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
				Ranorex.List list2 = "//list[@processname='RealView']";
	            int AScount = list2.Items.Count;
	            Random ASvalue = new Random();
				int ASnum = ASvalue.Next(0, AScount);
				if (ASnum < 0 || ASnum > AScount)
				{
	
						Keyboard.Press(Keys.Escape);
						Report.Debug("List Count Out of Range for TBD ASM 1, Field will not be validated");
						ValidateAirfieldStatus.ASM1_OOR=true;
					
				}
				else
				{
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormCreate_Airfield_Status.ListItemTBD_ASM_1);  
		   			string ASM1Value = accElement.Value;
		   			ValidateAirfieldStatus.ASM1 = ASM1Value;
		   			Report.Info("TBD ASM 1 Value Entered = " + ASM1Value);
		   			
				}
			
		}		
		
		//************************************************************************************//
		//***************************Enters Random TBD ASM 2 Value*****************************//
		//************************************************************************************//
		
		public void ASM2()
		{

				repo.FormCreate_Airfield_Status.ListItemTBD_ASM_2.Click("CenterLeft");
			    Keyboard.Press(Keys.Tab);
			    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
				Ranorex.List list2 = "//list[@processname='RealView']";
	            int AScount = list2.Items.Count;
	            Random ASvalue = new Random();
				int ASnum = ASvalue.Next(0, AScount);
				if (ASnum < 0 || ASnum > AScount)
				{

						Keyboard.Press(Keys.Escape);
						Report.Debug("List Count Out of Range for TBD ASM 2, Field will not be validated");
						ValidateAirfieldStatus.ASM1_OOR=true;
					
				}
				else
				{
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormCreate_Airfield_Status.ListItemTBD_ASM_2);  
		   			string ASM2Value = accElement.Value;
		   			ValidateAirfieldStatus.ASM2 = ASM2Value;
		   			Report.Info("TBD ASM 2 Value Entered = " + ASM2Value);
		   			
				}
			
		}		
		
		//************************************************************************************//
		//***************************Enters Random TBD ASM 3 Value*****************************//
		//************************************************************************************//
		
		public void ASM3()
		{
	
				repo.FormCreate_Airfield_Status.ListItemTBD_ASM_3.Click("CenterLeft");
			    Keyboard.Press(Keys.Tab);
			    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
				Ranorex.List list2 = "//list[@processname='RealView']";
	            int AScount = list2.Items.Count;
	            Random ASvalue = new Random();
				int ASnum = ASvalue.Next(0, AScount);
				if (ASnum < 0 || ASnum > AScount)
				{

						Keyboard.Press(Keys.Escape);
						Report.Debug("List Count Out of Range for TBD ASM 3, Field will not be validated");
						ValidateAirfieldStatus.ASM3_OOR=true;
					
				}
				else
				{
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormCreate_Airfield_Status.ListItemTBD_ASM_3);  
		   			string ASM3Value = accElement.Value;
		   			ValidateAirfieldStatus.ASM3 = ASM3Value;
		   			Report.Info("TBD ASM 3 Value Entered = " + ASM3Value);
		   			
				}
			
		}			
		
		//************************************************************************************//
		//***************************Enters Random TBD ASM 4 Value*****************************//
		//************************************************************************************//
		
		public void ASM4()
		{
	
				repo.FormCreate_Airfield_Status.ListItemTBD_ASM_4.Click("CenterLeft");
			    Keyboard.Press(Keys.Tab);
			    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
				Ranorex.List list2 = "//list[@processname='RealView']";
	            int AScount = list2.Items.Count;
	            Random ASvalue = new Random();
				int ASnum = ASvalue.Next(0, AScount);
				if (ASnum < 0 || ASnum > AScount)
				{
	
						Keyboard.Press(Keys.Escape);
						Report.Debug("List Count Out of Range for TBD ASM 4, Field will not be validated");
						ValidateAirfieldStatus.ASM1_OOR=true;
					
				}
				else
				{
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormCreate_Airfield_Status.ListItemTBD_ASM_4);  
		   			string ASM4Value = accElement.Value;
		   			ValidateAirfieldStatus.ASM4 = ASM4Value;
		   			Report.Info("TBD ASM 4 Value Entered = " + ASM4Value);
		   		
				}
			
		}			

		//************************************************************************************//
		//*********************Enters Random AntiSub Depth Charge Value***********************//
		//************************************************************************************//
		
		public void AntiSub()
		{

				repo.FormCreate_Airfield_Status.ListItemAntiSub_Depth_Charge.Click("CenterLeft");
			    Keyboard.Press(Keys.Tab);
			    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
				Ranorex.List list2 = "//list[@processname='RealView']";
	            int AScount = list2.Items.Count;
	            Random ASvalue = new Random();
				int ASnum = ASvalue.Next(0, AScount);
				if (ASnum < 0 || ASnum > AScount)
				{
	
						Keyboard.Press(Keys.Escape);
						Report.Debug("List Count Out of Range for AntiSub Depth Charge, Field will not be validated");
						ValidateAirfieldStatus.AntiSub_OOR=true;
					
				}
				else
				{
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormCreate_Airfield_Status.ListItemAntiSub_Depth_Charge);  
		   			string AntiSubValue = accElement.Value;
		   			ValidateAirfieldStatus.AntiSub = AntiSubValue;
		   			Report.Info("AntiSub Depth Charge Value Entered = " + AntiSubValue);
		   			
				}
			
		}		
		
		//************************************************************************************//
		//*****************************Enters Random NDB Value********************************//
		//************************************************************************************//
		
		public void NDB()
		{

				repo.FormCreate_Airfield_Status.ListItemNDB.Click("CenterLeft");
			    Keyboard.Press(Keys.Tab);
			    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
				Ranorex.List list2 = "//list[@processname='RealView']";
	            int AScount = list2.Items.Count;
	            Random ASvalue = new Random();
				int ASnum = ASvalue.Next(0, AScount);
				if (ASnum < 0 || ASnum > AScount)
				{

						Keyboard.Press(Keys.Escape);
						Report.Debug("List Count Out of Range for NDB, Field will not be validated");
						ValidateAirfieldStatus.NDB_OOR=true;
					
				}
				else
				{
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormCreate_Airfield_Status.ListItemNDB);  
		   			string NDBValue = accElement.Value;
		   			ValidateAirfieldStatus.NDB = NDBValue;
		   			Report.Info("NDB Value Entered = " + NDBValue);
		   	
				}
			
		}		
		
		//************************************************************************************//
		//**************************Enters Random 500lb Bomb Value****************************//
		//************************************************************************************//
		
		public void Bomb500()
		{

				repo.FormCreate_Airfield_Status.ListItemConventional_500lb_Bomb.Click("CenterLeft");
			    Keyboard.Press(Keys.Tab);
			    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
				Ranorex.List list2 = "//list[@processname='RealView']";
	            int AScount = list2.Items.Count;
	            Random ASvalue = new Random();
				int ASnum = ASvalue.Next(0, AScount);
				if (ASnum < 0 || ASnum > AScount)
				{
	
						Keyboard.Press(Keys.Escape);
						Report.Debug("List Count Out of Range for 500lb Bomb, Field will not be validated");
						ValidateAirfieldStatus.Bomb500_OOR=true;
					
				}
				else
				{
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormCreate_Airfield_Status.ListItemConventional_500lb_Bomb);  
		   			string Bomb500Value = accElement.Value;
		   			ValidateAirfieldStatus.Bomb500 = Bomb500Value;
		   			Report.Info("500lb Bomb Value Entered = " + Bomb500Value);
		   			
				}
			
		}				
		
		//************************************************************************************//
		//**************************Enters Random 1000lb Bomb Value****************************//
		//************************************************************************************//
		
		public void Bomb1000()
		{

				repo.FormCreate_Airfield_Status.ListItemConventional_1000lb_Bomb.Click("CenterLeft");
			    Keyboard.Press(Keys.Tab);
			    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
				Ranorex.List list2 = "//list[@processname='RealView']";
	            int AScount = list2.Items.Count;
	            Random ASvalue = new Random();
				int ASnum = ASvalue.Next(0, AScount);
				if (ASnum < 0 || ASnum > AScount)
				{
	
						Keyboard.Press(Keys.Escape);
						Report.Debug("List Count Out of Range for 1000lb Bomb, Field will not be validated");
						ValidateAirfieldStatus.Bomb1000_OOR=true;
					
				}
				else
				{
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormCreate_Airfield_Status.ListItemConventional_1000lb_Bomb);  
		   			string Bomb1000Value = accElement.Value;
		   			ValidateAirfieldStatus.Bomb1000 = Bomb1000Value;
		   			Report.Info("1000lb Bomb Value Entered = " + Bomb1000Value);
		   		
				}
			
		}	
		
		//************************************************************************************//
		//***************************Enters Random 20mm Ammo Value****************************//
		//************************************************************************************//
		
		public void Ammo20()
		{

				repo.FormCreate_Airfield_Status.ListItem20mm_Ammo.Click("CenterLeft");
			    Keyboard.Press(Keys.Tab);
			    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
				Ranorex.List list2 = "//list[@processname='RealView']";
	            int AScount = list2.Items.Count;
	            Random ASvalue = new Random();
				int ASnum = ASvalue.Next(0, AScount);
				if (ASnum < 0 || ASnum > AScount)
				{

						Keyboard.Press(Keys.Escape);
						Report.Debug("List Count Out of Range for 20mm Ammo, Field will not be validated");
						ValidateAirfieldStatus.Ammo20_OOR=true;
					
				}
				else
				{
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormCreate_Airfield_Status.ListItem20mm_Ammo);  
		   			string Ammo20Value = accElement.Value;
		   			ValidateAirfieldStatus.Ammo20 = Ammo20Value;
		   			Report.Info("20mm Ammo Value Entered = " + Ammo20Value);
		   			
				}
			
		}				
		
		//************************************************************************************//
		//***************************Enters Random 27mm Ammo Value****************************//
		//************************************************************************************//
		
		public void Ammo27()
		{

				repo.FormCreate_Airfield_Status.ListItem27mm_Ammo.Click("CenterLeft");
			    Keyboard.Press(Keys.Tab);
			    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
				Ranorex.List list2 = "//list[@processname='RealView']";
	            int AScount = list2.Items.Count;
	            Random ASvalue = new Random();
				int ASnum = ASvalue.Next(0, AScount);
				if (ASnum < 0 || ASnum > AScount)
				{
	
						Keyboard.Press(Keys.Escape);
						Report.Debug("List Count Out of Range for 27mm Ammo, Field will not be validated");
						ValidateAirfieldStatus.Ammo27_OOR=true;
					
				}
				else
				{
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormCreate_Airfield_Status.ListItem27mm_Ammo);  
		   			string Ammo27Value = accElement.Value;
		   			ValidateAirfieldStatus.Ammo27 = Ammo27Value;
		   			Report.Info("27mm Ammo Value Entered = " + Ammo27Value);
		   			
				}
			
		}		
		
		//************************************************************************************//
		//***************************Enters Random 30mm Ammo Value****************************//
		//************************************************************************************//
		
		public void Ammo30()
		{

				repo.FormCreate_Airfield_Status.ListItem30mm_Ammo.Click("CenterLeft");
			    Keyboard.Press(Keys.Tab);
			    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
				Ranorex.List list2 = "//list[@processname='RealView']";
	            int AScount = list2.Items.Count;
	            Random ASvalue = new Random();
				int ASnum = ASvalue.Next(0, AScount);
				if (ASnum < 0 || ASnum > AScount)
				{
	
						Keyboard.Press(Keys.Escape);
						Report.Debug("List Count Out of Range for 30mm Ammo, Field will not be validated");
						ValidateAirfieldStatus.Ammo30_OOR=true;
					
				}
				else
				{
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.FormCreate_Airfield_Status.ListItem30mm_Ammo);  
		   			string Ammo30Value = accElement.Value;
		   			ValidateAirfieldStatus.Ammo30 = Ammo30Value;
		   			Report.Info("30mm Ammo Value Entered = " + Ammo30Value);
		   			
				}
			
		}

		//**************************************************************************************//
		//*****************************Ranorex Generated Init Method****************************//
		//**************************************************************************************//
		
		private void Init()
		{
			// Your recording specific initialization code goes here.
		}
	}
}


