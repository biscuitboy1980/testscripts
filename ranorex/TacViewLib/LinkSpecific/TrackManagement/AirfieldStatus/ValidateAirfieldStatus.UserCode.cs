///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using System.Windows.Forms;

using Ranorex;
using Ranorex.Core;

namespace TacViewLib.LinkSpecific.TrackManagement.AirfieldStatus
{
	/// <summary>
	/// The ValidateAirfieldStatus recording.
	/// </summary>
	public partial class ValidateAirfieldStatus
	{
		public static bool ZoomFlag = false;		
		
		public static string TrackNum;
		
		//Airfield Status
		public static string AirStat;
		public static string AirRaid;
		public static string NucContInd;
		public static string BioContInd;
		public static string ChemContInd;
		public static string BWS;
		public static string Crash;
		public static string Shoradez;
		public static string ObsHr;
		public static string ObsMin;		
		public static string SRI;			
		public static string QNH;	
				
		//Active Runway
		public static string ARDir;			
		public static string ARAvailLen;				
		public static string ARVisRan;	
		public static string ARStat;
		public static string ARGCA;
		public static string ARILS;		
		public static string ARApproachLight;
		public static string ARArrestBar;
		public static string ARBrakeAct;
		public static string ARArrestWire;
		public static string QFE;
		
		//Weather
		public static string WindDir;
		public static string WindSp;		
		public static string WindGust;		
		public static string CC1;
		public static string CH1;
		public static string CC2;
		public static string CH2;
		public static string CC3;
		public static string CH3;
		public static string Vis;
		public static string WindShear;
		public static string ActWeatherDes;
		public static string ActWeatherInt;
		public static string ActWeather;
		
		//Logistics
		public static string AVTUR;
		public static string LiqOxy;
		public static string Nitro;
		public static string AIM9L;
		public static string AIM9M;
		public static string AIM9P;
		public static string SkyFlash;
		public static string AIM120;
		public static string AIM132;
		public static string MagicI;
		public static string MagicII;
		public static string Super530;
		public static string Super530D;
		public static string MICA;
		public static string AAM1;
		public static string AAM2;
		public static string AAM3;
		public static string AAM4;
		public static string Durandal;
		public static string BAP;
		public static string ASM1;
		public static string ASM2;
		public static string ASM3;
		public static string ASM4;
		public static string AntiSub;
		public static string NDB;
		public static string Bomb500;
		public static string Bomb1000;
		public static string Ammo20;
		public static string Ammo27;
		public static string Ammo30;

		//Out of Range Flags
		public static bool AirStat_OOR;
		public static bool AirRaid_OOR;
		public static bool NucContInd_OOR;
		public static bool BioContInd_OOR;		
		public static bool ChemContInd_OOR;
		public static bool BWS_OOR;		
		public static bool Crash_OOR;	
		public static bool Shoradez_OOR;
		public static bool SRI_OOR;		
		public static bool ARStat_OOR;
		public static bool ARGCA_OOR;
		public static bool ARILS_OOR;	
		public static bool ARApproachLight_OOR;
		public static bool ARArrestBar_OOR;
		public static bool ARBrakeAct_OOR;
		public static bool ARArrestWire_OOR;
		public static bool CC1_OOR;
		public static bool CC2_OOR;
		public static bool CC3_OOR;
		public static bool WindShear_OOR;
		public static bool ActWeatherDes_OOR;
		public static bool ActWeatherInt_OOR;
		public static bool ActWeather_OOR;			
		public static bool AVTUR_OOR;
		public static bool LiqOxy_OOR;
		public static bool Nitro_OOR;
		public static bool AIM9L_OOR;
		public static bool AIM9M_OOR;
		public static bool AIM9P_OOR;
		public static bool SkyFlash_OOR;
		public static bool AIM120_OOR;
		public static bool AIM132_OOR;
		public static bool MagicI_OOR;
		public static bool MagicII_OOR;
		public static bool Super530_OOR;
		public static bool Super530D_OOR;
		public static bool MICA_OOR;
		public static bool AAM1_OOR;
		public static bool AAM2_OOR;
		public static bool AAM3_OOR;
		public static bool AAM4_OOR;
		public static bool Durandal_OOR;
		public static bool BAP_OOR;
		public static bool ASM1_OOR;
		public static bool ASM2_OOR;
		public static bool ASM3_OOR;
		public static bool ASM4_OOR;
		public static bool AntiSub_OOR;
		public static bool NDB_OOR;
		public static bool Bomb500_OOR;
		public static bool Bomb1000_OOR;
		public static bool Ammo20_OOR;
		public static bool Ammo27_OOR;
		public static bool Ammo30_OOR;
		
		//************************************************************************************//
		//*****************************Sets Track Number in Repo******************************//
		//************************************************************************************//
		
		public void SetTrackNumberInRepo()
		{
			tracknumber = TrackNum;	
			Report.Info("Setting tracknumber to " + tracknumber);
		}		
		
		//************************************************************************************//
		//*******************************Right Clicks on Track********************************//
		//************************************************************************************//		
		
		public void RightClickTrack()
		{			
			Duration OrigDur = repo.FormTacViewC2.PictureTrackInfo.SearchTimeout;
			repo.FormTacViewC2.PictureTrackInfo.SearchTimeout = 2000;			
			
			if (repo.FormTacViewC2.PictureTrackInfo.Exists())
			{
				Report.Info("Mouse Right Click item 'FormTacViewC2.PictureTrack' at Center.");
				repo.FormTacViewC2.PictureTrack.Click(MouseButtons.Right);
			}
			else
			{
				ZoomFlag = true;
				Report.Info("Track # " + TrackNum + " not found on the current display, going to world wide view");
				Report.Screenshot();
				repo.FormTacViewC2.ButtonZoom_Out_Max.Click();
				
				if (repo.FormTacViewC2.PictureTrackInfo.Exists())
				{
					Report.Info("Mouse Right Click item 'FormTacViewC2.PictureTrack' at Center.");
					repo.FormTacViewC2.PictureTrack.Click(MouseButtons.Right);
				}
				else
				{
					Report.Error("Unable to find Track # " + TrackNum + " anywhere in the world");
					Report.Screenshot();
					return;
				}				
			}
			
			repo.FormTacViewC2.PictureTrackInfo.SearchTimeout = OrigDur;
		}			
				
		//************************************************************************************//
		//****************************Opens Track Properties Dialog***************************//
		//************************************************************************************//
		
		public void ViewTrackProperties()
		{			
			Duration OrigDur = repo.FormRealView.MenuItemTracksInfo.SearchTimeout;
			repo.FormRealView.MenuItemTracksInfo.SearchTimeout = 1000;
			Duration OrigDur1 = repo.FormRealView.MenuItemTrackNumber2Info.SearchTimeout;
			repo.FormRealView.MenuItemTrackNumber2Info.SearchTimeout = 1000;			
			
			if (repo.FormRealView.MenuItemTracksInfo.Exists())
			{
				Report.Info("Mouse Left Click item 'FormRealView.MenuItemTracks'");
			    repo.FormRealView.MenuItemTracks.Click();
			    Report.Info("Mouse Left Click item 'FormTracks.MenuItemC2_HOST_2_Track'");
		        repo.FormTracks.MenuItemC2_HOST_2_Track.Click();
		       	Report.Info("Mouse Left Click item 'FormTOAD2.MenuItemTrack_Properties");
				repo.FormConnection2.MenuItemTrack_Properties.Click();
			}			
			else if (repo.FormRealView.MenuItemTrackNumber2Info.Exists())
			{
			    Report.Info("Mouse Left Click item 'repo.FormRealView.MenuItemTrackNumber2'");
		        repo.FormRealView.MenuItemTrackNumber2.Click();
		       	Report.Info("Mouse Left Click item 'FormTOAD2.MenuItemTrack_Properties");
				repo.FormConnection2.MenuItemTrack_Properties.Click();
			}
			
			repo.FormRealView.MenuItemTracksInfo.SearchTimeout = OrigDur;
			repo.FormRealView.MenuItemTrackNumber2Info.SearchTimeout = OrigDur1;
		}		
	
		//************************************************************************************//
		//**************************Validates Airfield Status Value***************************//
		//************************************************************************************//
				
		public void ValidateAirStat()
		{
			if (!AirStat_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(AirStat)') on item 'FormMain__Land_Point_Track_TN_Airfield.ListItemAirfield_StatusInfo'.");
				Report.Info("Value Entered = " + AirStat);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN_Airfield.ListItemAirfield_StatusInfo, "AccessibleValue", AirStat, Validate.DefaultMessage, false);
			}
		}
		
		//************************************************************************************//
		//***************************Validates Air Raid State Value***************************//
		//************************************************************************************//
				
		public void ValidateAirRaid()
		{
			if (!AirRaid_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(AirRaid)') on item 'FormMain__Land_Point_Track_TN_Airfield.ListItemAir_Raid_StateInfo'.");
				Report.Info("Value Entered = " + AirRaid);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN_Airfield.ListItemAir_Raid_StateInfo, "AccessibleValue", AirRaid, Validate.DefaultMessage, false);
			}
		}		
		
		//************************************************************************************//
		//******************Validates Nuclear Contamination Indicator Value*******************//
		//************************************************************************************//
				
		public void ValidateNCI()
		{
			if (!NucContInd_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(NucContInd)') on item 'FormMain__Land_Point_Track_TN_Airfield.ListItemNuclear_Contamination_InInfo'.");
				Report.Info("Value Entered = " + NucContInd);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN_Airfield.ListItemNuclear_Contamination_InInfo, "AccessibleValue", NucContInd, Validate.DefaultMessage, false);
			}
		}		
		
		//************************************************************************************//
		//****************Validates Biological Contamination Indicator Value******************//
		//************************************************************************************//
				
		public void ValidateBCI()
		{
			if (!BioContInd_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(BioContInd)') on item 'FormMain__Land_Point_Track_TN_Airfield.ListItemBiological_ContaminationInfo'.");
				Report.Info("Value Entered = " + BioContInd);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN_Airfield.ListItemBiological_ContaminationInfo, "AccessibleValue", BioContInd, Validate.DefaultMessage, false);
			}
		}			
		
		//************************************************************************************//
		//*****************Validates Chemical Contamination Indicator Value*******************//
		//************************************************************************************//
				
		public void ValidateCCI()
		{
			if (!ChemContInd_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(ChemContInd)') on item 'FormMain__Land_Point_Track_TN_Airfield.ListItemChemical_Contamination_IInfo'.");
				Report.Info("Value Entered = " + ChemContInd);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN_Airfield.ListItemChemical_Contamination_IInfo, "AccessibleValue", ChemContInd, Validate.DefaultMessage, false);
			}
		}			
		
		//************************************************************************************//
		//************************Validates Base Weather State Value**************************//
		//************************************************************************************//
				
		public void ValidateBWS()
		{
			if (!BWS_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(BWS)') on item 'FormMain__Land_Point_Track_TN_Airfield.ListItemBase_Weather_StateInfo'.");
				Report.Info("Value Entered = " + BWS);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN_Airfield.ListItemBase_Weather_StateInfo, "AccessibleValue", BWS, Validate.DefaultMessage, false);
			}
		}			
		
		//************************************************************************************//
		//**************************Validates Crash Service Value*****************************//
		//************************************************************************************//
				
		public void ValidateCrash()
		{
			if (!Crash_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(Crash)') on item 'FormMain__Land_Point_Track_TN_Airfield.ListItemCrash_ServiceInfo'.");
				Report.Info("Value Entered = " + Crash);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN_Airfield.ListItemCrash_ServiceInfo, "AccessibleValue", Crash, Validate.DefaultMessage, false);
			}
		}				
		
		//************************************************************************************//
		//******************************Validates Shoradez Value******************************//
		//************************************************************************************//
				
		public void ValidateShoradez()
		{
			if (!Shoradez_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(Shoradez)') on item 'FormMain__Land_Point_Track_TN_Airfield.ListItemShoradezInfo'.");
				Report.Info("Value Entered = " + Shoradez);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN_Airfield.ListItemShoradezInfo, "AccessibleValue", Shoradez, Validate.DefaultMessage, false);
			}
		}		
		
		//************************************************************************************//
		//*********************Validates Time of Observation Hour Value***********************//
		//************************************************************************************//
				
		public void ValidateObsHr()
		{
			Report.Info("Validating AttributeEqual (Text='(ObsHr)') on item 'FormMain__Land_Point_Track_TN_Airfield.ListItemTime_of_Observation_Hour'.");
			Report.Info("Value Entered = " + ObsHr);
			Validate.Attribute(repo.FormMain__Land_Point_Track_TN_Airfield.ListItemTime_of_Observation_Hour, "AccessibleValue", ObsHr, Validate.DefaultMessage, false);
		}		
		
		//************************************************************************************//
		//*********************Validates Time of Observation Hour Value***********************//
		//************************************************************************************//
				
		public void ValidateObsMin()
		{
			Report.Info("Validating AttributeEqual (Text='(ObsMin)') on item 'FormMain__Land_Point_Track_TN_Airfield.ListItemTime_of_Observation_MinuInfo'.");
			Report.Info("Value Entered = " + ObsMin);
			Validate.Attribute(repo.FormMain__Land_Point_Track_TN_Airfield.ListItemTime_of_Observation_MinuInfo, "AccessibleValue", ObsMin, Validate.DefaultMessage, false);
		}	
		
		//************************************************************************************//
		//********************Validates Secondary Runway Indicator Value**********************//
		//************************************************************************************//
				
		public void ValidateSRI()
		{
			if (!SRI_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(SRI)') on item 'FormMain__Land_Point_Track_TN_Airfield.ListItemSecondary_Runway_IndicatInfo'.");
				Report.Info("Value Entered = " + SRI);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN_Airfield.ListItemSecondary_Runway_IndicatInfo, "AccessibleValue", SRI, Validate.DefaultMessage, false);
			}
		}			
		
		//************************************************************************************//
		//********************************Validates QNH Value*********************************//
		//************************************************************************************//
				
		public void ValidateQNH()
		{
			Report.Info("Validating AttributeEqual (Text='(QNH)') on item 'FormMain__Land_Point_Track_TN_Airfield.ListItemQNH'.");
			Report.Info("Value Entered = " + QNH);
			Validate.Attribute(repo.FormMain__Land_Point_Track_TN_Airfield.ListItemQNH, "AccessibleValue", QNH, Validate.DefaultMessage, false);
		}		
		
		//************************************************************************************//
		//**********************Validates Active Runway Direction Value***********************//
		//************************************************************************************//
				
		public void ValidateARDirection()
		{
			Report.Info("Validating AttributeEqual (Text='(ARDir)') on item 'FormMain__Land_Point_Track_TN_Airfield.ListItemActive_Runway_DirectionInfo'.");
			Report.Info("Value Entered = " + ARDir);
			Validate.Attribute(repo.FormMain__Land_Point_Track_TN_Airfield.ListItemActive_Runway_DirectionInfo, "AccessibleValue", ARDir, Validate.DefaultMessage, false);
		}				
		
		//************************************************************************************//
		//******************Validates Active Runway Available Length Value********************//
		//************************************************************************************//
				
		public void ValidateARAvailLen()
		{
			Report.Info("Validating AttributeEqual (Text='(ARAvailLen)') on item 'FormMain__Land_Point_Track_TN_Airfield.ListItemActive_Runway_Available_Info'.");
			Report.Info("Value Entered = " + ARAvailLen);
			Validate.Attribute(repo.FormMain__Land_Point_Track_TN_Airfield.ListItemActive_Runway_Available_Info, "AccessibleValue", ARAvailLen, Validate.DefaultMessage, false);
		}		
		
		//************************************************************************************//
		//******************Validates Active Runway Available Length Value********************//
		//************************************************************************************//
				
		public void ValidateARVisRange()
		{
			Report.Info("Validating AttributeEqual (Text='(ARVisRan)') on item 'FormMain__Land_Point_Track_TN_Airfield.ListItemActive_Runway_Visual_RanInfo'.");
			Report.Info("Value Entered = " + ARVisRan);
			Validate.Attribute(repo.FormMain__Land_Point_Track_TN_Airfield.ListItemActive_Runway_Visual_RanInfo, "AccessibleValue", ARVisRan, Validate.DefaultMessage, false);
		}	
		
		//************************************************************************************//
		//***********************Validates Active Runway Status Value*************************//
		//************************************************************************************//
				
		public void ValidateARStatus()
		{
			if (!ARStat_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(ARStat)') on item 'FormMain__Land_Point_Track_TN_Airfield.ListItemActive_Runway_StatusInfo'.");
				Report.Info("Value Entered = " + ARStat);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN_Airfield.ListItemActive_Runway_StatusInfo, "AccessibleValue", ARStat, Validate.DefaultMessage, false);
			}
		}		
		
		//************************************************************************************//
		//***********************Validates Active Runway GCA Value*************************//
		//************************************************************************************//
				
		public void ValidateARGCA()
		{
			if (!ARGCA_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(ARGCA)') on item 'FormMain__Land_Point_Track_TN_Airfield.ListItemActive_Runway_GCAInfo'.");
				Report.Info("Value Entered = " + ARGCA);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN_Airfield.ListItemActive_Runway_GCAInfo, "AccessibleValue", ARGCA, Validate.DefaultMessage, false);
			}
		}			
		
		//************************************************************************************//
		//***********************Validates Active Runway ILS Value*************************//
		//************************************************************************************//
				
		public void ValidateARILS()
		{
			if (!ARILS_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(ARILS)') on item 'FormMain__Land_Point_Track_TN_Airfield.ListItemActive_Runway_ILSInfo'.");
				Report.Info("Value Entered = " + ARILS);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN_Airfield.ListItemActive_Runway_ILSInfo, "AccessibleValue", ARILS, Validate.DefaultMessage, false);
			}
		}			
		
		//************************************************************************************//
		//******************Validates Active Runway Approach Lighting Value*******************//
		//************************************************************************************//
				
		public void ValidateARApproachLight()
		{
			if (!ARApproachLight_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(ARApproachLight)') on item 'FormMain__Land_Point_Track_TN_Airfield.ListItemActive_Runway_Approach_LInfo'.");
				Report.Info("Value Entered = " + ARApproachLight);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN_Airfield.ListItemActive_Runway_Approach_LInfo, "AccessibleValue", ARApproachLight, Validate.DefaultMessage, false);
			}
		}			
		
		//************************************************************************************//
		//*******************Validates Active Runway Arrester Barrier Value*******************//
		//************************************************************************************//
				
		public void ValidateARArrestBar()
		{
			if (!ARArrestBar_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(ARArrestBar)') on item 'FormMain__Land_Point_Track_TN_Airfield.ListItemActive_Runway_Arrester_BInfo'.");
				Report.Info("Value Entered = " + ARArrestBar);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN_Airfield.ListItemActive_Runway_Arrester_BInfo, "AccessibleValue", ARArrestBar, Validate.DefaultMessage, false);
			}
		}				
		
		//************************************************************************************//
		//********************Validates Active Runway Braking Action Value********************//
		//************************************************************************************//
				
		public void ValidateARBrakeAction()
		{
			if (!ARBrakeAct_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(ARBrakeAct)') on item 'FormMain__Land_Point_Track_TN_Airfield.ListItemActive_Runway_Braking_AcInfo'.");
				Report.Info("Value Entered = " + ARBrakeAct);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN_Airfield.ListItemActive_Runway_Braking_AcInfo, "AccessibleValue", ARBrakeAct, Validate.DefaultMessage, false);
			}
		}		
		
		//************************************************************************************//
		//*******************Validates Active Runway Arrester Barrier Value*******************//
		//************************************************************************************//
				
		public void ValidateARArrestWire()
		{
			if (!ARArrestWire_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(ARArrestWire)') on item 'FormMain__Land_Point_Track_TN_Airfield.ListItemActive_Runway_Arrester_WInfo'.");
				Report.Info("Value Entered = " + ARArrestWire);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN_Airfield.ListItemActive_Runway_Arrester_WInfo, "AccessibleValue", ARArrestWire, Validate.DefaultMessage, false);
			}
		}	
		
		//************************************************************************************//
		//*************************Validates Wind Direction Value*****************************//
		//************************************************************************************//
				
		public void ValidateWindDir()
		{
			Report.Info("Validating AttributeEqual (Text='(WindDir)') on item 'FormMain__Land_Point_Track_TN_Airfield.ListItemWind_Direction__5_degree'.");
			Report.Info("Value Entered = " + WindDir);
			Validate.Attribute(repo.FormMain__Land_Point_Track_TN_Airfield.ListItemWind_Direction__5_degree, "AccessibleValue", WindDir, Validate.DefaultMessage, false);
		}	
		
		//************************************************************************************//
		//****************************Validates Wind Speed Value******************************//
		//************************************************************************************//
				
		public void ValidateWindSp()
		{
			Report.Info("Validating AttributeEqual (Text='(WindSp)') on item 'FormMain__Land_Point_Track_TN_Airfield.ListItemWind_Speed__knots_Info'.");
			Report.Info("Value Entered = " + WindSp);
			Validate.Attribute(repo.FormMain__Land_Point_Track_TN_Airfield.ListItemWind_Speed__knots_Info, "AccessibleValue", WindSp, Validate.DefaultMessage, false);
		}			
				
		//************************************************************************************//
		//*****************************Validates Wind Gust Value******************************//
		//************************************************************************************//
				
		public void ValidateWindGust()
		{
			Report.Info("Validating AttributeEqual (Text='(WindGust)') on item 'FormMain__Land_Point_Track_TN_Airfield.ListItemWind_Gust_IncrementInfo'.");
			Report.Info("Value Entered = " + WindGust);
			Validate.Attribute(repo.FormMain__Land_Point_Track_TN_Airfield.ListItemWind_Gust_IncrementInfo, "AccessibleValue", WindGust, Validate.DefaultMessage, false);
		}					
		
		//************************************************************************************//
		//**************************Validates Cloud Cover 1 Value*****************************//
		//************************************************************************************//
				
		public void ValidateCC1()
		{
			if (!CC1_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(CC1)') on item 'FormMain__Land_Point_Track_TN_Airfield.ListItemCloud_Cover_1'.");
				Report.Info("Value Entered = " + CC1);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN_Airfield.ListItemCloud_Cover_1Info, "AccessibleValue", CC1, Validate.DefaultMessage, false);
			}
		}	
		
		//************************************************************************************//
		//**************************Validates Cloud Height 1 Value****************************//
		//************************************************************************************//
				
		public void ValidateCH1()
		{
			if (!CC1_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(CH1)') on item 'FormMain__Land_Point_Track_TN_Airfield.ListItemCloud_Height_1'.");
				Report.Info("Value Entered = " + CH1);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN_Airfield.ListItemCloud_Height_1Info, "AccessibleValue", CH1, Validate.DefaultMessage, false);
			}
		}	

		//************************************************************************************//
		//**************************Validates Cloud Cover 2 Value*****************************//
		//************************************************************************************//
				
		public void ValidateCC2()
		{
			if (!CC2_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(CC2)') on item 'FormMain__Land_Point_Track_TN_Airfield.ListItemCloud_Cover_2'.");
				Report.Info("Value Entered = " + CC2);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN_Airfield.ListItemCloud_Cover_2Info, "AccessibleValue", CC2, Validate.DefaultMessage, false);
			}
		}	
		
		//************************************************************************************//
		//**************************Validates Cloud Height 2 Value****************************//
		//************************************************************************************//
				
		public void ValidateCH2()
		{
			if (!CC2_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(CH2)') on item 'FormMain__Land_Point_Track_TN_Airfield.ListItemCloud_Height_2'.");
				Report.Info("Value Entered = " + CH2);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN_Airfield.ListItemCloud_Height_2Info, "AccessibleValue", CH2, Validate.DefaultMessage, false);
			}
		}	
		
		//************************************************************************************//
		//**************************Validates Cloud Cover 3 Value*****************************//
		//************************************************************************************//
				
		public void ValidateCC3()
		{
			if (!CC3_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(CC3)') on item 'FormMain__Land_Point_Track_TN_Airfield.ListItemCloud_Cover_3'.");
				Report.Info("Value Entered = " + CC3);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN_Airfield.ListItemCloud_Cover_3Info, "AccessibleValue", CC3, Validate.DefaultMessage, false);
			}
		}	
		
		//************************************************************************************//
		//**************************Validates Cloud Height 3 Value****************************//
		//************************************************************************************//
				
		public void ValidateCH3()
		{
			if (!CC3_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(CH3)') on item 'FormMain__Land_Point_Track_TN_Airfield.ListItemCloud_Height_3'.");
				Report.Info("Value Entered = " + CH3);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN_Airfield.ListItemCloud_Height_3Info, "AccessibleValue", CH3, Validate.DefaultMessage, false);
			}
		}			
		
		//************************************************************************************//
		//*****************************Validates Wind Gust Value******************************//
		//************************************************************************************//
				
		public void ValidateVisibilty()
		{
			Report.Info("Validating AttributeEqual (Text='(Vis)') on item 'FormMain__Land_Point_Track_TN_Airfield.ListItemVisibilityInfo'.");
			Report.Info("Value Entered = " + Vis);
			Validate.Attribute(repo.FormMain__Land_Point_Track_TN_Airfield.ListItemVisibilityInfo, "AccessibleValue", Vis, Validate.DefaultMessage, false);
		}	
		
		//************************************************************************************//
		//***********************Validates Wind Shear Indicator Value*************************//
		//************************************************************************************//
				
		public void ValidateWindShear()
		{
			if (!WindShear_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(WindShear)') on item 'FormMain__Land_Point_Track_TN_Airfield.ListItemWind_Shear_IndicatorInfo'.");
				Report.Info("Value Entered = " + WindShear);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN_Airfield.ListItemWind_Shear_IndicatorInfo, "AccessibleValue", WindShear, Validate.DefaultMessage, false);
			}
		}					
		
		//************************************************************************************//
		//********************Validates Actual Weather Description Value**********************//
		//************************************************************************************//
				
		public void ValidateAWDes()
		{
			if (!ActWeatherDes_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(ActWeatherDes)') on item 'FormMain__Land_Point_Track_TN_Airfield.ListItemWind_Shear_IndicatorInfo'.");
				Report.Info("Value Entered = " + ActWeatherDes);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN_Airfield.ListItemActual_Weather_DescriptoInfo, "AccessibleValue", ActWeatherDes, Validate.DefaultMessage, false);
			}
		}	
		
		//************************************************************************************//
		//**************Validates Wind Actual Weather Intensity Proximity Value***************//
		//************************************************************************************//
				
		public void ValidateAWIntenseProx()
		{
			if (!ActWeatherInt_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(ActWeatherInt)') on item 'FormMain__Land_Point_Track_TN_Airfield.ListItemActual_Weather_IntensityInfo'.");
				Report.Info("Value Entered = " + ActWeatherInt);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN_Airfield.ListItemActual_Weather_IntensityInfo, "AccessibleValue", ActWeatherInt, Validate.DefaultMessage, false);
			}
		}			
		
		//************************************************************************************//
		//**************************Validates Actual Weather Value****************************//
		//************************************************************************************//
				
		public void ValidateActWeather()
		{
			if (!ActWeather_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(ActWeather)') on item 'FormMain__Land_Point_Track_TN_Airfield.ListItemActual_WeatherInfo'.");
				Report.Info("Value Entered = " + ActWeather);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN_Airfield.ListItemActual_WeatherInfo, "AccessibleValue", ActWeather, Validate.DefaultMessage, false);
			}
		}	
		
		//************************************************************************************//
		//*******************************Validates AVTUR Value********************************//
		//************************************************************************************//
				
		public void ValidateAVTUR()
		{
			if (!AVTUR_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(AVTUR)') on item 'FormMain__Land_Point_Track_TN_Airfield.ListItemAVTURInfo'.");
				Report.Info("Value Entered = " + AVTUR);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN_Airfield.ListItemAVTURInfo, "AccessibleValue", AVTUR, Validate.DefaultMessage, false);
			}
		}		
		
		//************************************************************************************//
		//**************************Validates Liquid Oxygen Value*****************************//
		//************************************************************************************//
				
		public void ValidateLiquidOxy()
		{
			if (!LiqOxy_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(LiqOxy)') on item 'FormMain__Land_Point_Track_TN_Airfield.ListItemLiquid_OxygenInfo'.");
				Report.Info("Value Entered = " + LiqOxy);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN_Airfield.ListItemLiquid_OxygenInfo, "AccessibleValue", LiqOxy, Validate.DefaultMessage, false);
			}
		}		
		
		//************************************************************************************//
		//*****************************Validates Nitrogen Value**********(********************//
		//************************************************************************************//
				
		public void ValidateNitrogen()
		{
			if (!Nitro_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(Nitro)') on item 'FormMain__Land_Point_Track_TN_Airfield.ListItemNitrogenInfo'.");
				Report.Info("Value Entered = " + Nitro);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN_Airfield.ListItemNitrogenInfo, "AccessibleValue", Nitro, Validate.DefaultMessage, false);
			}
		}			
		
		//************************************************************************************//
		//****************************Validates AIM9-L AAM Value******************************//
		//************************************************************************************//
				
		public void ValidateAIM9L()
		{
			if (!AIM9L_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(AIM9L)') on item 'FormMain__Land_Point_Track_TN_Airfield.ListItemAIM_9L_AAMInfo'.");
				Report.Info("Value Entered = " + AIM9L);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN_Airfield.ListItemAIM_9L_AAMInfo, "AccessibleValue", AIM9L, Validate.DefaultMessage, false);
			}
		}			
		
		//************************************************************************************//
		//****************************Validates AIM9-M AAM Value******************************//
		//************************************************************************************//
				
		public void ValidateAIM9M()
		{
			if (!AIM9M_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(AIM9M)') on item 'FormMain__Land_Point_Track_TN_Airfield.ListItemAIM_9M_AAMInfo'.");
				Report.Info("Value Entered = " + AIM9M);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN_Airfield.ListItemAIM_9M_AAMInfo, "AccessibleValue", AIM9M, Validate.DefaultMessage, false);
			}
		}			
		
		//************************************************************************************//
		//****************************Validates AIM9-M AAM Value******************************//
		//************************************************************************************//
				
		public void ValidateAIM9P()
		{
			if (!AIM9P_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(AIM9P)') on item 'FormMain__Land_Point_Track_TN_Airfield.ListItemAIM_9P_AAMInfo'.");
				Report.Info("Value Entered = " + AIM9P);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN_Airfield.ListItemAIM_9P_AAMInfo, "AccessibleValue", AIM9P, Validate.DefaultMessage, false);
			}
		}			
		
		
		//************************************************************************************//
		//****************************Validates AIM9-M AAM Value******************************//
		//************************************************************************************//
				
		public void ValidateSkyFlash()
		{
			if (!SkyFlash_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(AIM9P)') on item 'FormMain__Land_Point_Track_TN_Airfield.ListItemSky_Flash_AAM1Info'.");
				Report.Info("Value Entered = " + SkyFlash);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN_Airfield.ListItemSky_Flash_AAM1Info, "AccessibleValue", AIM9P, Validate.DefaultMessage, false);
			}
		}	
		
		//************************************************************************************//
		//***************************Validates AIM-120 AMRAAM Value***************************//
		//************************************************************************************//
				
		public void ValidateAIM120()
		{
			if (!AIM120_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(AIM120)') on item 'FormMain__Land_Point_Track_TN_Airfield.ListItemAIM_120_AMRAAMInfo'.");
				Report.Info("Value Entered = " + AIM120);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN_Airfield.ListItemAIM_120_AMRAAMInfo, "AccessibleValue", AIM120, Validate.DefaultMessage, false);
			}
		}		
		
		//************************************************************************************//
		//***************************Validates AIM-132 ASRAAM Value***************************//
		//************************************************************************************//
				
		public void ValidateAIM132()
		{
			if (!AIM132_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(AIM132)') on item 'FormMain__Land_Point_Track_TN_Airfield.ListItemAIM_132_AMRAAMInfo'.");
				Report.Info("Value Entered = " + AIM132);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN_Airfield.ListItemAIM_132_ASRAAMInfo, "AccessibleValue", AIM132, Validate.DefaultMessage, false);
			}
		}		
		
		//************************************************************************************//
		//*****************************Validates Magic I AAM Value****************************//
		//************************************************************************************//
				
		public void ValidateMagicI()
		{
			if (!MagicI_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(MagicI_OOR)') on item 'FormMain__Land_Point_Track_TN_Airfield.ListItemMagic_I_AAMInfo'.");
				Report.Info("Value Entered = " + MagicI_OOR);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN_Airfield.ListItemMagic_I_AAMInfo, "AccessibleValue", MagicI, Validate.DefaultMessage, false);
			}
		}		
		
		//************************************************************************************//
		//*****************************Validates Magic II AAM Value****************************//
		//************************************************************************************//
				
		public void ValidateMagicII()
		{
			if (!MagicII_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(MagicII_OOR)') on item 'FormMain__Land_Point_Track_TN_Airfield.ListItemMagic_II_AAMInfo'.");
				Report.Info("Value Entered = " + MagicII_OOR);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN_Airfield.ListItemMagic_II_AAMInfo, "AccessibleValue", MagicII, Validate.DefaultMessage, false);
			}
		}			
		
		//************************************************************************************//
		//***************************Validates Super 530 AAM Value****************************//
		//************************************************************************************//
				
		public void ValidateSuper530()
		{
			if (!Super530_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(Super530)') on item 'FormMain__Land_Point_Track_TN_Airfield.ListItemSuper_530_AAMInfo'.");
				Report.Info("Value Entered = " + Super530);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN_Airfield.ListItemSuper_530_AAMInfo, "AccessibleValue", Super530, Validate.DefaultMessage, false);
			}
		}		
		
		//************************************************************************************//
		//***************************Validates Super 530D AAM Value****************************//
		//************************************************************************************//
				
		public void ValidateSuper530D()
		{
			if (!Super530D_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(Super530D)') on item 'FormMain__Land_Point_Track_TN_Airfield.ListItemSuper_530D_AAMInfo'.");
				Report.Info("Value Entered = " + Super530D);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN_Airfield.ListItemSuper_530D_AAMInfo, "AccessibleValue", Super530D, Validate.DefaultMessage, false);
			}
		}			
		
		//************************************************************************************//
		//*****************************Validates MICA AAM Value*******************************//
		//************************************************************************************//
				
		public void ValidateMICA()
		{
			if (!MICA_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(MICA)') on item 'FormMain__Land_Point_Track_TN_Airfield.ListItemMICA_AAMInfo'.");
				Report.Info("Value Entered = " + MICA);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN_Airfield.ListItemMICA_AAMInfo, "AccessibleValue", MICA, Validate.DefaultMessage, false);
			}
		}			
		
		//************************************************************************************//
		//*****************************Validates TBD AAM 1 Value******************************//
		//************************************************************************************//
				
		public void ValidateAAM1()
		{
			if (!AAM1_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(AAM1)') on item 'FormMain__Land_Point_Track_TN_Airfield.ListItemTBD_AAM_1Info'.");
				Report.Info("Value Entered = " + AAM1);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN_Airfield.ListItemTBD_AAM_1Info, "AccessibleValue", AAM1, Validate.DefaultMessage, false);
			}
		}			
		
		//************************************************************************************//
		//*****************************Validates TBD AAM 2 Value******************************//
		//************************************************************************************//
				
		public void ValidateAAM2()
		{
			if (!AAM2_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(AAM2)') on item 'FormMain__Land_Point_Track_TN_Airfield.ListItemTBD_AAM_2Info'.");
				Report.Info("Value Entered = " + AAM2);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN_Airfield.ListItemTBD_AAM_2Info, "AccessibleValue", AAM2, Validate.DefaultMessage, false);
			}
		}			
		
		//************************************************************************************//
		//*****************************Validates TBD AAM 3 Value******************************//
		//************************************************************************************//
				
		public void ValidateAAM3()
		{
			if (!AAM3_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(AAM3)') on item 'FormMain__Land_Point_Track_TN_Airfield.ListItemTBD_AAM_3Info'.");
				Report.Info("Value Entered = " + AAM3);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN_Airfield.ListItemTBD_AAM_3Info, "AccessibleValue", AAM3, Validate.DefaultMessage, false);
			}
		}			
		
		//************************************************************************************//
		//*****************************Validates TBD AAM 4 Value******************************//
		//************************************************************************************//
				
		public void ValidateAAM4()
		{
			if (!AAM4_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(AAM4)') on item 'FormMain__Land_Point_Track_TN_Airfield.ListItemTBD_AAM_4Info'.");
				Report.Info("Value Entered = " + AAM4);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN_Airfield.ListItemTBD_AAM_4Info, "AccessibleValue", AAM4, Validate.DefaultMessage, false);
			}
		}			
		
		//************************************************************************************//
		//*****************************Validates Durandol Value*******************************//
		//************************************************************************************//
				
		public void ValidateDurandol()
		{
			if (!Durandal_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(Durandal)') on item 'FormMain__Land_Point_Track_TN_Airfield.ListItemDurandal_ASMInfo'.");
				Report.Info("Value Entered = " + Durandal);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN_Airfield.ListItemDurandal_ASMInfo, "AccessibleValue", Durandal, Validate.DefaultMessage, false);
			}
		}			
		
		//************************************************************************************//
		//*******************************Validates BMP Value**********************************//
		//************************************************************************************//
				
		public void ValidateBAP()
		{
			if (!BAP_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(BAP)') on item 'FormMain__Land_Point_Track_TN_Airfield.ListItemBAP_100_ASMInfo'.");
				Report.Info("Value Entered = " + BAP);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN_Airfield.ListItemBAP_100_ASMInfo, "AccessibleValue", BAP, Validate.DefaultMessage, false);
			}
		}			
		
		//************************************************************************************//
		//*****************************Validates TBD ASM 1 Value******************************//
		//************************************************************************************//		
		
		public void ValidateASM1()
		{
			if (!ASM1_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(ASM1)') on item 'FormMain__Land_Point_Track_TN_Airfield.ListItemTBD_ASM_1Info'.");
				Report.Info("Value Entered = " + ASM1);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN_Airfield.ListItemTBD_ASM_1Info, "AccessibleValue", ASM1, Validate.DefaultMessage, false);
			}
		}			
		
		//************************************************************************************//
		//*****************************Validates TBD ASM 2 Value******************************//
		//************************************************************************************//
				
		public void ValidateASM2()
		{
			if (!ASM2_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(ASM2)') on item 'FormMain__Land_Point_Track_TN_Airfield.ListItemTBD_ASM_2Info'.");
				Report.Info("Value Entered = " + ASM2);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN_Airfield.ListItemTBD_ASM_2Info, "AccessibleValue", ASM2, Validate.DefaultMessage, false);
			}
		}			
		
		//************************************************************************************//
		//*****************************Validates TBD ASM 3 Value******************************//
		//************************************************************************************//
				
		public void ValidateASM3()
		{
			if (!ASM3_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(ASM3)') on item 'FormMain__Land_Point_Track_TN_Airfield.ListItemTBD_ASM_3Info'.");
				Report.Info("Value Entered = " + ASM3);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN_Airfield.ListItemTBD_ASM_3Info, "AccessibleValue", ASM3, Validate.DefaultMessage, false);
			}
		}			
		
		//************************************************************************************//
		//*****************************Validates TBD ASM 4 Value******************************//
		//************************************************************************************//
				
		public void ValidateASM4()
		{
			if (!ASM4_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(ASM4)') on item 'FormMain__Land_Point_Track_TN_Airfield.ListItemTBD_ASM_4Info'.");
				Report.Info("Value Entered = " + ASM4);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN_Airfield.ListItemTBD_ASM_4Info, "AccessibleValue", ASM4, Validate.DefaultMessage, false);
			}
		}			
		
		//************************************************************************************//
		//****************************Validates Depth Charge Value****************************//
		//************************************************************************************//
				
		public void ValidateDepthCharge()
		{
			if (!AntiSub_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(AntiSub)') on item 'FormMain__Land_Point_Track_TN_Airfield.ListItemAntiSub_Depth_ChargeInfo'.");
				Report.Info("Value Entered = " + AntiSub);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN_Airfield.ListItemAntiSub_Depth_ChargeInfo, "AccessibleValue", AntiSub, Validate.DefaultMessage, false);
			}
		}			
		
		//************************************************************************************//
		//*********************************Validates NDB Value********************************//
		//************************************************************************************//
				
		public void ValidateNDB()
		{
			if (!NDB_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(NDB)') on item 'FormMain__Land_Point_Track_TN_Airfield.ListItemNDBInfo'.");
				Report.Info("Value Entered = " + NDB);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN_Airfield.ListItemNDBInfo, "AccessibleValue", NDB, Validate.DefaultMessage, false);
			}
		}			
		
		//************************************************************************************//
		//********************Validates Conventional 500lb Bomb Value*************************//
		//************************************************************************************//
				
		public void ValidateBomb500()
		{
			if (!Bomb500_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(Bomb500)') on item 'FormMain__Land_Point_Track_TN_Airfield.ListItemConventional_500lb_BombInfo'.");
				Report.Info("Value Entered = " + Bomb500);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN_Airfield.ListItemConventional_500lb_BombInfo, "AccessibleValue", Bomb500, Validate.DefaultMessage, false);
			}
		}			
			
		//************************************************************************************//
		//********************Validates Conventional 1000lb Bomb Value************************//
		//************************************************************************************//
				
		public void ValidateBomb1000()
		{
			if (!Bomb1000_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(Bomb1000)') on item 'FormMain__Land_Point_Track_TN_Airfield.ListItemConventional_1000lb_BombInfo'.");
				Report.Info("Value Entered = " + Bomb1000);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN_Airfield.ListItemConventional_1000lb_BombInfo, "AccessibleValue", Bomb1000, Validate.DefaultMessage, false);
			}
		}			
		
		//************************************************************************************//
		//***************************Validates 20 mm Ammo Value*******************************//
		//************************************************************************************//
				
		public void ValidateAmmo20()
		{
			if (!Ammo20_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(Ammo20)') on item 'FormMain__Land_Point_Track_TN_Airfield.ListItem20mm_AmmoInfo'.");
				Report.Info("Value Entered = " + Ammo20);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN_Airfield.ListItem20mm_AmmoInfo, "AccessibleValue", Ammo20, Validate.DefaultMessage, false);
			}
		}					
		
		//************************************************************************************//
		//***************************Validates 27 mm Ammo Value*******************************//
		//************************************************************************************//
				
		public void ValidateAmmo27()
		{
			if (!Ammo27_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(Ammo27)') on item 'FormMain__Land_Point_Track_TN_Airfield.ListItem27mm_AmmoInfo'.");
				Report.Info("Value Entered = " + Ammo27);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN_Airfield.ListItem27mm_AmmoInfo, "AccessibleValue", Ammo27, Validate.DefaultMessage, false);
			}
		}				
		
		//************************************************************************************//
		//***************************Validates 20 mm Ammo Value*******************************//
		//************************************************************************************//
				
		public void ValidateAmmo30()
		{
			if (!Ammo30_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(Ammo30)') on item 'FormMain__Land_Point_Track_TN_Airfield.ListItem30mm_AmmoInfo'.");
				Report.Info("Value Entered = " + Ammo30);
				Validate.Attribute(repo.FormMain__Land_Point_Track_TN_Airfield.ListItem30mm_AmmoInfo, "AccessibleValue", Ammo30, Validate.DefaultMessage, false);
			}
		}	
		
		//************************************************************************************//
		//*************************************Drops Track************************************//
		//************************************************************************************//
		
		public void DropTrack()
		{			
			TrackManagement.DropTrack.DropTrack.Start();
		}

		//************************************************************************************//
		//***************************Validates Track is Dropped*******************************//
		//************************************************************************************//
		
		public void Validate_DropTrack()
		{
			Duration OrigDur = repo.FormTacViewC2.PictureTrackInfo.SearchTimeout;
			repo.FormTacViewC2.PictureTrackInfo.SearchTimeout = 8000;

			Report.Info("Validating Track #" + TrackNum + " was dropped");
	
			bool result = Validate.NotExists(repo.FormTacViewC2.PictureTrackInfo, Validate.DefaultMessage, false);
			
			if (result == true)
			{
				Report.Success("Successfully dropped track #" + TrackNum);
			}
			else
			{
				Report.Debug("Track #" + TrackNum + " failed to drop within 8 seconds, proceeding to next track creation.");
				Report.Screenshot();				
			}
			
			repo.FormTacViewC2.PictureTrackInfo.SearchTimeout = OrigDur;
		}		
		
		//************************************************************************************//
		//*****************************Zooms Out to Locate Track******************************//
		//************************************************************************************//	
		
		public void Zoom500()
		{
			if (ZoomFlag == true)
			{
				Report.Info("Mouse Left Click item 'FormTacViewC2.ButtonSet_Range_to_500_km' at Center.");
				repo.FormTacViewC2.ButtonSet_Range_to_500_km.Click();
				Report.Info("Mouse Left Click item 'FormTacViewC2.Button_Center_on_Own_Site' at Center.");
				repo.FormTacViewC2.Button_Center_on_Own_Site.Click();
				ZoomFlag = false;
			}
		}		
		
		//**************************************************************************************//
		//***************************Ranorex Generated Default Method***************************//
		//**************************************************************************************//
		
		static ValidateAirfieldStatus()
		{
			//Your recording specific initialization code goes here.
		}
		
		//**************************************************************************************//
		//*****************************Ranorex Generated Init Method****************************//
		//**************************************************************************************//		

		private void Init()
		{
			// Your recording specific initialization code goes here.
		}
	}
}
