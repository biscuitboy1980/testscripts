///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;

namespace TacViewLib.UISpecific.Display
{
	/// <summary>
	/// The CheckDisplay recording.
	/// </summary>
	[TestModule("c0952b1f-79a6-4f5c-942e-e81abed95c64", ModuleType.Recording, 1)]
	public partial class CheckDisplay : ITestModule
	{
		/// <summary>
		/// Holds an instance of the TacViewLib.TacViewLibRepository repository.
		/// </summary>
		public static TacViewLib.TacViewLibRepository repo = TacViewLib.TacViewLibRepository.Instance;

		static CheckDisplay instance = new CheckDisplay();

		/// <summary>
		/// Constructs a new instance.
		/// </summary>
		public CheckDisplay()
		{
		}

		/// <summary>
		/// Gets a static instance of this recording.
		/// </summary>
		public static CheckDisplay Instance
		{
			get { return instance; }
		}

#region Variables

#endregion

		/// <summary>
		/// Starts the replay of the static recording <see cref="Instance"/>.
		/// </summary>
		[System.CodeDom.Compiler.GeneratedCode("Ranorex", "3.0.0")]
		public static void Start()
		{
			TestModuleRunner.Run(Instance);
		}

		/// <summary>
		/// Performs the playback of actions in this recording.
		/// </summary>
		/// <remarks>You should not call this method directly, instead pass the module
		/// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
		/// that will in turn invoke this method.</remarks>
		[System.CodeDom.Compiler.GeneratedCode("Ranorex", "3.0.0")]
		void ITestModule.Run()
		{
			Mouse.DefaultMoveTime = 150;
			Keyboard.DefaultKeyPressTime = 25;
			Delay.SpeedFactor = 1.0;

			Init();

			TurnOffAllInterfaces();
			Delay.Milliseconds(100);
			
			Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='Configuration: C2') on item 'FormTacViewC2.ListItemConfiguration__C2'.", repo.FormTacViewC2.ListItemConfiguration__C2Info, new RecordItemIndex(1));
			Validate.Attribute(repo.FormTacViewC2.ListItemConfiguration__C2Info, "Text", "Configuration: C2");
			Delay.Milliseconds(100);
			
			// Validate status column cell
			try {
				Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidate status column cell\r\nValidating AttributeEqual (AccessibleName='Status') on item 'FormTacViewC2.Host_interface_Control_Table.Row0.CellStatus_0_1'.", repo.FormTacViewC2.Host_interface_Control_Table.Row0.CellStatus_0_1Info, new RecordItemIndex(2));
				Validate.Attribute(repo.FormTacViewC2.Host_interface_Control_Table.Row0.CellStatus_0_1Info, "AccessibleName", "Status", Validate.DefaultMessage, false);
				Delay.Milliseconds(120);
			} catch(Exception) { }
			
			// Validate unit column cell
			try {
				Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidate unit column cell\r\nValidating AttributeEqual (AccessibleName='Unit') on item 'FormTacViewC2.Host_interface_Control_Table.Row0.CellUnit_0_'.", repo.FormTacViewC2.Host_interface_Control_Table.Row0.CellUnit_0_Info, new RecordItemIndex(3));
				Validate.Attribute(repo.FormTacViewC2.Host_interface_Control_Table.Row0.CellUnit_0_Info, "AccessibleName", "Unit", Validate.DefaultMessage, false);
				Delay.Milliseconds(120);
			} catch(Exception) { }
			
			Validate_InterfaceText();
			Delay.Milliseconds(100);
			
			Enable_Interface_One();
			Delay.Milliseconds(120);
			
			// Validate Unit Number
			Validate_Unit1();
			Delay.Milliseconds(100);
			
			try {
				Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibleName=' Exercise Status') on item 'FormTacViewC2.BannerFields.PictureExercise_Status'.", repo.FormTacViewC2.BannerFields.PictureExercise_StatusInfo, new RecordItemIndex(7));
				Validate.Attribute(repo.FormTacViewC2.BannerFields.PictureExercise_StatusInfo, "AccessibleName", " Exercise Status", Validate.DefaultMessage, false);
				Delay.Milliseconds(120);
			} catch(Exception) { }
			
			try {
				Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibleValue='Disabled') on item 'FormTacViewC2.BannerFields.PictureExercise_Status'.", repo.FormTacViewC2.BannerFields.PictureExercise_StatusInfo, new RecordItemIndex(8));
				Validate.Attribute(repo.FormTacViewC2.BannerFields.PictureExercise_StatusInfo, "AccessibleValue", "Disabled", Validate.DefaultMessage, false);
				Delay.Milliseconds(120);
			} catch(Exception) { }
			
			Enable_Interface_Two();
			Delay.Milliseconds(120);
			
			// Validate Unit Number
			Validate_Unit2();
			Delay.Milliseconds(100);
			
			try {
				Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibleName=' C2 HOST: Force Authority') on item 'FormTacViewC2____map__Defaul.PictureC2_HOST_Force_Authority'.", repo.FormTacViewC2____map__Defaul.PictureC2_HOST_Force_AuthorityInfo, new RecordItemIndex(11));
				Validate.Attribute(repo.FormTacViewC2____map__Defaul.PictureC2_HOST_Force_AuthorityInfo, "AccessibleName", " C2 HOST: Force Authority", Validate.DefaultMessage, false);
				Delay.Milliseconds(120);
			} catch(Exception) { }
			
			try {
				Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibleName=' C2 HOST: Exercise Status') on item 'FormTacViewC2____map__Defaul.PictureC2_HOST_Exercise_Status'.", repo.FormTacViewC2____map__Defaul.PictureC2_HOST_Exercise_StatusInfo, new RecordItemIndex(12));
				Validate.Attribute(repo.FormTacViewC2____map__Defaul.PictureC2_HOST_Exercise_StatusInfo, "AccessibleName", " C2 HOST: Exercise Status", Validate.DefaultMessage, false);
				Delay.Milliseconds(120);
			} catch(Exception) { }
			
			Mouse_Right_Click_Interface_One();
			Delay.Milliseconds(120);
			
			Take_Force_Authority();
			Delay.Milliseconds(120);
			
			try {
				Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibleValue='Yes') on item 'FormTacViewC2____map__Defaul.PictureC2_HOST_Force_Authority'.", repo.FormTacViewC2____map__Defaul.PictureC2_HOST_Force_AuthorityInfo, new RecordItemIndex(15));
				Validate.Attribute(repo.FormTacViewC2____map__Defaul.PictureC2_HOST_Force_AuthorityInfo, "AccessibleValue", "Yes", Validate.DefaultMessage, false);
				Delay.Milliseconds(120);
			} catch(Exception) { }
			
			Mouse_Right_Click_Interface_One();
			Delay.Milliseconds(120);
			
			Release_Force_Authority();
			Delay.Milliseconds(120);
			
			try {
				Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibleValue='No') on item 'FormTacViewC2____map__Defaul.PictureC2_HOST_Force_Authority'.", repo.FormTacViewC2____map__Defaul.PictureC2_HOST_Force_AuthorityInfo, new RecordItemIndex(18));
				Validate.Attribute(repo.FormTacViewC2____map__Defaul.PictureC2_HOST_Force_AuthorityInfo, "AccessibleValue", "No", Validate.DefaultMessage, false);
				Delay.Milliseconds(120);
			} catch(Exception) { }
			
		}

#region Image Feature Data
#endregion
	}
}
