///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using System.Windows.Forms;
using System.IO;

using Ranorex;
using Ranorex.Core;

namespace TacViewLib.UISpecific.ACO
{
	/// <summary>
	/// The ImportACO recording.
	/// </summary>
	public partial class ImportACO
	{		
		static ImportACO()
		{
			//Your recording specific initialization code goes here.
		}

		public void CloseDialog()
		{
			while (repo.FormACM_Import_Progress.SelfInfo.Exists())
			{
				//wait
				Keyboard.Press(Keys.Return, Keyboard.DefaultScanCode, 1, 1, true);
			}
		}

		public void Validate_ACO_Error_Log()
		{
			Report.Info("Error log is displayed\r\nValidating AttributeEqual (Title='ACO Error Log') on item 'ACO.ACO_Error_Log.ACO_Error_Log'.");
			Validate.Attribute(repo.ACO.ACO_Error_Log.ACO_Error_LogInfo, "Title", "ACO Error Log", Validate.DefaultMessage, false);
		}

		public void Validate_Save()
		{
			Report.Info("Error Log buttons are available\r\nValidating AttributeEqual (Text='Save...') on item 'ACO.ACO_Error_Log.Save'.");
			Validate.Attribute(repo.ACO.ACO_Error_Log.SaveInfo, "Text", "Save...", Validate.DefaultMessage, false);
		}

		public void Validate_Cancel()
		{
			Report.Info("Error Log buttons are available\r\nValidating AttributeEqual (Text='Cancel') on item 'ACO.ACO_Error_Log.Cancel'.");
			Validate.Attribute(repo.ACO.ACO_Error_Log.CancelInfo, "Text", "Cancel", Validate.DefaultMessage, false);
		}

		public void Validate_Next()
		{
			Report.Info("Error Log buttons are available\r\nValidating AttributeEqual (Text='Next') on item 'ACO.ACO_Error_Log.Next'.");
			Validate.Attribute(repo.ACO.ACO_Error_Log.NextInfo, "Text", "Next", Validate.DefaultMessage, false);
		}

		public void Validate_Import_ACMs_From_File()
		{
			Report.Info("Validates Title bar\r\nValidating AttributeEqual (Title='Import ACMs From File') on item 'ACO.Import_ACM_Control.Import_ACMs_From_File'.");
			Validate.Attribute(repo.ACO.Import_ACM_Control.Import_ACMs_From_FileInfo, "Title", "Import ACMs From File", Validate.DefaultMessage, false);
		}

		public void Validate_Caption_607_ACMs_available()
		{
			Report.Info("Vaildates correct number of ACMs are available.\r\nValidating AttributeEqual (Text='607 ACMs available') on item 'ACO.Import_ACM_Control.Caption_607_ACMs_available'.");
			Validate.Attribute(repo.ACO.Import_ACM_Control.Caption_607_ACMs_availableInfo, "Text", "607 ACMs available", Validate.DefaultMessage, false);
		}

		public void Validate_All_ACMs()
		{
			Report.Info("Validates all ACMs level is displayed\r\nValidating AttributeEqual (Text='All ACMs') on item 'ACO.Import_ACM_Control.All_ACMs'.");
			Validate.Attribute(repo.ACO.Import_ACM_Control.All_ACMsInfo, "Text", "All ACMs", Validate.DefaultMessage, false);
		}

		public void Validate_ATC()
		{
			Report.Info("Validates ACM Type level is displayed\r\nValidating AttributeEqual (Text='ATC') on item 'ACO.Import_ACM_Control.ATC'.");
			Validate.Attribute(repo.ACO.Import_ACM_Control.ATCInfo, "Text", "ATC", Validate.DefaultMessage, false);
		}

		public void Validate_POLK_ARMY_AIRFIELD()
		{
			Report.Info("Validates ACM Name level is displayed\r\nValidating AttributeEqual (Text='POLK ARMY AIRFIELD') on item 'ACO.Import_ACM_Control.POLK_ARMY_AIRFIELD'.");
			Validate.Attribute(repo.ACO.Import_ACM_Control.POLK_ARMY_AIRFIELDInfo, "Text", "POLK ARMY AIRFIELD", Validate.DefaultMessage, false);
		}

		public void EnterACO()
		{			
			string path = Directory.GetCurrentDirectory();
			path = path + @"\DataFiles";
			
			Report.Info(path + @"\ACOTEST.txt");
			Keyboard.Press(path + @"\ACOTEST.txt");
		}

		private void Init()
		{
			// Your recording specific initialization code goes here.
		}
	}
}
