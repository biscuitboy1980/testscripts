///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using System.Windows.Forms;
using Microsoft.Win32;
using System.Diagnostics;
using Microsoft.VisualBasic;
using System.ComponentModel;
using System.Data;
using System.IO;

using CommonUtilLib;
using Ranorex;
using Ranorex.Core;


namespace TacViewLib.UISpecific.Setup_1_C2Host_Interface
{
	/// <summary>
	/// The Setup recording.
	/// </summary>
	public partial class Setup_1_C2Host_Interface		
	{
		
		public static string quiet;
		
		
		//**************************************************************************************//
		//************************Checks for Existing Registry Key Before Deleting It***********//
		//**************************************************************************************//
		
		public void RegClear()
		{	
			string regKey="Software\\Ultra Electronics Inc\\TacViewC2";
			using (RegistryKey key = Registry.CurrentUser.OpenSubKey(regKey, true))
			{
			if (key != null)
			{
				//MessageBox.Show("Deleting TacView Registry SubKey", "SubKey Deletion");
				Registry.CurrentUser.DeleteSubKeyTree(regKey);
			}
			}

		}
		
		//**************************************************************************************//
		//************************Selects no Open GL if the prompt appears**********************//
		//**************************************************************************************//
		
		public void GLButtonOK()
		{
			Report.Info("Validating Exists on item 'FormSelect_Configuration.ButtonOK1'.");
			
			if (repo.FormSelect_Configuration.ButtonOKInfo.Exists())
			{
				repo.FormSelect_Configuration.ButtonOK.Click("37;11");
			}
		}
	
		//**************************************************************************************//
		//******Opens pacific map if available, if not closes the map selection dialogue********//
		//**************************************************************************************//
		
		public void MapDialogue()
		{
			
		Duration OrigDur1 = repo.FormLoadMap.ButtonOpenInfo.SearchTimeout;
		repo.FormLoadMap.ButtonOpenInfo.SearchTimeout = 5000;
		
		Report.Info("Checking to see if 'FormLoadMap' Exists");
			    
			if (repo.FormLoadMap.ButtonOpenInfo.Exists())

				{
				if (repo.FormLoadMap.ListItemMapInfo.Exists())					
					{
					repo.FormLoadMap.ListItemMap.DoubleClick("center");
					}
			
				else
					{
					repo.FormLoadMap.ButtonCancel.Click("center");
					}
				}

			repo.FormLoadMap.ButtonOpenInfo.SearchTimeout = OrigDur1;
				
		}
		
	    //**************************************************************************************//
		//********************************Populates C2Host IP Address***************************//
		//**************************************************************************************//
		
		public void C2Hostip()
		{
			Report.Info("Key sequence 'C2Hip'.");
			Keyboard.Press(C2Hip);
		}		
		
        //**************************************************************************************//
		//************************Validates C2Host interface goes OPER***************************//
		//**************************************************************************************//
		
		public void ValC2Host()
		{
			Report.Info("Validating C2HOST Connection");
			if (repo.FormTacViewC2.Host_interface_Control_Table.Row0.CellStatus_0_1.Text=="DOWN")

				{
				////// Restarts Trackserver daemon on C2H Linux //////
				Report.Info("Trackserver not connected attempting to restart daemon on the C2H");
				System.Diagnostics.Process TSrestart = new System.Diagnostics.Process();
				TSrestart.StartInfo.FileName=@"c:/Program Files/Attachmate/RSecure/ssh.exe";
				TSrestart.StartInfo.Arguments="-i ../keys/key -o StrictHostKeyChecking=no adsi@" + C2Hip + " ADMIN_TRACK_SVR_RESTART";
				TSrestart.Start();
				TSrestart.WaitForExit();
				Delay.Seconds(5);
				Report.Info("Validating connection to Trackserver");
				Validate.Attribute(repo.FormTacViewC2.Host_interface_Control_Table.Row0.CellStatus_0_1, "Text", "OPER");
				}
			
		}
	
  
		public void LaunchTV()
		{
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			//Your code here. Code inside this method will not be changed by the code generator.
			Report.Info("Launching TacView from the Desktop");
			SharedFunctions.LaunchApp("TacViewC2");
		}

		static Setup_1_C2Host_Interface()
		{
			//Your recording specific initialization code goes here.
		}

		private void Init()
		{
			// Your recording specific initialization code goes here.
		}

        public void KillTV()
        {
        	CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
        	SharedFunctions.KillProcess("Realview.exe");    
        }
	}
}