///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;

namespace TacViewLib.UISpecific.MapFeatures
{
	/// <summary>
	/// The ImportGeoImage recording.
	/// </summary>
	[TestModule("36491c9b-2003-42e9-a450-3f45b3a2b2a1", ModuleType.Recording, 1)]
	public partial class ImportGeoImage : ITestModule
	{
		/// <summary>
		/// Holds an instance of the TacViewLib.TacViewLibRepositoryUISpecific repository.
		/// </summary>
		public static TacViewLib.TacViewLibRepositoryUISpecific repo = TacViewLib.TacViewLibRepositoryUISpecific.Instance;

		static ImportGeoImage instance = new ImportGeoImage();

		/// <summary>
		/// Constructs a new instance.
		/// </summary>
		public ImportGeoImage()
		{
		}

		/// <summary>
		/// Gets a static instance of this recording.
		/// </summary>
		public static ImportGeoImage Instance
		{
			get { return instance; }
		}

#region Variables

#endregion

		/// <summary>
		/// Starts the replay of the static recording <see cref="Instance"/>.
		/// </summary>
		[System.CodeDom.Compiler.GeneratedCode("Ranorex", "3.0.0")]
		public static void Start()
		{
			TestModuleRunner.Run(Instance);
		}

		/// <summary>
		/// Performs the playback of actions in this recording.
		/// </summary>
		/// <remarks>You should not call this method directly, instead pass the module
		/// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
		/// that will in turn invoke this method.</remarks>
		[System.CodeDom.Compiler.GeneratedCode("Ranorex", "3.0.0")]
		void ITestModule.Run()
		{
			Mouse.DefaultMoveTime = 150;
			Keyboard.DefaultKeyPressTime = 25;
			Delay.SpeedFactor = 1.0;

			Init();

			Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'TacView_TitleBar.File' at Center.", repo.TacView_TitleBar.FileInfo, new RecordItemIndex(0));
			repo.TacView_TitleBar.File.Click(100);
			Delay.Milliseconds(0);
			
			Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'File_Menu.MenuItemImport_CADRG_Geo_Images' at Center.", repo.File_Menu.MenuItemImport_CADRG_Geo_ImagesInfo, new RecordItemIndex(1));
			repo.File_Menu.MenuItemImport_CADRG_Geo_Images.Click(100);
			Delay.Milliseconds(0);
			
			Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'GeoImage.FormImport_Maps.Text1302' at CenterLeft.", repo.GeoImage.FormImport_Maps.Text1302Info, new RecordItemIndex(2));
			repo.GeoImage.FormImport_Maps.Text1302.Click(Location.CenterLeft, 100);
			Delay.Milliseconds(0);
			
			Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{RShiftKey down}{Home}{RShiftKey up}{Delete}'.", new RecordItemIndex(3));
			Keyboard.Press("{RShiftKey down}{Home}{RShiftKey up}{Delete}", 100);
			Delay.Milliseconds(0);
			
			Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{RShiftKey down}{End}{RShiftKey up}{Delete}'.", new RecordItemIndex(4));
			Keyboard.Press("{RShiftKey down}{End}{RShiftKey up}{Delete}", 100);
			Delay.Milliseconds(0);
			
			EnterGEOImage();
			Delay.Milliseconds(100);
			
			Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'GeoImage.FormImport_Maps.ButtonSearch' at Center.", repo.GeoImage.FormImport_Maps.ButtonSearchInfo, new RecordItemIndex(6));
			repo.GeoImage.FormImport_Maps.ButtonSearch.Click(100);
			Delay.Milliseconds(0);
			
			Report.Log(ReportLevel.Info, "Keyboard", "Key 'Enter' Press.", new RecordItemIndex(7));
			Keyboard.Press(Keys.Return, Keyboard.DefaultScanCode, 100, 1, true);
			Delay.Milliseconds(0);
			
			try {
				Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Text='Search completed') on item 'GeoImage.FormImport_Maps.ListItemSearch_completed'.", repo.GeoImage.FormImport_Maps.ListItemSearch_completedInfo, new RecordItemIndex(8));
				Validate.Attribute(repo.GeoImage.FormImport_Maps.ListItemSearch_completedInfo, "Text", "Search completed", Validate.DefaultMessage, false);
				Delay.Milliseconds(100);
			} catch(Exception) { }
			
			Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'GeoImage.FormImport_Maps.ButtonImport' at Center.", repo.GeoImage.FormImport_Maps.ButtonImportInfo, new RecordItemIndex(9));
			repo.GeoImage.FormImport_Maps.ButtonImport.Click(100);
			Delay.Milliseconds(0);
			
			try {
				Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Text='Import completed') on item 'GeoImage.FormImport_Maps.ListItemImport_completed'.", repo.GeoImage.FormImport_Maps.ListItemImport_completedInfo, new RecordItemIndex(10));
				Validate.Attribute(repo.GeoImage.FormImport_Maps.ListItemImport_completedInfo, "Text", "Import completed", Validate.DefaultMessage, false);
				Delay.Milliseconds(100);
			} catch(Exception) { }
			
			Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'GeoImage.FormImport_Maps.ButtonClose' at Center.", repo.GeoImage.FormImport_Maps.ButtonCloseInfo, new RecordItemIndex(11));
			repo.GeoImage.FormImport_Maps.ButtonClose.Click(100);
			Delay.Milliseconds(0);
			
		}

#region Image Feature Data
#endregion
	}
}
