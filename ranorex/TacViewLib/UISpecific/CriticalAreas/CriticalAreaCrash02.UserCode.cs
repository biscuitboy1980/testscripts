///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using System.Windows.Forms;

using Ranorex;
using Ranorex.Core;

namespace TacViewLib.UISpecific.CriticalAreas
{
	/// <summary>
	/// The Critical_Area_Crash recording.
	/// </summary>
	public partial class CriticalAreaCrash02
	{		
		public int TCount;
		public string trknum;
		public bool ZoomFlag = false;	
		public int w;
		public int h;
		
		static CriticalAreaCrash02()
		{
			//Your recording specific initialization code goes here.
		}
		
		//************************************************************************************//
        //**********************Sizes Form to Ensure Object id Visible************************//
        //************************************************************************************//

        public void FormSize()
        {    
        	Ranorex.Form test = @"/form[@title~'Alerts*']";
            var a = test.ScreenRectangle.Width;
            var b = test.ScreenRectangle.Height;
            w = Convert.ToInt32(a);
            h = Convert.ToInt32(b);
            test.Resize(700, b);
        }       
            
        //************************************************************************************//
        //**********************Sizes Form to Ensure Object id Visible************************//
        //************************************************************************************//    
         
        public void FormResize()
        {    
        	Ranorex.Form test = @"/form[@title~'Alerts*']";
            test.Resize(w, h);
        }  		
		
		//************************************************************************************//
		//*********************************Gets Track Count***********************************//
		//************************************************************************************//
		
		public void GetTrackCount()
		{			
			Ranorex.Container cont1 = repo.FormTacViewC2.ContainerRvView;
			IList<Picture> list1 = cont1.Find<Picture>(@"/form[@title~'^TacViewC2\ \ \ \(map:\ .*']/element/container/picture[@accessiblevalue='Track']");
			TCount = list1.Count;	
		}			
		
		//************************************************************************************//
		//*********************************Gets Track Number**********************************//
		//************************************************************************************//
		
		public void GetTrackNum()			
		{			
		    TCount++;
		    Accessible pic1 = @"/form[@title~'^TacViewC2\ \ \ \(map:\ .*']/element/container/picture[@accessiblevalue='Track']" + "[" + TCount + "]";
   			Accessible accElement = new Accessible(pic1);  
   			trknum = accElement.Name;
   			Report.Info("Track Number = " + trknum);   	   			
		}		
		
		//************************************************************************************//
		//***************************Creates Run-Time Repo Items******************************//
		//************************************************************************************//		

		public void CreateTrackRepoItems()
		{			
			string currentPath = repo.FormTacViewC2.PictureTrackInfo.Path.ToString();
			repo.FormTacViewC2.PictureTrackInfo.Path = currentPath.Replace("%track%", trknum);
			Report.Info("Setting repo item FormTacViewC2.PictureTrack to " + repo.FormTacViewC2.PictureTrackInfo.Path.ToString());			
			
			string currentPath2 = repo.FormRealView.MenuItemTrackNumberInfo.Path.ToString();
			repo.FormRealView.MenuItemTrackNumberInfo.Path = currentPath2.Replace("%track%", trknum);
			Report.Info("Setting repo item FormRealView.MenuItemTrackNumber to " + repo.FormRealView.MenuItemTrackNumberInfo.Path.ToString());
		}
		
		//************************************************************************************//
		//***************************Moves Track Into of Corridor*****************************//
		//************************************************************************************//
		
		public void MoveTrack()
		{
			Report.Info("Mouse Left Down item 'FormTacViewC2.PictureTrack' at 12;12.");
			repo.FormTacViewC2.PictureTrack.MoveTo("12;12");
			Mouse.ButtonDown(MouseButtons.Left);
			
			Report.Info("Mouse Left Up item 'FormTacViewC2.PicturePolygon_ACM' at 130;240.");
			repo.FormTacViewC2.PicturePolygon_ACM.MoveTo("130;240");
			Mouse.ButtonUp(MouseButtons.Left);
		}
		
        //************************************************************************************//
		//****************************Drops Corresponding Track*******************************//
		//************************************************************************************//
		
		public void DropTrack()
		{			
			TacViewLib.UISpecific.Configuration.Common.DropTrackSequence( trknum );
		}

		//************************************************************************************//
		//***************************Validates Track is Dropped*******************************//
		//************************************************************************************//
		
		public void Validate_DropTrack()
		{
			Duration OrigDur = repo.FormTacViewC2.PictureTrackInfo.SearchTimeout;
			repo.FormTacViewC2.PictureTrackInfo.SearchTimeout = 3000;

			Report.Info("Validating NotExists on Track # " + trknum);
			Validate.NotExists(repo.FormTacViewC2.PictureTrackInfo, Validate.DefaultMessage, false);
			
			repo.FormTacViewC2.PictureTrackInfo.SearchTimeout = OrigDur;
		}		

		//************************************************************************************//
		//************************Resets Paths Created at Run-Time****************************//
		//************************************************************************************//
		
		public void ResetPaths()
		{
			string currentPath = repo.FormTacViewC2.PictureTrackInfo.Path.ToString();
			repo.FormTacViewC2.PictureTrackInfo.Path = currentPath.Replace(trknum, "%track%");
			Report.Info("Resetting repo item FormTacViewC2.PictureTrack repo item to" + repo.FormTacViewC2.PictureTrackInfo.Path.ToString());
			
			string currentPath2 = repo.FormRealView.MenuItemTrackNumberInfo.Path.ToString();
			repo.FormRealView.MenuItemTrackNumberInfo.Path = currentPath2.Replace(trknum, "%track%");
			Report.Info("Resetting repo item FormRealView.MenuItemTrackNumber to " + repo.FormRealView.MenuItemTrackNumberInfo.Path.ToString());
		}
		
		//************************************************************************************//
		//*****************************Zooms Out to Locate Track******************************//
		//************************************************************************************//	
		
		public void Zoom500()
		{
			if (ZoomFlag == true)
			{
				Report.Info("Mouse Left Click item 'FormTacViewC2.ButtonSet_Range_to_500_km' at Center.");
				repo.FormTacViewC2.ButtonSet_Range_to_500_km.Click();
				Report.Info("Mouse Left Click item 'FormTacViewC2.Button_Center_on_Own_Site' at Center.");
				repo.FormTacViewC2.Button_Center_on_Own_Site.Click();
				ZoomFlag = false;
			}
		}

		public void Validate_TextPlease_tell_Microsoft()
		{
			Validate.IsTrue(TacViewLib.UISpecific.Configuration.Common.Validate_TextPlease_tell_Microsoft());
		}

		public void Validate_TitleBarTacViewC2()
		{
			Report.Info("Validating Exists on item 'FormTacViewC2.TitleBarTacViewC2____map__Defaul'.");
			Validate.Exists(repo.FormTacViewC2.TitleBarTacViewC2____map__DefaulInfo, Validate.DefaultMessage, false);
		}

		private void Init()
		{
			// Your recording specific initialization code goes here.
		}		
	}
}
