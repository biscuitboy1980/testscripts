///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using System.Windows.Forms;

using Ranorex;
using Ranorex.Core;

namespace TacViewLib.UISpecific.CriticalAreas
{
	/// <summary>
	/// The SafeCorridorSimpleExtrapolation recording.
	/// </summary>
	public partial class SafeCorridorExtrapolation
	{
		public int TCount;	
		public string[] TrackNumber;
		
		static SafeCorridorExtrapolation()
		{
			TrackNumber = new string[9];
		}

		//************************************************************************************//
		//*******************************Clears All Events************************************//
		//************************************************************************************//
		
		public void ClearAllEvents()
		{
			SafeCorridorDrag.ClearAllEventsInEventHistory();
		}	
		
		//************************************************************************************//
		//*******************************Gets Track Count*************************************//
		//************************************************************************************//	
		
		public void GetTrackCount()
		{			
			TCount = TacViewLib.UISpecific.Configuration.Common.GetTrackCount();
   			Report.Info("Track Count = " + TCount);
		}		
		
		
		public void RandCoord()
		{	
			TacViewLib.UISpecific.Configuration.Common.RandCoord();
		}

		//************************************************************************************//
		//********************************Gets Track Number 1*********************************//
		//************************************************************************************//
		
		public void GetTrackNum1()
		{
			GetTrackNum(0);
		}
		
		//************************************************************************************//
		//********************************Gets Track Number 2*********************************//
		//************************************************************************************//
		
		public void GetTrackNum2()
		{
			GetTrackNum(1);
		}		
		
		//************************************************************************************//
		//********************************Gets Track Number 3*********************************//
		//************************************************************************************//
		
		public void GetTrackNum3()
		{
			GetTrackNum(2);
		}
		
		//************************************************************************************//
		//********************************Gets Track Number 4*********************************//
		//************************************************************************************//
		
		public void GetTrackNum4()
		{
			GetTrackNum(3);
		}
		
		//************************************************************************************//
		//********************************Gets Track Number 5*********************************//
		//************************************************************************************//
		
		public void GetTrackNum5()
		{
			GetTrackNum(4);
		}
		
		//************************************************************************************//
		//********************************Gets Track Number 6*********************************//
		//************************************************************************************//
		
		public void GetTrackNum6()
		{
			GetTrackNum(5);
		}
		
		//************************************************************************************//
		//********************************Gets Track Number 7*********************************//
		//************************************************************************************//
		
		public void GetTrackNum7()
		{
			GetTrackNum(6);
		}
		
		//************************************************************************************//
		//********************************Gets Track Number 8*********************************//
		//************************************************************************************//
		
		public void GetTrackNum8()
		{
			GetTrackNum(7);
		}
		
		//************************************************************************************//
		//********************************Gets Track Number 9*********************************//
		//************************************************************************************//
		
		public void GetTrackNum9()
		{
			GetTrackNum(8);
		}		
		
		//************************************************************************************//
		//********************************Keys Track Number 9*********************************//
		//************************************************************************************//
		
		public void KeyTrack9()
		{
			KeyTrack(8);
		}		
		
		//************************************************************************************//
		//*******************************Drops Track Number 9*********************************//
		//************************************************************************************//
		
		public void DropTrackNum9()
		{
			DropTrack(8);
		}
		
		//************************************************************************************//
		//*****************************Validates Track 1 Alerts*******************************//
		//************************************************************************************//
		
		public void ValidateAlertsForTrack1()
		{
			Report.Info("Validate No alerts on Track #" + TrackNumber[0]);
			int alertCt = SafeCorridorDrag.GetAlertCountFor(TrackNumber[0]);
			Validate.IsTrue( alertCt == 0, "Validate No Unexpected Alerts on TN " + TrackNumber[0] + ". Alert Count = " + alertCt, false );
		}
				
		//************************************************************************************//
		//*****************************Validates Track 2 Alerts*******************************//
		//************************************************************************************//
		
		public void ValidateAlertsForTrack2()
		{
			Report.Info("Validate No alerts on Track #" + TrackNumber[1]);
			int alertCt = SafeCorridorDrag.GetAlertCountFor(TrackNumber[1]);
			Validate.IsTrue( alertCt == 0, "Validate No Unexpected Alerts on TN " + TrackNumber[1] + ". Alert Count = " + alertCt, false );
		}

		//************************************************************************************//
		//*****************************Validates Track 3 Alerts*******************************//
		//************************************************************************************//
		
		public void ValidateAlertsForTrack3()
		{
			Report.Info("Validate Critical Area alerts for Ellipse A and Track #" + TrackNumber[2]);
			int alertCt = SafeCorridorDrag.ValidateAlertFor("Entered Critical Area", TrackNumber[2], "EllipseA", 1);
			alertCt += SafeCorridorDrag.ValidateAlertFor("Exited Critical Area", TrackNumber[2], "EllipseA", 1);
						
			int tnAlertCount = SafeCorridorDrag.GetAlertCountFor(TrackNumber[2]);
			Validate.IsTrue( alertCt == 2, "Validate Critical Area alerts on TN " + TrackNumber[2] + ". Alert Count = " + alertCt, false );
			Validate.IsTrue( tnAlertCount == alertCt, "Validate No Unexpected Alerts on TN " + TrackNumber[2] + ". Total Alert Count = " + tnAlertCount, false );
		}
		
		//************************************************************************************//
		//*****************************Validates Track 4 Alerts*******************************//
		//************************************************************************************//
		
		public void ValidateAlertsForTrack4()
		{
			Report.Info("Validate No alerts on Track #" + TrackNumber[3]);
			int alertCt = SafeCorridorDrag.GetAlertCountFor(TrackNumber[3]);
			Validate.IsTrue( alertCt == 0, "Validate No Unexpected Alerts on TN " + TrackNumber[3] + ". Alert Count = " + alertCt, false );
		}
		
		//************************************************************************************//
		//*****************************Validates Track 5 Alerts*******************************//
		//************************************************************************************//
		
		public void ValidateAlertsForTrack5()
		{
			Report.Info("Validate Critical Area alerts for Ellipse C and Track #" + TrackNumber[4]);
   			int alertCt = SafeCorridorDrag.ValidateAlertFor("Impending Critical Area Entry In 1 Minute", TrackNumber[4], "EllipseC", 1);
			alertCt += SafeCorridorDrag.ValidateAlertFor("Entered Critical Area", TrackNumber[4], "EllipseC", 1);
			alertCt += SafeCorridorDrag.ValidateAlertFor("Impending Critical Area Exit In 1 Minute", TrackNumber[4], "EllipseC", 1);
			alertCt += SafeCorridorDrag.ValidateAlertFor("Exited Critical Area", TrackNumber[4], "EllipseC", 1);
			
			int tnAlertCount = SafeCorridorDrag.GetAlertCountFor(TrackNumber[4]);
			Validate.IsTrue( alertCt == 4, "Validate Critical Area alerts on TN " + TrackNumber[4] + ". Alert Count = " + alertCt, false );
			Validate.IsTrue( tnAlertCount == alertCt, "Validate No Unexpected Alerts on TN " + TrackNumber[4] + ". Total Alert Count = " + tnAlertCount, false );
		}
		
		//************************************************************************************//
		//*****************************Validates Track 6 Alerts*******************************//
		//************************************************************************************//
		
		public void ValidateAlertsForTrack6()
		{
   			Report.Info("Validate Critical Area alerts for Ellipse D and Track #" + TrackNumber[5]);
   			int alertCt = SafeCorridorDrag.ValidateAlertFor("Impending Critical Area Entry In 1 Minute", TrackNumber[5], "EllipseD", 1);
			alertCt += SafeCorridorDrag.ValidateAlertFor("Entered Critical Area", TrackNumber[5], "EllipseD", 1);
			alertCt += SafeCorridorDrag.ValidateAlertFor("Impending Critical Area Exit In 1 Minute", TrackNumber[5], "EllipseD", 1);
			alertCt += SafeCorridorDrag.ValidateAlertFor("Exited Critical Area", TrackNumber[5], "EllipseD", 1);
						
			int tnAlertCount = SafeCorridorDrag.GetAlertCountFor(TrackNumber[5]);
			Validate.IsTrue( alertCt == 4, "Validate Critical Area alerts on TN " + TrackNumber[5] + ". Alert Count = " + alertCt, false );
			Validate.IsTrue( tnAlertCount == alertCt, "Validate No Unexpected Alerts on TN " + TrackNumber[5] + ". Total Alert Count = " + tnAlertCount, false );
		}
			
		//************************************************************************************//
		//*****************************Validates Track 7 Alerts*******************************//
		//************************************************************************************//
		
		public void ValidateAlertsForTrack7()
		{
   			Report.Info("Validate Critical Area alerts for Ellipse E, Corridor E1, and Track #" + TrackNumber[6]);
   			int alertCt = SafeCorridorDrag.ValidateAlertFor("Impending Critical Area Entry In 1 Minute", TrackNumber[6], "EllipseE", 2); //2x
   			alertCt += SafeCorridorDrag.ValidateAlertFor("Entered Critical Area", TrackNumber[6], "EllipseE", 2); //2x
			alertCt += SafeCorridorDrag.ValidateAlertFor("Impending Critical Area Exit In 1 Minute", TrackNumber[6], "EllipseE", 2); //2x
			alertCt += SafeCorridorDrag.ValidateAlertFor("Exited Critical Area", TrackNumber[6], "EllipseE", 2); //2x
			
   			alertCt += SafeCorridorDrag.ValidateAlertFor("Impending Critical Area Entry In 1 Minute", TrackNumber[6], "CorridorE1", 1); 
   			alertCt += SafeCorridorDrag.ValidateAlertFor("Entered Critical Area", TrackNumber[6], "CorridorE1", 1);
			alertCt += SafeCorridorDrag.ValidateAlertFor("Impending Critical Area Exit In 1 Minute", TrackNumber[6], "CorridorE1", 1);
			alertCt += SafeCorridorDrag.ValidateAlertFor("Exited Critical Area", TrackNumber[6], "CorridorE1", 1); 
						
			int tnAlertCount = SafeCorridorDrag.GetAlertCountFor(TrackNumber[6]);
			Validate.IsTrue( alertCt == 12, "Validate Critical Area alerts on TN " + TrackNumber[6] + ". Alert Count = " + alertCt, false );
			Validate.IsTrue( tnAlertCount == alertCt, "Validate No Unexpected Alerts on TN " + TrackNumber[6] + ". Total Alert Count = " + tnAlertCount, false );
		}
		
		//************************************************************************************//
		//*****************************Validates Track 8 Alerts*******************************//
		//************************************************************************************//
		
		public void ValidateAlertsForTrack8()
		{
   			Report.Info("Validate Critical Area alerts for Corridor E1 and Track #" + TrackNumber[7]);		
   			int alertCt = SafeCorridorDrag.ValidateAlertFor("Impending Critical Area Entry In 1 Minute", TrackNumber[7], "CorridorE1", 1); 
   			alertCt += SafeCorridorDrag.ValidateAlertFor("Entered Critical Area", TrackNumber[7], "CorridorE1", 1);
			alertCt += SafeCorridorDrag.ValidateAlertFor("Impending Critical Area Exit In 1 Minute", TrackNumber[7], "CorridorE1", 1);
			alertCt += SafeCorridorDrag.ValidateAlertFor("Exited Critical Area", TrackNumber[7], "CorridorE1", 1); 
						
			int tnAlertCount = SafeCorridorDrag.GetAlertCountFor(TrackNumber[7]);
			Validate.IsTrue( alertCt == 4, "Validate Critical Area alerts on TN " + TrackNumber[7] + ". Alert Count = " + alertCt, false );
			Validate.IsTrue( tnAlertCount == alertCt, "Validate No Unexpected Alerts on TN " + TrackNumber[7] + ". Total Alert Count = " + tnAlertCount, false ); 
		}
		
		//************************************************************************************//
		//*****************************Validates Track 9 Alerts*******************************//
		//************************************************************************************//
		
		public void ValidateAlertsForTrack9()
		{
   			Report.Info("Validate Critical Area alerts for Ellipse F, Corridor F1, and Track #" + TrackNumber[8]);
   			int alertCt = SafeCorridorDrag.ValidateAlertFor("Impending Critical Area Entry In 1 Minute", TrackNumber[8], "EllipseF", 2); //2x
   			alertCt += SafeCorridorDrag.ValidateAlertFor("Entered Critical Area", TrackNumber[8], "CorridorF1", 1); //Create Inside
			alertCt += SafeCorridorDrag.ValidateAlertFor("Impending Critical Area Exit In 1 Minute", TrackNumber[8], "CorridorF1", 2); //2x
			alertCt += SafeCorridorDrag.ValidateAlertFor("Exited Critical Area", TrackNumber[8], "CorridorF1", 1); //Drop Inside
						
			int tnAlertCount = SafeCorridorDrag.GetAlertCountFor(TrackNumber[8]);
			Validate.IsTrue( alertCt == 6, "Validate Critical Area alerts for Track Number = " + TrackNumber[8] + ". Alert Count = " + alertCt, false );
			Validate.IsTrue( tnAlertCount == alertCt, "Validate No Unexpected Alerts on TN " + TrackNumber[8] + ". Total Alert Count = " + tnAlertCount, false ); 
		}
		
		//************************************************************************************//
		//**********************************Drops Track 1*************************************//
		//************************************************************************************//		
		
		public void DropTrackNum1()
		{
			DropTrack(0);
		}
		
		//************************************************************************************//
		//**********************************Drops Track 2*************************************//
		//************************************************************************************//	
		
		public void DropTrackNum2()
		{
			DropTrack(1);
		}
		
		//************************************************************************************//
		//**********************************Drops Track 3*************************************//
		//************************************************************************************//	
		
		public void DropTrackNum3()
		{
			DropTrack(2);
		}	
		
		//************************************************************************************//
		//**********************************Drops Track 4*************************************//
		//************************************************************************************//	
		
		public void DropTrackNum4()
		{
			DropTrack(3);
		}
		
		//************************************************************************************//
		//**********************************Drops Track 5*************************************//
		//************************************************************************************//	
		
		public void DropTrackNum5()
		{
			DropTrack(4);
		}
		
		//************************************************************************************//
		//**********************************Drops Track 6*************************************//
		//************************************************************************************//	
		
		public void DropTrackNum6()
		{
			DropTrack(5);
		}	
		
		//************************************************************************************//
		//**********************************Drops Track 7*************************************//
		//************************************************************************************//	
		
		public void DropTrackNum7()
		{
			DropTrack(6);
		}	
		
		//************************************************************************************//
		//**********************************Drops Track 8*************************************//
		//************************************************************************************//	
		
		public void DropTrackNum8()
		{
			DropTrack(7);
		}			
		
		//************************************************************************************//
		//*******************************Deletes All Overlays*********************************//
		//************************************************************************************//	
		
		public void DeleteAllOverlays()
		{
			repo.FormTacViewC2.MenuItemView.Click();
			repo.FormView.MenuItemOverlay_Watch_List_Templ.Click();
			repo.FormOverlay_Watch_List_Templ.MenuItemAll_Overlays.Click();
			
			if(repo.FormAll_Overlays.CellStart_TimeInfo.Exists())
			{
				Report.Info("Mouse Right Click item 'FormAll_Overlays.CellStart_Time' at Center.");
				repo.FormAll_Overlays.CellStart_Time.Click(MouseButtons.Right);			
				Report.Info("Mouse Left Click item 'FormRealView.MenuItemDelete_All_Overlays' at Center.");
				repo.FormRealView.MenuItemDelete_All_Overlays.Click();
				Report.Info("Mouse Left Click item 'RealViewDialog.ButtonYes' at Center.");
				repo.RealViewDialog.ButtonYes.Click();
			}
			
			repo.FormAll_Overlays.ButtonCLOSE.Click();
		}	
		
		//************************************************************************************//
		//******************************Turns Off Interface 2*********************************//
		//************************************************************************************//	
		
		public void TurnOnInterfaceTwo()
		{
			if(repo.FormTacViewC2____map__Defaul.STATUS_TWO.Text.Equals("OFF") )
			{
				Report.Info("Mouse Left Click item 'FormTacViewC2____map__Defaul.CellStatus'.");
				repo.FormTacViewC2____map__Defaul.STATUS_TWO.Click(Location.CenterLeft);
			}
		}				
		
		//************************************************************************************//
		//**********************************Sub-Routines**************************************//
		//************************************************************************************//			
		
		//***************************Gets Track Num Sub-Routine*******************************//
		
		public void GetTrackNum(int tn)
		{
			TCount++;
		    //Accessible pic1 = @"/form[@title~'^TacViewC2\ \ \ \(map:\ .*']/element/container/picture" + "[" + TrackCount + "]";
		    Accessible pic1 = @"/form[@title~'^TacViewC2\ \ \ \(map:\ .*']/element/container/picture[@accessiblevalue='Track']" + "[" + TCount + "]";
   			Accessible accElement = new Accessible(pic1);  
   			string track1 = accElement.Name;
   			TrackNumber[tn] = track1;
   			Report.Info("GetTrackNum TrackNumber[" + tn + "] = " + TrackNumber[tn]);
		}

		//******************************Key Track Sub-Routine********************************//
		
		public void KeyTrack(int tn)
		{
			Report.Info("Keyboard Press {Numpad" + TrackNumber[tn][0] + "}{Numpad" + TrackNumber[tn][1] + "}{Numpad"
			           + TrackNumber[tn][2] + "}{Numpad"+ TrackNumber[tn][3] + "}");
			Keyboard.Press("{NumPad" + TrackNumber[tn][0] + "}{NumPad" + TrackNumber[tn][1] + "}{NumPad" + TrackNumber[tn][2] + "}{NumPad" + TrackNumber[tn][3] + "}");
		}
		
		//******************************Drops Track Sub-Routine*******************************//

		public void DropTrack(int num)
		{
			Report.Info("Mouse Left Click item 'FormTacViewC2____map__Defaul.TextRealView' at Center.");
			repo.FormTacViewC2____map__Defaul.TextRealView.Click();
			Report.Info("Key track #" + TrackNumber[num]);
			KeyTrack(num);
			Keyboard.Press(Keys.Return, 28, Keyboard.DefaultKeyPressTime, 1, false);
			Report.Info("Mouse Left Click item 'FormRealView1.MenuItemDrop_Track' at Center.");
			repo.FormRealView.MenuItemDrop_Track.Click();
			Report.Info("Mouse Left Click item 'RealViewDialog.ButtonYes' at Center.");
			repo.RealViewDialog.ButtonYes.Click();
		}

		private void Init()
		{
			// Your recording specific initialization code goes here.
		}
	}
}
