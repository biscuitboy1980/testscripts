///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using System.Windows.Forms;
using System.IO;

using Ranorex;
using Ranorex.Core;

namespace TacViewLib.UISpecific.CriticalAreas
{
	/// <summary>
	/// The SafeCorridor recording.
	/// </summary>
	public partial class SafeCorridorDrag
	{
		public int TCount;	
		public string TrackNum;
		
		static SafeCorridorDrag()
		{
			TCount = 0;
		}
		//*****************************Get Track Count********************************************//
		public void GetTrackCount()
		{			
			TCount = TacViewLib.UISpecific.Configuration.Common.GetTrackCount();
   			Report.Info("Track Count = " + TCount);
		}		
		//*****************************Get Create Track at Random Coordinate**********************//
		public void RandCoord()
		{	
			TacViewLib.UISpecific.Configuration.Common.RandCoord();
		}
		//*****************************Get Track Number******************************************//
		public void GetTrackNum()			
		{			
		    TCount++;
		    TrackNum = TacViewLib.UISpecific.Configuration.Common.GetTrackNum(TCount);
		}	
		
		//************************************************************************************//
		//******************************Displays Event History********************************//
		//************************************************************************************//	
		
		public void TurnOnEventHistory()
		{
			repo.FormTacViewC2.MenuItemView.Click();
			
			if( repo.FormView.MenuItemEvent_History_CtrlPlusF1.Checked != true)
			{
				Report.Info("Mouse Left Click item 'View_Menu.MenuItemEvent_History_CtrlPlusF1'");
				repo.FormView.MenuItemEvent_History_CtrlPlusF1.Click();
			}
			else
			{
				Keyboard.Press(Keys.Escape);
			}
		}
		
		//************************************************************************************//
		//*******************************Clears Event History*********************************//
		//************************************************************************************//		

		public void ClearAllEventsInEventHistory()
		{
			Duration OrigDur = repo.FormTacViewC2____map__Defaul.CellAlert_TextInfo.SearchTimeout;
			repo.FormTacViewC2____map__Defaul.CellAlert_TextInfo.SearchTimeout = 3000;
			
			if(repo.FormTacViewC2____map__Defaul.CellAlert_TextInfo.Exists())
			{
				repo.FormTacViewC2____map__Defaul.EventHistoryTable.Click();
				Keyboard.Press("{PageUp}{PageUp}{PageUp}{PageUp}");
				
				Report.Info("Mouse Right Click item 'FormTacViewC2____map__Defaul.CellAlert_Text' at Center.");
				repo.FormTacViewC2____map__Defaul.CellAlert_Text.Click(MouseButtons.Right);
				repo.FormRealView.MenuItemClear_All_Events.Click();
			}
			
			repo.FormTacViewC2____map__Defaul.CellAlert_TextInfo.SearchTimeout = OrigDur;
		}
		
		//************************************************************************************//
		//******************************Turns Off Interface 2*********************************//
		//************************************************************************************//	
		
		public void TurnOffInterfaceTwo()
		{
			if(repo.FormTacViewC2____map__Defaul.STATUS_TWO.Text.Equals("OPER") )
			{
				Report.Info("Mouse Left Click item 'FormTacViewC2____map__Defaul.CellStatus'.");
				repo.FormTacViewC2____map__Defaul.STATUS_TWO.Click(Location.CenterLeft);
			}
		}			

		//************************************************************************************//
		//*******************************Enable Overlay Name**********************************//
		//************************************************************************************//	
		
		public void EnableOverlayName()
		{
			Duration OrigDur = repo.FormTacViewC2____map__Defaul.CellOverlay_NameInfo.SearchTimeout;
			repo.FormTacViewC2____map__Defaul.CellOverlay_NameInfo.SearchTimeout = 1500;
			
			if(repo.FormTacViewC2____map__Defaul.CellOverlay_NameInfo.Exists() == false)
			{
				repo.FormTacViewC2____map__Defaul.CellDate_Time.Click(MouseButtons.Right);
				repo.FormRealView.MenuItemColumns.Click();
				repo.FormColumn_Selections.ListItemOverlay_Name.Click("9,7"); //Center Left is not far enough left
				repo.FormColumn_Selections.ButtonOK.Click();
			}
			
			repo.FormTacViewC2____map__Defaul.CellOverlay_NameInfo.SearchTimeout = OrigDur;
		}		
		
		//************************************************************************************//
		//*****************************Loads Safe Corridor File*******************************//
		//************************************************************************************//	
		
		public void KeySafeCorridorFile()
		{
			string myPath = Directory.GetCurrentDirectory();
			myPath = myPath + @"\DataFiles";
			
			Report.Info(myPath + @"\SafeCorridorTests.xml");
			Keyboard.Press(myPath + @"\SafeCorridorTests.xml");
			Keyboard.Press("{Return}");
		}	
		
		//************************************************************************************//
		//***************************Enters Current Track Number******************************//
		//************************************************************************************//	
		
		public void KeyCurrentTrack()
		{
			Keyboard.Press("{NumPad" + TrackNum[0] + "}{NumPad" + TrackNum[1] + "}{NumPad" + TrackNum[2] + "}{NumPad" + TrackNum[3] + "}");
		}	
		
		//************************************************************************************//
		//***************************Creates Run-Time Repo Items******************************//
		//************************************************************************************//		

		public void CreateTrackRepoItems()
		{			
			string currentPath = repo.FormTacViewC2.PictureTrackInfo.Path.ToString();
			repo.FormTacViewC2.PictureTrackInfo.Path = currentPath.Replace("%track%", TrackNum);
			Report.Info("Setting repo item FormTacViewC2.PictureTrack to " + repo.FormTacViewC2.PictureTrackInfo.Path.ToString());			
			
			string currentPath2 = repo.FormRealView.MenuItemTrackNumberInfo.Path.ToString();
			repo.FormRealView.MenuItemTrackNumberInfo.Path = currentPath2.Replace("%track%", TrackNum);
			Report.Info("Setting repo item FormRealView.MenuItemTrackNumber to " + repo.FormRealView.MenuItemTrackNumberInfo.Path.ToString());
		}
		
		//************************************************************************************//
		//*********************************Right Clicks Track*********************************//
		//************************************************************************************//
		
		public void RightClickTrack()
		{			
			Report.Info("Mouse Right Click item 'FormTacViewC2.PictureTrack' at Center.");
			repo.FormTacViewC2.PictureTrack.Click(MouseButtons.Right);
		}		
		
		//************************************************************************************//
		//******************************Validates Enter Alert*********************************//
		//************************************************************************************//
		
		public void ValidateEnterAlert()
		{
			Report.Info("Validate Entered Critical Area alert for " + TrackNum);
			int test = ValidateAlertFor("Entered Critical Area", TrackNum, "EllipseA", 1);
			
			if(test > 0)
			{
				Report.Info("Track had a critical area entrance alert.", TrackNum);
				Validate.IsTrue( test > 0 );
			}
		}
		
		//************************************************************************************//
		//*******************************Validates Exit Alert*********************************//
		//************************************************************************************//	
		
		public void ValidateExitAlert()
		{
			Report.Info("Validate Exited Critical Area alert for " + TrackNum);
			int test = ValidateAlertFor("Exited Critical Area", TrackNum, "EllipseA", 1);
			
			if(test > 0)
			{
				Report.Info("Track had a critical area exit alert.", TrackNum);
				Validate.IsTrue( test > 0 );
			}
		}		
		
		//************************************************************************************//
		//***************************Validates No Alerts Exist********************************//
		//************************************************************************************//	
		
		public void ValidateNoAlerts()
		{
			int test = GetAlertCountFor(TrackNum);
			
			Validate.IsTrue(test == 0, "No Alerts Displayed", false);
		}		

		//************************************************************************************//
		//**********************************Sub-Routines**************************************//
		//************************************************************************************//		

		//****************************Validate Alert Sub-Routine******************************//
		
		public int ValidateAlertFor(string Alert, string TNum, string OverlayName, int expectedAlertCount)
		{
			bool alertFound = false;
			bool trackFound = false;
			bool overlayFound = false;
			int alertCount = 0;
			
			foreach( Ranorex.Row row in repo.FormTacViewC2____map__Defaul.TableEventHistory.Rows)
			{
				trackFound = false;
				alertFound = false;
				overlayFound = false;
				
				foreach( Cell cell in row.Cells )
				{
					if( cell.Text.Contains(Alert) )
					{
						alertFound = true;
					}
					    
					if( cell.Text.Contains( TNum ) )
					{
						trackFound = true;
					}
					
					if(cell.Text.Contains(OverlayName) )
					{
						overlayFound = true;
					}
				}
				
				if( trackFound && alertFound && overlayFound )
				{
				   	alertCount++;
				}
			}
			
			Validate.IsTrue( alertCount == expectedAlertCount, ("Track " + TNum + " triggered " + alertCount + " out of " + expectedAlertCount + " expected " + Alert + " Alerts on " + OverlayName), false );
			return alertCount;
		}

		//***************************Get Alert Count Sub-Routine******************************//
		
		public int GetAlertCountFor(string TNum)
		{
			bool trackFound = false;
			int alertCount = 0;
			
			foreach( Ranorex.Row row in repo.FormTacViewC2____map__Defaul.TableEventHistory.Rows)
			{
				trackFound = false;				
				foreach( Cell cell in row.Cells )
				{
					if( cell.Text.Contains( TNum ) )
					{
						trackFound = true;
					}					
				}
				
				if( trackFound )
				{
				   	alertCount++;
				}
			}
			
			return alertCount;
		}

		private void Init()
		{
			// Your recording specific initialization code goes here.
		}
	}
}
