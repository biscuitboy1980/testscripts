///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using System.Windows.Forms;

using CommonUtilLib;
using Ranorex;
using Ranorex.Core;

namespace TacViewLib.UISpecific.ModeCodes.Air
{
	/// <summary>
	/// The CreateTrack recording.
	/// </summary>
	

	public partial class CreateAirModeCodes
	{
		
		public int TCount;
		public string trknum;
		
		//************************************************************************************//
		//*********************************Gets Track Number**********************************//
		//************************************************************************************//
		
		public void GetTrackNum()			
		{			
		    TCount++;
		    Accessible pic1 = @"/form[@title~'^TacViewC2\ \ \ \(map:\ .*']/element/container/picture[@accessiblevalue='Track']" + "[" + TCount + "]";
   			Accessible accElement = new Accessible(pic1);  
   			trknum = accElement.Name;
   			Report.Info("Track Number = " + trknum);
   			ValidateAirModeCodes.TrackNum = trknum; 	   			
		}	
		
		//************************************************************************************//
		//**********************Enters Random Mode 1 Value************************************//
		//************************************************************************************//
		
		public void Mode1val()
		{
			int x = 0;
			
			while (x < 2)
			{
				try
				{
					repo.FormMainCreate.ListItemMode_1_Code.Click("CenterLeft");
				    Keyboard.Press(Keys.Tab);
				    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List list2 = "//list[@processname='RealView']";
		            int AScount = list2.Items.Count;
		            Random ASvalue = new Random();
		            AScount = AScount - 1;
					int ASnum = ASvalue.Next(1, AScount);
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click();
					Accessible accElement = new Accessible(repo.FormMainCreate.ListItemMode_1_Code);  
		   			string M1Value = accElement.Value;
		   			ValidateAirModeCodes.M1 = M1Value;
		   			Report.Info("Mode 1 Value Entered = " + M1Value);
		   			x=2;
		   			ValidateAirModeCodes.Mode1_OOR = false;
				}
				catch (ArgumentOutOfRangeException e)
				{								   			
				   	x++;
				   	if (x == 1)
				   	{
				   		Report.Debug("List Count Out of Range for Mode 1, Re-Executing Function");
				   		Report.Debug(e.ToString());	
				   	}
				   	else if (x == 2)
				   	{
				   		Report.Debug("List Count Out of Range forMode 1, List Item Will Not be Validated");
				   		Report.Debug(e.ToString());	
				   		ValidateAirModeCodes.Mode1_OOR = true;
				   	}
				}	
			}
		}
		
		//************************************************************************************//
		//**********************Enters Random Invalid Mode 2 Value****************************//
		//************************************************************************************//
		
		public void InvalidMode2val()
		{
			repo.FormMainCreate.ListItemMode_2_Code.Click("CenterLeft");
		    Keyboard.Press(Keys.Tab);			
			string a = CommonUtilLib.Util.Random(8, 10);
			string b = CommonUtilLib.Util.Random(1, 4095);
			string c = CommonUtilLib.Util.DecimalToBase(Convert.ToInt32(b), 8);
			c = c.Substring(0, c.Length-1) + a; 
			Keyboard.Press(c);
			Accessible accElement = new Accessible(repo.FormMainCreate.ListItemMode_2_Code);  
   			string M2Value = a;
   			ValidateAirModeCodes.M2 = M2Value;
   			Report.Info("Mode 2 Entered = " + M2Value);
   			Keyboard.Press(Keys.Tab);	
		}			
		
		public void Validate_InvalidMode2val()
		{
			Report.Info("Validating AttributeEqual (Enabled='False') on item 'FormMainCreate.ButtonSave'.");
			Validate.Attribute(repo.FormMainCreate.ButtonSaveInfo, "Enabled", "False", Validate.DefaultMessage, false);
		}		

		//************************************************************************************//
		//**********************Enters Random Mode 2 Value************************************//
		//************************************************************************************//
		
		public void Mode2val()
		{
			repo.FormMainCreate.ListItemMode_2_Code.Click("CenterLeft");
		    Keyboard.Press(Keys.Tab);			
			string a = CommonUtilLib.Util.Random(1, 4095);
			string b = CommonUtilLib.Util.DecimalToBase(Convert.ToInt32(a), 8);
			Keyboard.Press(b);
			Accessible accElement = new Accessible(repo.FormMainCreate.ListItemMode_2_Code);  
   			string M2Value = b;
   			ValidateAirModeCodes.M2 = M2Value;
   			Report.Info("Mode 2 Entered = " + M2Value);
   			Keyboard.Press(Keys.Tab);	   			
		}		
		
		public void Validate_Mode2val()
		{
			Report.Info("Validating AttributeEqual (Enabled='True') on item 'FormMainCreate.ButtonSave'.");
			Validate.Attribute(repo.FormMainCreate.ButtonSaveInfo, "Enabled", "True", Validate.DefaultMessage, false);
		}		
		
		//************************************************************************************//
		//**********************Enters Random Invalid Mode 3 Value****************************//
		//************************************************************************************//
		
		public void InvalidMode3val()
		{
			repo.FormMainCreate.ListItemMode_3_Code.Click("CenterLeft");
		    Keyboard.Press(Keys.Tab);			
			string a = CommonUtilLib.Util.Random(8, 10);
			string b = CommonUtilLib.Util.Random(1, 4095);
			string c = CommonUtilLib.Util.DecimalToBase(Convert.ToInt32(b), 8);
			c = c.Substring(0, c.Length-1) + a; 
			Keyboard.Press(c);
			Accessible accElement = new Accessible(repo.FormMainCreate.ListItemMode_3_Code);  
   			string M3Value = a;
   			ValidateAirModeCodes.M3 = M3Value;
   			Report.Info("Mode 3 Entered = " + M3Value);
   			Keyboard.Press(Keys.Tab);	
		}			
		
		public void Validate_InvalidMode3val()
		{
			Report.Info("Validating AttributeEqual (Enabled='False') on item 'FormMainCreate.ButtonSave'.");
			Validate.Attribute(repo.FormMainCreate.ButtonSaveInfo, "Enabled", "False", Validate.DefaultMessage, false);
		}				
		
		//************************************************************************************//
		//**********************Enters Random Mode 3 Value************************************//
		//************************************************************************************//
		
		public void Mode3val()
		{
			repo.FormMainCreate.ListItemMode_3_Code.Click("CenterLeft");
		    Keyboard.Press(Keys.Tab);			
			string a = CommonUtilLib.Util.Random(1, 4095);
			string b = CommonUtilLib.Util.DecimalToBase(Convert.ToInt32(a), 8);
			Keyboard.Press(b);
			Accessible accElement = new Accessible(repo.FormMainCreate.ListItemMode_3_Code);  
   			string M3Value = b;
   			ValidateAirModeCodes.M3 = M3Value;
   			Report.Info("Mode 3 Entered = " + M3Value);
   			Keyboard.Press(Keys.Tab);	
		}		
		
		public void Validate_Mode3val()
		{
			Report.Info("Validating AttributeEqual (Enabled='True') on item 'FormMainCreate.ButtonSave'.");
			Validate.Attribute(repo.FormMainCreate.ButtonSaveInfo, "Enabled", "True", Validate.DefaultMessage, false);
		}				

		//************************************************************************************//
		//********************Enters Random Mode 4 Indicator**********************************//
		//************************************************************************************//
		
		public void Mode4val()
		{
			int x = 0;
			
			while (x < 2)
			{
				try
				{
					repo.FormMainCreate.ListItemMode_4_Indicator.Click("CenterLeft");
				    Keyboard.Press(Keys.Tab);
				    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List list2 = "//list[@processname='RealView']";
		            int AScount = list2.Items.Count;
		            Random ASvalue = new Random();
					int ASnum = ASvalue.Next(1, AScount);
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click();
					Accessible accElement = new Accessible(repo.FormMainCreate.ListItemMode_4_Indicator);  
		   			string M4Value = accElement.Value;
		   			ValidateAirModeCodes.M4 = M4Value;
		   			Report.Info("Mode 4 Indicator Entered = " + M4Value);
		   			x=2;
		   			ValidateAirModeCodes.Mode4_OOR = false;
				}
				catch (ArgumentOutOfRangeException e)
				{								   			
				   	x++;
				   	if (x == 1)
				   	{
				   		Report.Debug("List Count Out of Range for Mode 4, Re-Executing Function");
				   		Report.Debug(e.ToString());	
				   	}
				   	else if (x == 2)
				   	{
				   		Report.Debug("List Count Out of Range for Mode 4, List Item Will Not be Validated");
				   		Report.Debug(e.ToString());	
				   		ValidateAirModeCodes.Mode4_OOR = true;
				   	}
				}	
			}
		}
		
		//************************************************************************************//
		//********************Enters Random Mode 5 Indicator**********************************//
		//************************************************************************************//
		
		public void Mode5val()
		{
			int x = 0;
			
			while (x < 2)
			{
				try
				{
					repo.FormMainCreate.ListItemMode_5_Indicator.Click("CenterLeft");
				    Keyboard.Press(Keys.Tab);
				    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List list2 = "//list[@processname='RealView']";
		            int AScount = list2.Items.Count;
		            Random ASvalue = new Random();
					int ASnum = ASvalue.Next(1, AScount);
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click();
					Accessible accElement = new Accessible(repo.FormMainCreate.ListItemMode_5_Indicator);  
		   			string M5Value = accElement.Value;
		   			ValidateAirModeCodes.M5 = M5Value;
		   			Report.Info("Mode 5 Indicator Entered = " + M5Value);
		   			ValidateAirModeCodes.Mode5_OOR = false;
		   			x=2;
				}
				catch (ArgumentOutOfRangeException e)
				{								   			
				   	x++;
				   	if (x == 1)
				   	{
				   		Report.Debug("List Count Out of Range for Mode 5, Re-Executing Function");
				   		Report.Debug(e.ToString());	
				   	}
				   	else if (x == 2)
				   	{
				   		Report.Debug("List Count Out of Range for Mode 5, List Item Will Not be Validated");
				   		Report.Debug(e.ToString());	
				   		ValidateAirModeCodes.Mode5_OOR = true;
				   	}
				}					
			}
		}

		//************************************************************************************//
		//********************Enters Random Mode 5 Nationality********************************//
		//************************************************************************************//
		
		public void Mode5Natval()
		{
			int x = 0;
			
			while (x < 2)
			{
				try
				{					
					repo.FormMainCreate.ListItemMode_5_Nationality.Click("CenterLeft");
				    Keyboard.Press(Keys.Tab);
				    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List list2 = "//list[@processname='RealView']";
		            int AScount = list2.Items.Count;
		            Random ASvalue = new Random();
					int ASnum = ASvalue.Next(1, AScount);
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click();
					Accessible accElement = new Accessible(repo.FormMainCreate.ListItemMode_5_Nationality);  
		   			string M5NatValue = accElement.Value;
		   			ValidateAirModeCodes.M5Nat = M5NatValue;
		   			Report.Info("Mode 5 Nationality Entered = " + M5NatValue);
		   			ValidateAirModeCodes.Mode5Nat_OOR = false;
		   			x=2;
				}
				catch (ArgumentOutOfRangeException e)
				{								   			
				 	x++;
				   	if (x == 1)
				   	{
				   		Report.Debug("List Count Out of Range for Mode 5 Nationality, Re-Executing Function");
				   		Report.Debug(e.ToString());	
				   	}
				   	else if (x == 2)
				   	{
				   		Report.Debug("List Count Out of Range for Mode 5 Nationality, List Item Will Not be Validated");
				   		Report.Debug(e.ToString());	
				   		ValidateAirModeCodes.Mode5Nat_OOR = true;
				   	}
				}				
			}
		}

		//************************************************************************************//
		//***************************Enters Random Mode 5 ID value****************************//
		//************************************************************************************//
		
		public void M5IDval()
		{
			repo.FormMainCreate.ListItemMode_5_Platform_ID.Click("CenterLeft");
		    Keyboard.Press(Keys.Tab);			
			string b = CommonUtilLib.Util.Random(1, 16383);
			Keyboard.Press(b);
			Accessible accElement = new Accessible(repo.FormMainCreate.ListItemMode_5_Platform_ID);  
   			string M5IDValue = b;
   			ValidateAirModeCodes.M5ID = M5IDValue;
   			Report.Info("Mode 5 ID Entered = " + M5IDValue);
		}

		static CreateAirModeCodes()
		{
			//Your recording specific initialization code goes here.
		}
		
		public void GetTrackCount()
		{			
			TCount = TacViewLib.UISpecific.Configuration.Common.GetTrackCount();
		}		
		
		public void RandCoord()
		{	
			TacViewLib.UISpecific.Configuration.Common.RandCoord();
		}

		private void Init()
		{
			// Your recording specific initialization code goes here.
		}
	}
}