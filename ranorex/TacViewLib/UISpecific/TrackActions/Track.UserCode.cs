///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using System.Windows.Forms;

using Ranorex;
using Ranorex.Core;

namespace TacViewLib.UISpecific.TrackActions
{
	/// <summary>
	/// The CreateTrack recording.
	/// </summary>
	public partial class Track
	{
		public int TCount;	
		public string TrackNum;
		public string TrackType;
		
		public Track()
		{
			TCount = 0;
			TrackNum = "";
			TrackType = "";		
		}
		
		public Track(string trackType, bool save)
		{
			TCount = 0;
			TrackNum = "";
			TrackType = "";	
			switch(trackType)
			{
					case "air": 
					case "space": 
					case "surface": 
					case "subsurface": 
					case "land": 
					case "ew": 
					case "referencepoint": 
						CreateNewTrack(trackType, save); 
						break;
					default: 
						Report.Error("Invalid track type: " + trackType); 
						break;
			}	
		}
		
		//*****************************Get Track Count********************************************//
		public void GetTrackCount()
		{			
			TCount = TacViewLib.UISpecific.Configuration.Common.GetTrackCount();
   			Report.Info("Track Count = " + TCount);
		}		
		//*****************************Get Create Track at Random Coordinate**********************//
		public void RandCoord()
		{	
			TacViewLib.UISpecific.Configuration.Common.RandCoord();
		}
		//*****************************Get Track Number******************************************//
		public string GetTrackNum()			
		{			
		    TCount++;
		    return TacViewLib.UISpecific.Configuration.Common.GetTrackNum(TCount);
		}	
				
		/*
		 * Private method because only the constructor should be creating tracks.
		 * trkType: Valid string for a track type
		 * save: Whether you would like to click the save button once the track has been created.
		 * 		save should be false if you plan on editing the track's properties before saving.
		 */
		private void CreateNewTrack(string trkType, bool save)
		{
			GetTrackCount();
			RandCoord();
			if( TacViewLib.UISpecific.Configuration.Common.CreateTrack(trkType, save) )
			{
				TrackNum = GetTrackNum();
				TrackType = trkType;			
			}
		}

		public void RightClickTrack(MouseButtons buttonToClick)
		{
			Report.Info("Right Click on item 'repo.FormTacViewC2.PictureTrack' with track number:" + TrackNum + ".");
			RxPath backupPath = repo.FormTacViewC2.PictureTrack1Info.Path;
			string currentPath = backupPath.ToString();
			repo.FormTacViewC2.PictureTrack1Info.Path = currentPath.Replace("%track%", TrackNum);
			repo.FormTacViewC2.PictureTrack1.Click(buttonToClick);
			Delay.Milliseconds(125);
			repo.FormTacViewC2.PictureTrack1Info.Path = backupPath;
		}
		
		public void ValidateTrackAccessible(bool bIsAccessible)
		{
			RxPath backupPath = repo.FormTacViewC2.PictureTrack1Info.Path;
			string currentPath = backupPath.ToString();
			repo.FormTacViewC2.PictureTrack1Info.Path = currentPath.Replace("%track%", TrackNum);
			if(bIsAccessible)
			{
				Report.Info("Validating AttributeEqual (AccessibleName='" + TrackNum + "') on item 'repo.FormTacViewC2.PictureTrack1'.");
				Validate.Attribute(repo.FormTacViewC2.PictureTrack1, "AccessibleName", TrackNum, "Validating Track Number matches.", false);
			}
			else
			{
				Report.Info("Validating AttributeEqual (AccessibleName='" + TrackNum + "') on item 'repo.FormTacViewC2.PictureTrack1'.");
				Validate.NotExists(repo.FormTacViewC2.PictureTrack1, "Validating track no longer exists.", false);
			}
			Delay.Milliseconds(125);
			repo.FormTacViewC2.PictureTrack1Info.Path = backupPath;
		}
		
		static Track()
		{
			//Your recording specific initialization code goes here.
		}

		private void Init()
		{
			// Your recording specific initialization code goes here.
		}
	}
}
