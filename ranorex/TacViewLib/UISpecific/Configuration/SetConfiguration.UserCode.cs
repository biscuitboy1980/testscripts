///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using System.Windows.Forms;

using Ranorex;
using Ranorex.Core;

namespace TacViewLib.UISpecific.Configuration
{
	/// <summary>
	/// The SetConfiguration recording.
	/// </summary>
	public partial class SetConfiguration
	{
		public string config;
		static SetConfiguration()
		{
			//Your recording specific initialization code goes here.
		}

		public void Mouse_Click_Configuration()
		{
			int configIndex = -1;
			switch(config)
			{
				case "C2": configIndex = 0; break;
				case "ACARS": configIndex = 1; break;
				case "GPS": configIndex = 2; break;
				case "SA Only": configIndex = 3; break;
				case "Spot Beam Demo": configIndex = 4; break;
				default: 
				Report.Error(config + " is not a valid configuration mode for TacView.");
				return;
			}
			Report.Debug("Configuration", "Configuration set to " + config);
			int yVal = 33 + (configIndex * 14); //33 (baseYValue) //14(heightOfCell)
			repo.Preferences_Control.C2.Click("30;" + yVal);
		}

		public void DismissPopUp()
		{
			if(repo.Configuration_Restart_Pop_Up.SelfInfo.Exists())
			{
				Report.Info("Mouse Left Click item 'Configuration_Restart_Pop_Up.OK' at Center.");
				repo.Configuration_Restart_Pop_Up.OK.Click();
			}
		}

		private void Init()
		{
			// Your recording specific initialization code goes here.
		}

	}
}
