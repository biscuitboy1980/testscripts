///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using System.Windows.Forms;
using IWshRuntimeLibrary;
using System.Runtime.InteropServices;

using Ranorex;
using Ranorex.Core;

namespace TacViewLib.UISpecific.Configuration
{
	/// <summary>
	/// The Common recording.
	/// </summary>
	public partial class Common
	{
		static Common()
		{
			//Your recording specific initialization code goes here.
		}
		
		/*
		 * Checks if any error messages are on the screen before proceeding.
		 */
		public bool Validate_TextPlease_tell_Microsoft()
		{
			Delay.Milliseconds(250); 
			bool success = true;
			try
			{
				Duration origdur = repo.FormRealView_Application.TextPlease_tell_MicrosoftInfo.SearchTimeout;
				repo.FormRealView_Application.TextPlease_tell_MicrosoftInfo.SearchTimeout = 10000;
				Report.Info("Validating NotExists on item 'FormRealView_Application.TextPlease_tell_Microsoft'.");
				success = Validate.NotExists(repo.FormRealView_Application.TextPlease_tell_MicrosoftInfo, Validate.DefaultMessage, false);
				if (success == false)
				{
					Report.Error("RealView is either unresponsive or has crashed. Restarting RealView...");
					Report.Screenshot();
					repo.FormRealView_Application.ButtonDont_Send.Click();
				}
				repo.FormRealView_Application.TextPlease_tell_MicrosoftInfo.SearchTimeout = origdur;
				Report.Info("Microsoft error dialog not found.");
				return success;
			}
			catch(Exception)
			{
				Report.Error("RealView was unresponsive when searching for error dialogs. Restarting RealView...");
				Report.Screenshot();	
				return false;
			}
		}		
		
		/* 
		 * Use this method after clicking the Button_Search_For_Track
		 * in order to select the menu item that matches the parameter 'recipient'
		 */
		public bool JUSelect(string recipient)
		{
			bool useTrack = false;
			Duration OrigDur1 = repo.FormRealView.MenuItemTrackNumsInfo.SearchTimeout;
			repo.FormRealView.MenuItemTrackNumsInfo.SearchTimeout = 500;
			
			Duration OrigDur2 = repo.FormRealView.MenuItemTracksInfo.SearchTimeout;
			repo.FormRealView.MenuItemTracksInfo.SearchTimeout = 500;
			
			if (repo.FormRealView.MenuItemTracksInfo.Exists())
			{
				Report.Info("Mouse Left Click item 'FormRealView.MenuItemTracks' at Center.");
				repo.FormRealView.MenuItemTracks.Click("Center");
				Report.Info("Mouse Left Click item 'FormRealView.MenuItemTrackNums' for track#" + recipient + " at Center.");
				Accessible track = @"/form[@title='Tracks']/contextmenu[1]/menuitem[@accessiblename='Track#" + recipient + "']";
   				Accessible accElement = new Accessible(track);  
				track.Click("Center");	
				useTrack = true;
			}			
			else if (repo.FormRealView.MenuItemTrackNumsInfo.Exists())
			{
				Report.Info("Mouse Left Click item 'FormRealView.MenuItemTrackNums' for track#" + recipient + "at Center.");
				Accessible track = @"/form[@title='' and @processname='RealView']/contextmenu[1]/menuitem[@accessiblename='Track#" + recipient + "']";
   				Accessible accElement = new Accessible(track);  
				track.Click("Center");	
				useTrack = true;
			}
			repo.FormRealView.MenuItemTrackNumsInfo.SearchTimeout = OrigDur1;	
			repo.FormRealView.MenuItemTracksInfo.SearchTimeout = OrigDur2;	
			return useTrack;
		}
		
		/*
		 * Enable Event History
		 */
		public void TurnOnEventHistory()
		{
			repo.FormTacViewC2____map__Defaul1.MenuItemView.Click();
			
			if( repo.GeoImage.FormView.MenuItemEvent_History_CtrlPlusF1.Checked != true)
			{
				Report.Info("Mouse Left Click item 'View_Menu.MenuItemEvent_History_CtrlPlusF1'");
				repo.GeoImage.FormView.MenuItemEvent_History_CtrlPlusF1.Click();
			}
			else
			{
				Keyboard.Press(Keys.Escape);
			}
		}
		
		public bool ValidateNoUnexpectedDialogs()
		{
			Duration OrigDur = repo.RealViewDialog.SearchTimeout;
			repo.RealViewDialog.SearchTimeout = 3000;
			
			Report.Info("Validate 'RealViewDialog' does not exist.");
			if(repo.RealViewDialog.SelfInfo.Exists() )
			{
				Report.Error("Unexpected Error Dialog.");
				Report.Screenshot();
				return false;
			}
			repo.RealViewDialog.SearchTimeout = OrigDur;
			return true;
		}
		
		
		/*
		 * Select the second interface's Track menu 
		 * for a track transmitting on multiple interfaces
		 */
		public bool Interface2TrackMenu(string trackNum)
		{
			Duration OrigDur = repo.FormRealView.MenuItemTracksInfo.SearchTimeout;
			repo.FormRealView.MenuItemTracksInfo.SearchTimeout = 1000;	
			if (repo.FormRealView.MenuItemTracksInfo.Exists())
			{
				Report.Info("Mouse Left Click item 'FormRealView.MenuItemTracks'");
			    repo.FormRealView.MenuItemTracks.Click();
			}
			repo.FormRealView.MenuItemTracksInfo.SearchTimeout = OrigDur;
			
			if ( TacViewLib.UISpecific.Configuration.EnterInterface2IP.SelectTrackInterface(trackNum) )
			{
			   	return true;
			}
			else
			{
				Report.Error("Unable to find 'MenuItemTracks' or the Interface Track.  Links may not be transmitting.");
				return false;
			}
		}

		/*
		 * Launch Desktop shortcuts by name 'appName'
		 */
		[DllImport("shfolder.dll", CharSet = CharSet.Auto)]
        private static extern int SHGetFolderPath(IntPtr hwndOwner, int nFolder, IntPtr hToken, int dwFlags, StringBuilder lpszPath);
		
		public void LaunchShortcut(string appName)
		{
        	//Get the public desktop
        	const int MAX_PATH = 260;
        	const int CSIDL_COMMON_DESKTOPDIRECTORY = 0x0019;
            StringBuilder sbPath = new StringBuilder(MAX_PATH);
            SHGetFolderPath(IntPtr.Zero, CSIDL_COMMON_DESKTOPDIRECTORY, IntPtr.Zero, 0, sbPath);
            string strDesktop = sbPath.ToString() + "\\" + appName + ".lnk";
	        			
	        //Start a process that will launch the shortcut
	        //This is not creating a short cut, its actually, opening the shortcut
			WshShell Wshell = new WshShell();
            IWshRuntimeLibrary.IWshShortcut shortc = (IWshRuntimeLibrary.IWshShortcut)Wshell.CreateShortcut(strDesktop);
            if(shortc!=null)
            {
                System.Diagnostics.Process proc = new System.Diagnostics.Process();
                proc.EnableRaisingEvents=false;
                proc.StartInfo.FileName=(string)shortc.TargetPath;
                proc.StartInfo.Arguments = (string)shortc.Arguments;
                proc.StartInfo.WorkingDirectory = (string)shortc.WorkingDirectory;
                proc.Start();
            }
		}
		
		//************************************************************************************//
		//******************Validate the current configuration against the list item**********//
		//************************************************************************************//		
		public void Validate_ListItemConfiguration()
		{
			Duration origDur = repo.FormTacViewC2____map__Defaul.ListItemConfigurationInfo.SearchTimeout;
			repo.FormTacViewC2____map__Defaul.ListItemConfigurationInfo.SearchTimeout = 5000;
			string configText = "Configuration: " + TacViewLib.UISpecific.Configuration.SetConfiguration.config;
			Validate.Attribute(repo.FormTacViewC2____map__Defaul.ListItemConfigurationInfo, "Text", configText, "Validating TacView started in " + configText, true);
			repo.FormTacViewC2____map__Defaul.ListItemConfigurationInfo.SearchTimeout = origDur;
		}
		
		//************************************************************************************//
		//******************************Return Track Count********************************//
		//************************************************************************************//
		
		public int GetTrackCount()
		{			
			Ranorex.Container cont1 = repo.FormTacViewC2.ContainerRvView;
			//IList<Picture> list1 = cont1.FindDescendants<Picture>();
			IList<Picture> list1 = cont1.Find<Picture>(@"/form[@title~'^TacViewC2|TacViewAll\ \ \ \(map:\ .*']/element/container/picture[@accessiblevalue='Track']");
			return list1.Count;	
		}		
		
		//************************************************************************************//
		//***Finds a random spot on the screen that is available to create a track at*********//
		//************************************************************************************//		
		
		public void RandCoord()
		{	
	       	var a = repo.FormTacViewC2.ContainerRvView.ScreenRectangle.Width;
	       	var b = repo.FormTacViewC2.ContainerRvView.ScreenRectangle.Height;
	       	int c = Convert.ToInt32(a) - 1;
	       	int d = Convert.ToInt32(b) - 1;
	       	string w = CommonUtilLib.Util.Random(1, c);
	       	string h = CommonUtilLib.Util.Random(1, d);
	    	repo.FormTacViewC2.ContainerRvView.Click(MouseButtons.Right, "" + w + ";" + h + "");  
	    	 
	    	Duration OrigDur = repo.FormRealView.MenuItemCreate_TrackInfo.SearchTimeout;
			repo.FormRealView.MenuItemCreate_TrackInfo.SearchTimeout = 1000;			
			
			Duration OrigDur2 = repo.FormRealView.MenuItemMap_OptionsInfo.SearchTimeout;
			repo.FormRealView.MenuItemMap_OptionsInfo.SearchTimeout = 2000;
			
			if(repo.FormRealView.MenuItemMap_OptionsInfo.Exists())
			{
				repo.FormRealView.MenuItemMap_Options.Click();
				Delay.Milliseconds(250);
			}
			
			if (!repo.FormRealView.MenuItemCreate_TrackInfo.Exists())
			{
				Report.Screenshot();
				Report.Error("Cannot find the Create Track option.");
			}	
			
			repo.FormRealView.MenuItemCreate_TrackInfo.SearchTimeout = OrigDur;
			repo.FormRealView.MenuItemMap_OptionsInfo.SearchTimeout = OrigDur2;
		}
		
		//************************************************************************************//
		//*Steps to get track number:
		//*1 - Call GetTrackCount() immediately before creating a track, store this number
		//*2 - Create Track
		//*3 - Call GetTrackNum() using the value from step 1 plus 1.
		//************************************************************************************//
		public string GetTrackNum(int trackCount)
		{
			try
			{
			    Accessible pic1 = @"/form[@title~'^TacViewC2|TacViewAll\ \ \ \(map:\ .*']/element/container/picture[@accessiblevalue='Track']" + "[" + trackCount + "]";
			    Accessible accElement = new Accessible(pic1);
	   			string track1 = accElement.Name;
	   			Report.Info("New Track Number = " + track1);
	   			return track1;
			}
			catch(Exception)
			{
				Report.Error("Problem getting track " + trackCount);
				return "";
			}
		}

		//************************************************************************************//
		//** Right click create track must be accessible *************************************//
		//************************************************************************************//
		public bool CreateTrack(string trackType, bool save)
		{
			if (!repo.FormRealView.MenuItemCreate_TrackInfo.Exists())
			{
				Report.Error("Create track submenu not found.");
				return false;
			}	
			repo.FormRealView.MenuItemCreate_Track.Click();
			switch(trackType)
			{
				case "air": repo.FormCreate_Track.MenuItemAir.Click(); break;
				case "space": repo.FormCreate_Track.MenuItemSpace.Click(); break;
				case "surface": repo.FormCreate_Track.MenuItemSurface.Click(); break;
				case "subsurface": repo.FormCreate_Track.MenuItemSubSurface.Click(); break;
				case "land": repo.FormCreate_Track.MenuItemLand.Click(); break;
				case "ew": repo.FormCreate_Track.MenuItemEW.Click(); break;
				case "referencepoint": repo.FormCreate_Track.MenuItemReference_Point.Click(); break;
				default: Report.Error("Invalid track type: " + trackType); break;
			}			
			if(save)
				repo.FormMainCreate.ButtonSave.Click();
			
			Delay.Milliseconds(1000);
			return true;
		}
		
		
		public void DropTrackSequence(string dropTrackNum)
		{
			
			Mouse.DefaultMoveTime = 0;
			Keyboard.DefaultKeyPressTime = 0;
			Mouse.DefaultClickTime = 0;	
			Delay.SpeedFactor = 0;	
			
			Duration OrigDur = repo.FormRealView.MenuItemTracksInfo.SearchTimeout;
			repo.FormRealView.MenuItemTracksInfo.SearchTimeout = 1000;
			Duration OrigDur1 = repo.FormRealView.MenuItemTrackNumberInfo.SearchTimeout;
			repo.FormRealView.MenuItemTrackNumberInfo.SearchTimeout = 1000;
			
			
			if (repo.FormRealView.MenuItemTracksInfo.Exists())
			{
				Report.Info("Dropping Track # " + dropTrackNum);
				Report.Info("Mouse Left Click item 'FormRealView.MenuItemTracks'");
			    repo.FormRealView.MenuItemTracks.Click();
			    Report.Info("Mouse Left Click item 'FormTracks.MenuItemC2_HOST_Track'");
		        repo.FormTracks.MenuItemC2_HOST_Track.Click();
		       	Report.Info("Mouse Left Click item 'FormTOAD2.MenuItemDrop_Track' at 103;14.");
				repo.FormTOAD.MenuItemDrop_Track.Click();
				repo.RealViewDialog.ButtonYes.Click();
			}
			
			else if (repo.FormRealView.MenuItemTrackNumberInfo.Exists())
			{
				Report.Info("Dropping Track # " + dropTrackNum);
			    Report.Info("Mouse Left Click item 'repo.FormRealView.MenuItemTrackNumber'");
		        repo.FormRealView.MenuItemTrackNumber.Click();
		       	Report.Info("Mouse Left Click item 'FormTOAD.MenuItemTrack_Properties' at 103;14.");
				repo.FormTOAD.MenuItemDrop_Track.Click();
				repo.RealViewDialog.ButtonYes.Click();
			}
			
			repo.FormRealView.MenuItemTracksInfo.SearchTimeout = OrigDur;
			repo.FormRealView.MenuItemTrackNumberInfo.SearchTimeout = OrigDur1;
		}

		private void Init()
		{
			// Your recording specific initialization code goes here.
		}

	}
}
