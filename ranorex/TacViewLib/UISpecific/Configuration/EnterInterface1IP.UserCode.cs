///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using System.Windows.Forms;

using Ranorex;
using Ranorex.Core;

namespace TacViewLib.UISpecific.Configuration
{
	/// <summary>
	/// The EnterTOADIP recording.
	/// </summary>
	public partial class EnterInterface1IP
	{
		public string Interface1;
		public string IP1;
		public string Port1;
		public string quiet;
		public string Unit1;
		
		static EnterInterface1IP()
		{
			//Your recording specific initialization code goes here.
		}

		//Select Approriate Interface 1
		public void EnableInterface1()
		{
			Duration OrigDur = repo.FormTacViewC2.INTERFACE_ONEInfo.SearchTimeout;
			repo.FormTacViewC2.INTERFACE_ONEInfo.SearchTimeout = 10000;
				
			if (Interface1 == "C2HOST" )
			{
				Validate.IsTrue( repo.FormTacViewC2.INTERFACE_ONE.Text == "C2 HOST", "Validate Interface1 is named C2 HOST", false );
			}
			else if (Interface1 == "C2HOST2")
			{
				Validate.IsTrue( repo.FormTacViewC2.INTERFACE_ONE.Text == "C2 HOST 2", "Validate Interface1 is named C2 HOST 2", false );
			}
			else if (Interface1 == "TOAD")
			{
				Validate.IsTrue( repo.FormTacViewC2.INTERFACE_ONE.Text == "TOAD", "Validate Interface1 is named TOAD", false );
			}
			else if (Interface1 == "TOAD2")
			{
				Validate.IsTrue( repo.FormTacViewC2.INTERFACE_ONE.Text == "TOAD 2", "Validate Interface1 is named TOAD 2", false );	
			}		
			else
			{
			    if (quiet == "n")
				{
					CommonUtilLib.Util.MsgBox.Show("Invalid value set for Interface 2. Value must be C2HOST, C2HOST2, TOAD, or TOAD2 - Terminating Program", "Interface Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
			    }
			    
			    Report.Error("Invalid value set for Interface 2. Value must be C2HOST, C2HOST2, TOAD, or TOAD2 - Terminating Program");
				Environment.Exit(-1);
			}
			
			if (Interface1 == "C2HOST" && (repo.FormTacViewC2.INTERFACE_ONE.Text == "TOAD" || repo.FormTacViewC2.INTERFACE_ONE.Text == "TOAD2"))
			{
				if (quiet == "n")
				{
					CommonUtilLib.Util.MsgBox.Show("Invalid value set for Interface 2. C2 HOST not available for v14 TacView - Terminating Program", "Interface Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
				}
				
				Report.Error("Invalid value set for Interface 2. C2 HOST not available for v14 TacView - Terminating Program");
				Environment.Exit(-1);
					
			}					
			else if (Interface1 == "C2HOST2" && (repo.FormTacViewC2.INTERFACE_ONE.Text == "TOAD" || repo.FormTacViewC2.INTERFACE_ONE.Text == "TOAD2"))
			{
				if (quiet == "n")
				{
					CommonUtilLib.Util.MsgBox.Show("Invalid value set for Interface 2. C2 HOST 2 not available for v14 TacView - Terminating Program", "Interface Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
				}
				
				Report.Error("Invalid value set for Interface 2. C2 HOST 2 not available for v14 TacView - Terminating Program");
				Environment.Exit(-1);
			}	
			    	
			EnsureInterface1On();
			
			repo.FormTacViewC2.INTERFACE_ONEInfo.SearchTimeout = OrigDur;
		}
		
		public void EnsureInterface1On()
		{
			if( repo.FormTacViewC2.STATUS_ONE.Text == "OFF")
			{
				Report.Info("Mouse Left Click item 'FormTacViewC2.STATUS_ONE' at CenterLeft.");
				repo.FormTacViewC2.STATUS_ONE.Click(Location.CenterLeft);
				Delay.Milliseconds(2000, false);
				Validate.IsTrue( repo.FormTacViewC2.STATUS_ONE.Text != "OFF", "Validating Interface 1 Switched states from OFF.", false);
			}
			else
				Report.Info("Interface 1 Already Enabled");
		}
		public void ToggleInterface1()
		{
			Report.Info("Toggling Interface_ONE");
			repo.FormTacViewC2.INTERFACE_ONE.Click(MouseButtons.Left, "Center");	
		}
		
		public void IPAdress1()
		{
			//Enter IP for Interface 1
			Report.Info("Key sequence 'IP1'.");
			Keyboard.Press(IP1);
		}
		
		public void ServerPort1()
		{
			//Enter Server Port for Interface 1
			Report.Info("Key sequence 'Port1'.");
			Keyboard.Press(Port1);
		}
		
		public string GetUnit()
		{
			if (repo.FormTacViewC2.STATUS_ONE.Text.Equals("OPER"))
			{
				Accessible accElement1 = new Accessible(repo.FormTacViewC2.UNIT_C2HOST);  
				return accElement1.Value.ToString();
			}
		    else
		    {
		    	Report.Error("Interface 1 is not operational.");
		    	return "";
		    }  
		}
		
		public void Validate_Unit()
		{
			Report.Info("Validating AttributeEqual (Text=" + Unit1 + ") on item 'FormTacViewC2.UNIT_ONE'.");
			Validate.Attribute(repo.FormTacViewC2.UNIT_C2HOSTInfo, "Text", Unit1, Validate.DefaultMessage, false);
		}
		
		public void RightClickInterface()
		{
			repo.FormTacViewC2.INTERFACE_ONE.Click(MouseButtons.Right, "Center");
		}
		
		public void ValidateInterfaceText()
		{
			Validate.IsTrue( repo.FormTacViewC2.INTERFACE_ONE.Text == "C2 HOST", "Validate Interface2 is named C2 HOST", false );
		}

		private void Init()
		{
			// Your recording specific initialization code goes here.
		}
	}
}
