///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using System.Windows.Forms;

using Ranorex;
using Ranorex.Core;

namespace TacViewLib.UISpecific.Configuration
{
	/// <summary>
	/// The EnterTOADIP recording.
	/// </summary>
	public partial class EnterInterface2IP
	{
		public string Interface2;
		public string IP2;
		public string quiet;
		public string Port2;
		public string Unit2;
		
		static EnterInterface2IP()
		{
			//Your recording specific initialization code goes here.
		}

		//Select Approriate Interface 2
		public void EnableInterface2()
		{
			if((Interface2 != "TOAD2") && (Interface2 != "TOAD") && (Interface2 != "C2HOST2") && (Interface2 != "C2HOST" ) )
			{
			    if (quiet == "n")
				{
					CommonUtilLib.Util.MsgBox.Show("Invalid value set for Interface 2. Value must be C2HOST, C2HOST2, TOAD, or TOAD2 - Terminating Program", "Interface Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
			    }
			    
			    Report.Error("Invalid value set for Interface 2. Value must be C2HOST, C2HOST2, TOAD, or TOAD2 - Terminating Program.  Value found:" + Interface2);
				Environment.Exit(-1);
			}
			EnsureInterface2On();
			ValidateInterfaceText();
		}

		public void EnsureInterface2On()
		{
			if( Interface2State("OFF"))
			{
				ToggleInterface2();
				Delay.Milliseconds(2000, false);
				Validate.IsTrue(Interface2State("OPER"), "Validating Interface 2 Switched states to OPER.", false);
			}
			else
				Report.Info("Interface 2 Already Enabled");
		}
		
		public void EnsureInterface2Off()
		{
			if( Interface2State("OFF") )
			{
				Report.Info("Interface 2 Already Disabled");
			}
			else
			{
				ToggleInterface2();
				Delay.Milliseconds(2000, false);
				Validate.IsTrue(Interface2State("OFF"), "Validating Interface 2 Switched states to OFF.", false);
			}
		}
			
		public bool Interface2State(string stateText)
		{
			switch(Interface2)
			{
			case "C2HOST":
				return repo.FormTacViewC2.STATUS_ONE.Text == stateText;
			case "C2HOST2":
				return repo.FormTacViewC2.STATUS_TWO.Text == stateText;
			case "TOAD":
				return repo.FormTacViewC2.STATUS_THREE.Text == stateText;
			case "TOAD2":
				return repo.FormTacViewC2.STATUS_FOUR.Text == stateText;
			default:
				Report.Error("No interface defined for " + Interface2 + ".");
				break;
			}
			return false;
		}
		
		public void ToggleInterface2()
		{
			Report.Info("Toggling Interface 2 state");
			switch(Interface2)
			{
			case "C2HOST":
				repo.FormTacViewC2.STATUS_ONE.Click(Location.CenterLeft);
				break;
			case "C2HOST2":
				repo.FormTacViewC2.STATUS_TWO.Click(Location.CenterLeft);
				break;
			case "TOAD":
				repo.FormTacViewC2.STATUS_THREE.Click(Location.CenterLeft);
				break;
			case "TOAD2":
				repo.FormTacViewC2.STATUS_FOUR.Click(Location.CenterLeft);
				break;
			default:
				Report.Info("No interface defined for " + Interface2 + ".");
				break;
			}
		}
		
		public void ValidateInterfaceText()
		{
			switch(Interface2)
			{
			case "C2HOST":
				Validate.IsTrue( repo.FormTacViewC2.INTERFACE_ONE.Text == "C2 HOST", "Validate Interface2 is named C2 HOST", false );
				break;
			case "C2HOST2":
				Validate.IsTrue( repo.FormTacViewC2.INTERFACE_TWO.Text == "C2 HOST 2", "Validate Interface2 is named C2 HOST 2", false );
				break;
			case "TOAD":
				Validate.IsTrue( repo.FormTacViewC2.INTERFACE_THREE.Text == "TOAD", "Validate Interface2 is named TOAD", false );
				break;
			case "TOAD2":
				Validate.IsTrue( repo.FormTacViewC2.INTERFACE_FOUR.Text == "TOAD 2", "Validate Interface2 is named TOAD 2", false );	
				break;
			default:
				Report.Info("No interface to validate for " + Interface2 + ".");
				break;
			}	
		}
		public void IPAdress2()
		{
			//Enter IP for Interface 2
			Report.Info("Key sequence 'IP2'.");
			Keyboard.Press(IP2);
		}
		
		public void ServerPort2()
		{
			Report.Info("Key sequence 'Port2'.");
			Keyboard.Press(Port2);
		}
		
		/*
		 * Returns the interface's unit number
		 */
		public string GetUnit()
		{
			Accessible accElement1;
			switch(Interface2)
			{
			case "C2HOST":
				accElement1 = new Accessible(repo.FormTacViewC2.UNIT_C2HOST);
				if (repo.FormTacViewC2.STATUS_ONE.Text.Equals("OPER"))
					return accElement1.Value.ToString();
				break;
			case "C2HOST2":
				accElement1 = new Accessible(repo.FormTacViewC2.UNIT_C2HOST2);  
				if (repo.FormTacViewC2.STATUS_TWO.Text.Equals("OPER"))
					return accElement1.Value.ToString();
				break;
			case "TOAD":
				accElement1 = new Accessible(repo.FormTacViewC2.UNIT_TOADv15);
				if (repo.FormTacViewC2.STATUS_THREE.Text.Equals("OPER"))
					return accElement1.Value.ToString();
				break;
			case "TOAD2":
				accElement1 = new Accessible(repo.FormTacViewC2.UNIT_TOAD2v15);
				if (repo.FormTacViewC2.STATUS_FOUR.Text.Equals("OPER"))
					return accElement1.Value.ToString();
				break;
			default:
				Report.Info("No interface defined for " + Interface2 + ".");
				return "";
			}
			Report.Error("Interface 2 is not operational.");
			return "";
			
		}
		
		/*
		 * Returns the interface's text name
		 */
		public string GetInterface2Text()
		{
			switch(Interface2)
			{
			case "C2HOST":
				return repo.FormTacViewC2.INTERFACE_ONE.Text;
			case "C2HOST2":
				return repo.FormTacViewC2.INTERFACE_TWO.Text;
			case "TOAD":
				return repo.FormTacViewC2.INTERFACE_THREE.Text;
			case "TOAD2":
				return repo.FormTacViewC2.INTERFACE_FOUR.Text;
			default:
				break;
			}
			Report.Error("Interface 2 Text not available for value:" + Interface2 + ".");
			return "";
		}
		
		/*
		 * Validate the Unit column in Host Interface Control
		 */
		public void Validate_Unit()
		{
			Report.Info("Validating AttributeEqual (Text=" + Unit2 + ") on Interface 2 Unit Column.");
			switch(Interface2)
			{
			case "C2HOST":
				Validate.Attribute(repo.FormTacViewC2.UNIT_C2HOSTInfo, "Text", Unit2, Validate.DefaultMessage, false);
				break;
			case "C2HOST2":
				Validate.Attribute(repo.FormTacViewC2.UNIT_C2HOST2Info, "Text", Unit2, Validate.DefaultMessage, false);
				break;
			case "TOAD":
				Validate.Attribute(repo.FormTacViewC2.UNIT_TOADv15Info, "Text", Unit2, Validate.DefaultMessage, false);
				break;
			case "TOAD2":
				Validate.Attribute(repo.FormTacViewC2.UNIT_TOAD2v15Info, "Text", Unit2, Validate.DefaultMessage, false);
				break;
			default:
				break;
			}
		}
		
		/*
		 * Right click on the interface tab in Host Interface Control
		 */
		public void RightClickInterface()
		{
			Report.Info("Right Click on Interface 2 Cell.");
			switch(Interface2)
			{
			case "C2HOST":
				repo.FormTacViewC2.INTERFACE_ONE.Click(MouseButtons.Right, "Center");
				break;
			case "C2HOST2":
				repo.FormTacViewC2.INTERFACE_TWO.Click(MouseButtons.Right, "Center");
				break;
			case "TOAD":
				repo.FormTacViewC2.INTERFACE_THREE.Click(MouseButtons.Right, "Center");
				break;
			case "TOAD2":
				repo.FormTacViewC2.INTERFACE_FOUR.Click(MouseButtons.Right, "Center");
				break;
			default:
				break;
			}
		}

		/*
		 * Finds the interface associated with interface 2 and based on a given 'trackNum' will 
		 * click on the cooresponding menu item for that interface/track number combination.
		 * Returns false if the menu item is not found
		 */
		public bool SelectTrackInterface(string trackNum)
		{
			string currentPath;
			RxPath originalPath;
			Duration origDuration; 
			bool foundItem = false;
			switch(Interface2)
			{
			case "C2HOST":	
				originalPath = repo.TOAD_Context_Menu.MenuItemC2_HOST_TrackInfo.Path;
				currentPath = repo.TOAD_Context_Menu.MenuItemC2_HOST_TrackInfo.Path.ToString();
				repo.TOAD_Context_Menu.MenuItemC2_HOST_TrackInfo.Path =  currentPath.Replace("%track%", trackNum);
				origDuration = repo.TOAD_Context_Menu.MenuItemC2_HOST_TrackInfo.SearchTimeout;
				repo.TOAD_Context_Menu.MenuItemC2_HOST_TrackInfo.SearchTimeout = 1000;
				if( repo.TOAD_Context_Menu.MenuItemC2_HOST_TrackInfo.Exists() )
				{
					foundItem = true;
					repo.TOAD_Context_Menu.MenuItemC2_HOST_Track.Click();
				}
				repo.TOAD_Context_Menu.MenuItemC2_HOST_TrackInfo.Path = originalPath;
				repo.TOAD_Context_Menu.MenuItemC2_HOST_TrackInfo.SearchTimeout = origDuration;
				break;
			case "C2HOST2":
				originalPath = repo.TOAD_Context_Menu.MenuItemC2_HOST_2_TrackInfo.Path;
				currentPath = repo.TOAD_Context_Menu.MenuItemC2_HOST_2_TrackInfo.Path.ToString();
				repo.TOAD_Context_Menu.MenuItemC2_HOST_2_TrackInfo.Path =  currentPath.Replace("%track%", trackNum);
				origDuration = repo.TOAD_Context_Menu.MenuItemC2_HOST_2_TrackInfo.SearchTimeout;
				repo.TOAD_Context_Menu.MenuItemC2_HOST_TrackInfo.SearchTimeout = 1000;
				if( repo.TOAD_Context_Menu.MenuItemC2_HOST_2_TrackInfo.Exists() )
				{
					foundItem = true;
					repo.TOAD_Context_Menu.MenuItemC2_HOST_2_Track.Click();
				}
				repo.TOAD_Context_Menu.MenuItemC2_HOST_2_TrackInfo.Path = originalPath;
				repo.TOAD_Context_Menu.MenuItemC2_HOST_2_TrackInfo.SearchTimeout = origDuration;
				break;
			case "TOAD":
				originalPath = repo.TOAD_Context_Menu.MenuItemTOAD_TrackInfo.Path;
				currentPath = repo.TOAD_Context_Menu.MenuItemTOAD_TrackInfo.Path.ToString();
				repo.TOAD_Context_Menu.MenuItemTOAD_TrackInfo.Path =  currentPath.Replace("%track%", trackNum);
				origDuration = repo.TOAD_Context_Menu.MenuItemTOAD_TrackInfo.SearchTimeout;
				repo.TOAD_Context_Menu.MenuItemTOAD_TrackInfo.SearchTimeout = 1000;
				if( repo.TOAD_Context_Menu.MenuItemTOAD_TrackInfo.Exists() )
				{
					foundItem = true;
					repo.TOAD_Context_Menu.MenuItemTOAD_Track.Click();
				}
				repo.TOAD_Context_Menu.MenuItemTOAD_TrackInfo.Path = originalPath;
				repo.TOAD_Context_Menu.MenuItemTOAD_TrackInfo.SearchTimeout = origDuration;
				break;
			case "TOAD2":
				originalPath = repo.TOAD_Context_Menu.MenuItemTOAD_2_TrackInfo.Path;
				currentPath = repo.TOAD_Context_Menu.MenuItemTOAD_2_TrackInfo.Path.ToString();
				repo.TOAD_Context_Menu.MenuItemTOAD_2_TrackInfo.Path =  currentPath.Replace("%track%", trackNum);
				origDuration = repo.TOAD_Context_Menu.MenuItemTOAD_2_TrackInfo.SearchTimeout;
				repo.TOAD_Context_Menu.MenuItemTOAD_2_TrackInfo.SearchTimeout = 1000;
				if( repo.TOAD_Context_Menu.MenuItemTOAD_2_TrackInfo.Exists() )
				{
					foundItem = true;
					repo.TOAD_Context_Menu.MenuItemTOAD_2_Track.Click();
				}
				repo.TOAD_Context_Menu.MenuItemTOAD_2_TrackInfo.Path = originalPath;
				repo.TOAD_Context_Menu.MenuItemTOAD_2_TrackInfo.SearchTimeout = origDuration;
				break;
			default:
				Report.Error("Interface not defined.");
				break;
			}
			return foundItem;
		}

		private void Init()
		{
			// Your recording specific initialization code goes here.
		}
	}
}
