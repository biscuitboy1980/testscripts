///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;

namespace TacViewLib.UISpecific.ATOUpgrade.ATOMissionNumber_Query_Test
{
	/// <summary>
	/// The ValidateQuery recording.
	/// </summary>
	[TestModule("6b619463-2a3a-47b6-bff0-ef9d4ebaaf99", ModuleType.Recording, 1)]
	public partial class ValidateQuery : ITestModule
	{
		/// <summary>
		/// Holds an instance of the TacViewLib.ATOUpgradeRepository repository.
		/// </summary>
		public static TacViewLib.ATOUpgradeRepository repo = TacViewLib.ATOUpgradeRepository.Instance;

		static ValidateQuery instance = new ValidateQuery();

		/// <summary>
		/// Constructs a new instance.
		/// </summary>
		public ValidateQuery()
		{
		}

		/// <summary>
		/// Gets a static instance of this recording.
		/// </summary>
		public static ValidateQuery Instance
		{
			get { return instance; }
		}

#region Variables

#endregion

		/// <summary>
		/// Starts the replay of the static recording <see cref="Instance"/>.
		/// </summary>
		[System.CodeDom.Compiler.GeneratedCode("Ranorex", "3.0.0")]
		public static void Start()
		{
			TestModuleRunner.Run(Instance);
		}

		/// <summary>
		/// Performs the playback of actions in this recording.
		/// </summary>
		/// <remarks>You should not call this method directly, instead pass the module
		/// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
		/// that will in turn invoke this method.</remarks>
		[System.CodeDom.Compiler.GeneratedCode("Ranorex", "3.0.0")]
		void ITestModule.Run()
		{
			Mouse.DefaultMoveTime = 150;
			Keyboard.DefaultKeyPressTime = 25;
			Delay.SpeedFactor = 1.0;

			Init();

			try {
				Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibleValue='') on item 'FormRealView1.Row0.CellResidual'.", repo.FormRealView1.Row0.CellResidualInfo, new RecordItemIndex(0));
				Validate.Attribute(repo.FormRealView1.Row0.CellResidualInfo, "AccessibleValue", "", Validate.DefaultMessage, false);
				Delay.Milliseconds(100);
			} catch(Exception) { }
			
			try {
				Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibleValue='5470') on item 'FormRealView1.Row0.CellMission_Number'.", repo.FormRealView1.Row0.CellMission_NumberInfo, new RecordItemIndex(1));
				Validate.Attribute(repo.FormRealView1.Row0.CellMission_NumberInfo, "AccessibleValue", "5470", Validate.DefaultMessage, false);
				Delay.Milliseconds(100);
			} catch(Exception) { }
			
			try {
				Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibleValue='') on item 'FormRealView1.Row0.CellAMC_or_Event_Number'.", repo.FormRealView1.Row0.CellAMC_or_Event_NumberInfo, new RecordItemIndex(2));
				Validate.Attribute(repo.FormRealView1.Row0.CellAMC_or_Event_NumberInfo, "AccessibleValue", "", Validate.DefaultMessage, false);
				Delay.Milliseconds(100);
			} catch(Exception) { }
			
			try {
				Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibleValue='') on item 'FormRealView1.Row0.CellPackage_ID'.", repo.FormRealView1.Row0.CellPackage_IDInfo, new RecordItemIndex(3));
				Validate.Attribute(repo.FormRealView1.Row0.CellPackage_IDInfo, "AccessibleValue", "", Validate.DefaultMessage, false);
				Delay.Milliseconds(100);
			} catch(Exception) { }
			
			try {
				Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibleValue='') on item 'FormRealView1.Row0.CellMission_Commander'.", repo.FormRealView1.Row0.CellMission_CommanderInfo, new RecordItemIndex(4));
				Validate.Attribute(repo.FormRealView1.Row0.CellMission_CommanderInfo, "AccessibleValue", "", Validate.DefaultMessage, false);
				Delay.Milliseconds(100);
			} catch(Exception) { }
			
			try {
				Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibleValue='') on item 'FormRealView1.Row0.CellCOMAO_ID'.", repo.FormRealView1.Row0.CellCOMAO_IDInfo, new RecordItemIndex(5));
				Validate.Attribute(repo.FormRealView1.Row0.CellCOMAO_IDInfo, "AccessibleValue", "", Validate.DefaultMessage, false);
				Delay.Milliseconds(100);
			} catch(Exception) { }
			
			try {
				Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibleValue='ASW') on item 'FormRealView1.Row0.CellPrimary_Mission_Type'.", repo.FormRealView1.Row0.CellPrimary_Mission_TypeInfo, new RecordItemIndex(6));
				Validate.Attribute(repo.FormRealView1.Row0.CellPrimary_Mission_TypeInfo, "AccessibleValue", "ASW", Validate.DefaultMessage, false);
				Delay.Milliseconds(100);
			} catch(Exception) { }
			
			try {
				Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibleValue='') on item 'FormRealView1.Row0.CellSecondary_Mission_Type'.", repo.FormRealView1.Row0.CellSecondary_Mission_TypeInfo, new RecordItemIndex(7));
				Validate.Attribute(repo.FormRealView1.Row0.CellSecondary_Mission_TypeInfo, "AccessibleValue", "", Validate.DefaultMessage, false);
				Delay.Milliseconds(100);
			} catch(Exception) { }
			
			try {
				Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibleValue='') on item 'FormRealView1.Row0.CellGround_Alert_Status'.", repo.FormRealView1.Row0.CellGround_Alert_StatusInfo, new RecordItemIndex(8));
				Validate.Attribute(repo.FormRealView1.Row0.CellGround_Alert_StatusInfo, "AccessibleValue", "", Validate.DefaultMessage, false);
				Delay.Milliseconds(100);
			} catch(Exception) { }
			
			try {
				Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibleValue='DEPLOC:RKTI') on item 'FormRealView1.Row0.CellMission_Depart_Location'.", repo.FormRealView1.Row0.CellMission_Depart_LocationInfo, new RecordItemIndex(9));
				Validate.Attribute(repo.FormRealView1.Row0.CellMission_Depart_LocationInfo, "AccessibleValue", "DEPLOC:RKTI", Validate.DefaultMessage, false);
				Delay.Milliseconds(100);
			} catch(Exception) { }
			
			try {
				Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibleValue='') on item 'FormRealView1.Row0.CellMission_Depart_Time'.", repo.FormRealView1.Row0.CellMission_Depart_TimeInfo, new RecordItemIndex(10));
				Validate.Attribute(repo.FormRealView1.Row0.CellMission_Depart_TimeInfo, "AccessibleValue", "", Validate.DefaultMessage, false);
				Delay.Milliseconds(100);
			} catch(Exception) { }
			
			try {
				Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibleValue='01/01/11 16:00:00') on item 'FormRealView1.Row0.CellMission_Start_Time'.", repo.FormRealView1.Row0.CellMission_Start_TimeInfo, new RecordItemIndex(11));
				Validate.Attribute(repo.FormRealView1.Row0.CellMission_Start_TimeInfo, "AccessibleValue", "01/01/11 16:00:00", Validate.DefaultMessage, false);
				Delay.Milliseconds(100);
			} catch(Exception) { }
			
			try {
				Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibleValue='01/30/11 23:59:00') on item 'FormRealView1.Row0.CellMission_Stop_Time'.", repo.FormRealView1.Row0.CellMission_Stop_TimeInfo, new RecordItemIndex(12));
				Validate.Attribute(repo.FormRealView1.Row0.CellMission_Stop_TimeInfo, "AccessibleValue", "01/30/11 23:59:00", Validate.DefaultMessage, false);
				Delay.Milliseconds(100);
			} catch(Exception) { }
			
			try {
				Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating Exists on item 'FormRealView1.Row0.CellPkey'.", repo.FormRealView1.Row0.CellPkeyInfo, new RecordItemIndex(13));
				Validate.Exists(repo.FormRealView1.Row0.CellPkeyInfo, Validate.DefaultMessage, false);
				Delay.Milliseconds(100);
			} catch(Exception) { }
			
			try {
				Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating Exists on item 'FormRealView1.Row0.CellUnitKey'.", repo.FormRealView1.Row0.CellUnitKeyInfo, new RecordItemIndex(14));
				Validate.Exists(repo.FormRealView1.Row0.CellUnitKeyInfo, Validate.DefaultMessage, false);
				Delay.Milliseconds(100);
			} catch(Exception) { }
			
			Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FormRealView1.ButtonCLOSE' at Center.", repo.FormRealView1.ButtonCLOSEInfo, new RecordItemIndex(15));
			repo.FormRealView1.ButtonCLOSE.Click(100);
			Delay.Milliseconds(0);
			
		}

#region Image Feature Data
#endregion
	}
}
