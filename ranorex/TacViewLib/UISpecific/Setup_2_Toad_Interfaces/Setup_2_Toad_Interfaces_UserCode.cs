///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using System.Windows.Forms;
using Microsoft.Win32;
using System.Diagnostics;
using Microsoft.VisualBasic;
using System.ComponentModel;
using System.Data;
using System.IO;

using CommonUtilLib;
using Ranorex;
using Ranorex.Core;


namespace TacViewLib.UISpecific.Setup_2_Toad_Interfaces
{
	/// <summary>
	/// The Setup recording.
	/// </summary>
	public partial class Setup_2_Toad_Interfaces		
	{
		
		public static string quiet;		
		
		
		//**************************************************************************************//
		//******************Checks for Existing Registry Key Before Deleting It*****************//
		//**************************************************************************************//
		
		public void RegClear()
		{	
			string regKey="Software\\Ultra Electronics Inc\\TacViewC2";
			
			using (RegistryKey key = Registry.CurrentUser.OpenSubKey(regKey, true))
			{
				if (key != null)
				{
					Registry.CurrentUser.DeleteSubKeyTree(regKey);
				}
			}
		}

		//**************************************************************************************//
		//***********************Selects no Open GL if the prompt appears***********************//
		//**************************************************************************************//
		
		public void GLButtonOK()
		{
			Report.Info("Checking to see if 'FormSelect_Configuration.ButtonOK1' Exists");
			
			if (repo.FormSelect_Configuration.ButtonOKInfo.Exists())
			{
				repo.FormSelect_Configuration.ButtonOK.Click("37;11");
			}
		}
	
		//**************************************************************************************//
		//******Opens pacific map if available, if not closes the map selection dialogue********//
		//**************************************************************************************//
			
		public void MapDialogue()
		{				
			while (repo.FormSplashScreen.ProgressBar.Value < 1000)
			{
				Report.Info("Loading TacView...");
				Delay.Seconds(5);
			}
		
			Report.Info("Checking to see if 'FormLoadMap' Exists");
			    
			if (repo.FormLoadMap.ButtonOpenInfo.Exists())
			{
				if (repo.FormLoadMap.ListItemMapInfo.Exists())					
				{
					repo.FormLoadMap.ListItemMap.DoubleClick("center");
				}
			
				else
				{
					repo.FormLoadMap.ButtonCancel.Click("center");
				}
			}		
		}
		
		//**************************************************************************************//
		//***********************Selects no Open GL if the prompt appears***********************//
		//**************************************************************************************//
		
		public void dpBuffer_Check()
		{
			Report.Info("Checking to see if dpBuffer pop up exists");
			
			if (repo.RealViewDialog.CheckBoxDo_not_show_this_messageInfo.Exists())
			{
				Report.Info("dpBuffer pop up detected, selecting to never show again and clicking OK");
				repo.RealViewDialog.CheckBoxDo_not_show_this_message.Click();
				repo.RealViewDialog.ButtonOK.Click();
			}
			else
			{
				Report.Info("dpBuffer pop up was not detected");
			}			
		}		
		
	    //**************************************************************************************//
		//******************************Populates C2Host IP Address*****************************//
		//**************************************************************************************//
		
		public void C2Hostip()
		{
			Report.Info("Key sequence 'ip1csv'.");
			Keyboard.Press(ip1csv);
		}		
		
		//**************************************************************************************//
		//*****************************Populates C2Host 2 IP Address****************************//
		//**************************************************************************************//
		
		public void C2Host2ip()
		{
			Report.Info("Key sequence 'ip2csv'.");
			Keyboard.Press(ip2csv);
		}		
		
        //**************************************************************************************//
		//************************Validates C2Host interface goes OPER**************************//
		//**************************************************************************************//
		
		public void ValC2Host()
		{
			Report.Info("Validating C2 HOST Connection to Trackserver");
			bool result = Validate.Attribute(repo.FormTacViewC2.Host_interface_Control_Table.Row0.CellStatus_0_1, "Text", "OPER", Validate.DefaultMessage, false);
			
			if (result == true)
			{
				Report.Success("Successfully established connection to Trackserver on C2 HOST link");
			}
			else
			{
				////// Restarts Trackserver daemon on SUT//////
				Report.Debug("Attempting to restart Trackserver daemon on the SUT to see if it will fix the problem");
				System.Diagnostics.Process TSrestart = new System.Diagnostics.Process();
				TSrestart.StartInfo.FileName=@"c:/Program Files/Attachmate/RSecure/ssh.exe";
				TSrestart.StartInfo.Arguments="-i ../keys/key -o StrictHostKeyChecking=no adsi@" + ip1csv + " ADMIN_TRACK_SVR_RESTART";
				TSrestart.Start();
				TSrestart.WaitForExit();
				Delay.Seconds(5);
				Report.Info("Validating C2HOST Connection to Trackserver");
				Validate.Attribute(repo.FormTacViewC2.Host_interface_Control_Table.Row0.CellStatus_0_1, "Text", "OPER");			
			}		
		}
	
        //**************************************************************************************//
		//************************Validates C2Host2 interface goes OPER*************************//
		//**************************************************************************************//
		
		public void ValC2Host2()
		{			
			Report.Info("Validating C2 HOST2 Connection to Trackserver");
			bool result = Validate.Attribute(repo.FormTacViewC2.Host_interface_Control_Table.Row1.CellStatus_1_1, "Text", "OPER", Validate.DefaultMessage, false);
			
			if (result == true)
			{
				Report.Success("Successfully established connection to Trackserver on C2 HOST2 link");
			}
			else
			{
				////// Restarts Trackserver daemon on SIM//////
				Report.Info("Trackserver not connected attempting to restart daemon on the Simulator");
				System.Diagnostics.Process TSrestart = new System.Diagnostics.Process();
				TSrestart.StartInfo.FileName=@"c:/Program Files/Attachmate/RSecure/ssh.exe";
				TSrestart.StartInfo.Arguments="-i ../keys/key -o StrictHostKeyChecking=no adsi@" + ip2csv + " ADMIN_TRACK_SVR_RESTART";
				TSrestart.Start();
				TSrestart.WaitForExit();
				Delay.Seconds(5);
				Report.Info("Validating C2HOST Connection to Trackserver");
				Validate.Attribute(repo.FormTacViewC2.Host_interface_Control_Table.Row1.CellStatus_1_1, "Text", "OPER");
			}
		}
		
        //**************************************************************************************//
		//***************************Ranorex Generated Default Method***************************//
		//**************************************************************************************//		

		static Setup_2_Toad_Interfaces()
		{
			//Your recording specific initialization code goes here.
		}

		//**************************************************************************************//
		//************************Launches TacView Using the Desktop Icon***********************//
		//**************************************************************************************//
		
		public void LaunchTV()
		{
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			Report.Info("Launching TacView from the Desktop");
			SharedFunctions.LaunchApp("TacViewC2");
		}

		//**************************************************************************************//
		//**********************Clicks the Maximize Button if Available*************************//
		//**************************************************************************************//
		
		public void Maximize()
		{
			Duration OrigDur1 = repo.FormTacViewC2.ButtonMaximizeInfo.SearchTimeout;
			repo.FormTacViewC2.ButtonMaximizeInfo.SearchTimeout = 2000;
			
			if (repo.FormTacViewC2.ButtonMaximizeInfo.Exists())
			{
				Report.Info("Mouse Left Click item 'FormTacViewC2.ButtonMaximize' at Center.");
				repo.FormTacViewC2.ButtonMaximize.Click(300);
			}
			else
			{
				Report.Debug("Unable to find button Maximize");
			}

			repo.FormTacViewC2.ButtonMaximizeInfo.SearchTimeout = OrigDur1;			
		}

		//**************************************************************************************//
		//**************************************************************************************//
		//**************************************************************************************//
		
		public void FilterSensorPopUp()
		{
			Report.Info("Checking to see if filter pop up exists");
			
			if (repo.FormRealView.Checkbox1Info.Exists())
			{
				Report.Info("Filter pop up detected, selecting to never show again and clicking OK");
				repo.FormRealView.Checkbox1.Click();
				repo.FormRealView.ButtonOK.Click();
			}
			else
			{
				Report.Info("Filter pop up was not detected");
			}			
		}

		//**************************************************************************************//
		//*****************************Ranorex Generated Init Method****************************//
		//**************************************************************************************//
		
		private void Init()
		{
			// Your recording specific initialization code goes here.
		}
		
        //**************************************************************************************//
		//******************************Kills the RealView Process******************************//
		//**************************************************************************************//	

		public void KillRealview()
		{
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			SharedFunctions.KillProcess("RealView.exe");			
		}

        public void KillTV()
        {
            // Your code goes here. Code inside this method will not be changed by the code generator.
            
        }
	}
}