///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using System.Windows.Forms;

using Ranorex;
using Ranorex.Core;

namespace TacViewLib.UISpecific.Overlays
{
	/// <summary>
	/// The Ellipse recording.
	/// </summary>
	public partial class CreateEllipse
	{
		//Local Variables
		public string LowAlt;
		
		//Conditional Flags
		public bool OtherDefinedTypeFlag;
		public bool OtherDefinedUsageFlag;
		public bool SpecificRadioFreqFlag;		
		
		static CreateEllipse()
		{
			//Your recording specific initialization code goes here.
		}

		//************************************************************************************//
		//***********************************ACM Type Value***********************************//
		//************************************************************************************//
		
		public void ACM()
		{			
			try
			{
				repo.Main_ACM_Ellipse_Ellipse.ListItemACM_Type.Click("CenterLeft");
				Keyboard.Press(Keys.Tab);
				Keyboard.Press("{LMenu down}{Down}{LMenu up}");
				Ranorex.List list2 = "//list[@processname='RealView']";
		        int AScount = list2.Items.Count;
		        Random ASvalue = new Random();
		        int ASnum = ASvalue.Next(0, (AScount-1));
				repo.ListRealView.Self.Items[ASnum].Select();
			    repo.ListRealView.Self.Items[ASnum].Click("center");
				Accessible accElement = new Accessible(repo.Main_ACM_Ellipse_Ellipse.ListItemACM_Type);  
			  	string ACMTypeValue = accElement.Value;
			  	ValidateEllipse.ACMType = ACMTypeValue;
			  	Report.Info("ACM Type Entered = " + ACMTypeValue);
			  	ValidateEllipse.ACMType_OOR = false;
			  	if (ASnum==0)
   				{
   					OtherDefinedTypeFlag = true;
   					ValidateEllipse.OtherDefinedTypeFlag = true;
   				}
				else
				{
	  				OtherDefinedTypeFlag = false;
	  				ValidateEllipse.OtherDefinedTypeFlag = false;
				}
			}
			catch (ArgumentOutOfRangeException e)
			{						
	   			Report.Debug("List Count Out of Range for ACM Type, List Item Will Not be Validated");
	   			Report.Debug(e.ToString());	
	   			ValidateEllipse.ACMType_OOR = true;
			}
		}	
		
		//************************************************************************************//
		//*************************Enters Other Defined Type Value****************************//
		//************************************************************************************//
		
		public void ODT()
		{
			if (OtherDefinedTypeFlag)
			{
				repo.Main_ACM_Ellipse_Ellipse.ListItemOther_Defined_Type.Click("CenterLeft");
			  	Keyboard.Press(Keys.Tab);
				string b = CommonUtilLib.Util.Random(1, 1000);
				b = "Test Elipse " + b;
				Keyboard.Press(b, 1);
	   			string ODTValue = b;
	   			ValidateEllipse.ODT = ODTValue;
	   			Report.Info("Other Defined Type Entered = " + ODTValue);
			}
		}			
		
		//************************************************************************************//
		//*************************************Usage Value************************************//
		//************************************************************************************//
		
		public void Usage()
		{
			try
			{
				repo.Main_ACM_Ellipse_Ellipse.ListItemUsage.Click("CenterLeft");
				Keyboard.Press(Keys.Tab);
				Keyboard.Press("{LMenu down}{Down}{LMenu up}");
				Ranorex.List list2 = "//list[@processname='RealView']";
		        int AScount = list2.Items.Count;
		        Random ASvalue = new Random();
		        int ASnum = ASvalue.Next(0, (AScount-1));
				repo.ListRealView.Self.Items[ASnum].Select();
			    repo.ListRealView.Self.Items[ASnum].Click("center");
				Accessible accElement = new Accessible(repo.Main_ACM_Ellipse_Ellipse.ListItemUsage);  
			  	string UsageValue = accElement.Value;
			  	ValidateEllipse.Usage = UsageValue;
			  	Report.Info("Usage Value Entered = " + UsageValue);
			  	ValidateEllipse.Usage_OOR = false; 
			  	if (ASnum==0)
   				{
   					OtherDefinedUsageFlag = true;
   					ValidateEllipse.OtherDefinedUsageFlag = true;
   				}
				else
				{
	  				OtherDefinedUsageFlag = false;
	  				ValidateEllipse.OtherDefinedUsageFlag = false;
				}
			}
			catch (ArgumentOutOfRangeException e)
			{	
	   			Report.Debug("List Count Out of Range for Usage, List Item Will Not be Validated");
	   			Report.Debug(e.ToString());	
	   			ValidateEllipse.Usage_OOR = true;
			}
		}	
		
		//************************************************************************************//
		//*************************Enters Other Defined Usage Value***************************//
		//************************************************************************************//
		
		public void ODU()
		{
			if (OtherDefinedUsageFlag)
			{
				repo.Main_ACM_Ellipse_Ellipse.ListItemOther_Defined_Usage.Click("CenterLeft");
			  	Keyboard.Press(Keys.Tab);
				string b = CommonUtilLib.Util.Random(1, 1000);
				b = "Usage Test " + b;
				Keyboard.Press(b, 1);
	   			string ODUValue = b;
	   			ValidateEllipse.ODU = ODUValue;
	   			Report.Info("Other Defined Usage Entered = " + ODUValue);
			}
		}	
		
		//************************************************************************************//
		//*******************************Enters Overlay Name**********************************//
		//************************************************************************************//
		
		public void OverlayName()
		{
			repo.Main_ACM_Ellipse_Ellipse.ListItemOverlay_Name.Click("CenterLeft");
			Keyboard.Press(Keys.Tab);
			string b = CommonUtilLib.Util.Random(1, 1000);
			b = "Ellipse ACM " + b;
			Keyboard.Press(b);
	   		string OverlayNameValue = b;
	   		ValidateEllipse.OverlayName = OverlayNameValue;
	   		Report.Info("Overlay Name Entered = " + OverlayNameValue);			
		}			
		
		//************************************************************************************//
		//****************************Records Current Latitude********************************//
		//************************************************************************************//
		
		public void Latitude()
		{
			Accessible accElement1 = new Accessible(repo.Main_ACM_Ellipse_Ellipse.ListItemLatitude);  
	   		string LatitudeValue = accElement1.Value;
	   		ValidateEllipse.Latitude = LatitudeValue;
	   		Report.Info("Latitude Value Recorded = " + LatitudeValue);			
		}	
		
		//************************************************************************************//
		//****************************Records Current Latitude********************************//
		//************************************************************************************//
		
		public void Longitude()
		{
			Accessible accElement1 = new Accessible(repo.Main_ACM_Ellipse_Ellipse.ListItemLongitude);  
	   		string LongitudeValue = accElement1.Value;
	   		ValidateEllipse.Longitude = LongitudeValue;
	   		Report.Info("Longitude Value Recorded = " + LongitudeValue);			
		}			
		
		//************************************************************************************//
		//****************************Records Current UTM Value*******************************//
		//************************************************************************************//
		
		public void UTM()
		{
			Accessible accElement1 = new Accessible(repo.Main_ACM_Ellipse_Ellipse.ListItemUTM);  
	   		string UTMValue = accElement1.Value;
	   		ValidateEllipse.UTM = UTMValue;
	   		Report.Info("UTM Value Recorded = " + UTMValue);			
		}	
		
		//************************************************************************************//
		//***************************Records Current MGRS Value*******************************//
		//************************************************************************************//
		
		public void MGRS()
		{
			Accessible accElement1 = new Accessible(repo.Main_ACM_Ellipse_Ellipse.ListItemMGRS);  
	   		string MGRSValue = accElement1.Value;
	   		ValidateEllipse.MGRS = MGRSValue;
	   		Report.Info("MGRS Value Recorded = " + MGRSValue);			
		}

		//************************************************************************************//
		//***************************Enters Lower Altitude Value******************************//
		//************************************************************************************//
		
		public void LowerAltitude()
		{
			repo.Main_ACM_Ellipse_Ellipse.ListItemLower_Altitude__feet.Click("CenterLeft");
			Keyboard.Press(Keys.Tab);
			string b = CommonUtilLib.Util.Random(1, 10000);
			Keyboard.Press(b, 1);
	   		ValidateEllipse.LowAlt = b;
	   		LowAlt = b;
	   		Report.Info("Lower Altitude Value Entered = " + b);
		}		
		
		//************************************************************************************//
		//**********************Enters Lower Altitude Indicator Value*************************//
		//************************************************************************************//
		
		public void LowerAltitudeInd()
		{
			try
			{
				repo.Main_ACM_Ellipse_Ellipse.ListItemLower_Altitude_Indicator.Click("CenterLeft");
				Keyboard.Press(Keys.Tab);
				Keyboard.Press("{LMenu down}{Down}{LMenu up}");
				Ranorex.List list2 = "//list[@processname='RealView']";
		        int AScount = list2.Items.Count;
		        Random ASvalue = new Random();
				int ASnum = ASvalue.Next(0, (AScount-1));
				repo.ListRealView.Self.Items[ASnum].Select();
			    repo.ListRealView.Self.Items[ASnum].Click("center");
				Accessible accElement = new Accessible(repo.Main_ACM_Ellipse_Ellipse.ListItemLower_Altitude_Indicator);  
			  	string LowAltIndValue = accElement.Value;
			  	ValidateEllipse.LowAltInd = LowAltIndValue;
			  	Report.Info("Lower Altitude Indicator Value Entered = " + LowAltIndValue);
			  	ValidateEllipse.LowAltInd_OOR = false;
			}
			catch (ArgumentOutOfRangeException e)
			{	
	   			Report.Debug("List Count Out of Range for Lower Altitude Indicator List Item Will Not be Validated");
	   			Report.Debug(e.ToString());	
	   			ValidateEllipse.LowAltInd_OOR = true;
			}
		}	
		
		//************************************************************************************//
		//***************************Enters Upper Altitude Value******************************//
		//************************************************************************************//
		
		public void UpperAltitude()
		{
			repo.Main_ACM_Ellipse_Ellipse.ListItemUpper_Altitude__feet.Click("CenterLeft");
			Keyboard.Press(Keys.Tab);
			int a = Convert.ToInt32(LowAlt);
			string b = CommonUtilLib.Util.Random(a, 10000);
			Keyboard.Press(b, 1);
	   		ValidateEllipse.UpAlt = b;
	   		Report.Info("Upper Altitude Value Entered = " + b);
		}		
		
		//************************************************************************************//
		//**********************Enters Upper Altitude Indicator Value*************************//
		//************************************************************************************//
		
		public void UpperAltitudeInd()
		{
			try
			{
				repo.Main_ACM_Ellipse_Ellipse.ListItemUpper_Altitude_Indicator.Click("CenterLeft");
				Keyboard.Press(Keys.Tab);
				Keyboard.Press("{LMenu down}{Down}{LMenu up}");
				Ranorex.List list2 = "//list[@processname='RealView']";
		        int AScount = list2.Items.Count;
		        Random ASvalue = new Random();
				int ASnum = ASvalue.Next(0, (AScount-1));
				repo.ListRealView.Self.Items[ASnum].Select();
			    repo.ListRealView.Self.Items[ASnum].Click("center");
				Accessible accElement = new Accessible(repo.Main_ACM_Ellipse_Ellipse.ListItemUpper_Altitude_Indicator);  
			  	string UpAltIndValue = accElement.Value;
			  	ValidateEllipse.UpAltInd = UpAltIndValue;
			  	Report.Info("Upper Altitude Indicator Value Entered = " + UpAltIndValue);
			  	ValidateEllipse.UpAltInd_OOR = false;
			}
			catch (ArgumentOutOfRangeException e)
			{		
	   			Report.Debug("List Count Out of Range for Upper Altitude Indicator List Item Will Not be Validated");
	   			Report.Debug(e.ToString());	
	   			ValidateEllipse.UpAltInd_OOR = true;
			}
		}
		
		//************************************************************************************//
		//***********************Enters Transitional Altitude Value***************************//
		//************************************************************************************//
		
		public void TransAltitude()
		{
			repo.Main_ACM_Ellipse_Ellipse.ListItemTransitional_Altitude__f.Click("CenterLeft");
			Keyboard.Press(Keys.Tab);
			string b = CommonUtilLib.Util.Random(1, 10000);
			Keyboard.Press(b, 1);
	   		ValidateEllipse.TransAlt = b;
	   		Report.Info("Transitional Altitude Value Entered = " + b);
		}	
		
		//************************************************************************************//
		//***********************Enters Overlay Rotation Value***************************//
		//************************************************************************************//
		
		public void OverlayRotation()
		{
			repo.Main_ACM_Ellipse_Ellipse.ListItemOverlay_Rotation.Click("CenterLeft");
			Keyboard.Press(Keys.Tab);
			string b = CommonUtilLib.Util.Random(1, 360);
			Keyboard.Press(b, 1);
	   		ValidateEllipse.OverlayRotate = b;
	   		Report.Info("Overlay Rotation Value Entered = " + b);
		}			
		
		//************************************************************************************//
		//*************************Records Ellipse X Radius Value*****************************//
		//************************************************************************************//
		
		public void X_Radius()
		{
			Accessible accElement1 = new Accessible(repo.Main_ACM_Ellipse_Ellipse.ListItemEllipse_X_Radius__miles);  
	   		string X_RadiusValue = accElement1.Value;
	   		ValidateEllipse.X_Radius = X_RadiusValue;
	   		Report.Info("Ellipse X Radius Value Recorded = " + X_RadiusValue);			
		}			
		
		//************************************************************************************//
		//*************************Records Ellipse Y Radius Value*****************************//
		//************************************************************************************//
		
		public void Y_Radius()
		{
			Accessible accElement1 = new Accessible(repo.Main_ACM_Ellipse_Ellipse.ListItemEllipse_Y_Radius__miles);  
	   		string Y_RadiusValue = accElement1.Value;
	   		ValidateEllipse.Y_Radius = Y_RadiusValue;
	   		Report.Info("Ellipse Y Radius Value Recorded = " + Y_RadiusValue);			
		}				
		
		//************************************************************************************//
		//************************Records Current Start Time Value****************************//
		//************************************************************************************//
		
		public void StartTime()
		{
			Report.Info("Mouse Left Click Close item 'Main_ACM_Ellipse_Ellipse.ListItemStart_Time' at 6;8.");
			repo.Main_ACM_Ellipse_Ellipse.ListItemStart_Time.Click("6;8");
			
			Report.Info("Mouse Left Click item 'Main_ACM_Ellipse_Ellipse.ListItemTime1' at CenterLeft.");
			repo.Main_ACM_Ellipse_Ellipse.ListItemTime1.Click("CenterLeft");
			
			Keyboard.Press(Keys.Tab);
			string hr = CommonUtilLib.Util.Random(1, 24);
			hr = hr.ToString().PadLeft(2, '0');
			string mn = CommonUtilLib.Util.Random(1, 60);
			mn = mn.ToString().PadLeft(2, '0');
			string time = hr + mn;
			Keyboard.Press(time);
			Keyboard.Press(Keys.Tab);			
			
			Accessible accElement1 = new Accessible(repo.Main_ACM_Ellipse_Ellipse.ListItemStart_Time);
	   		string StartTimeValue = accElement1.Value;
	   		ValidateEllipse.StartTime = StartTimeValue;
	   		Report.Info("Start Time Value Recorded = " + StartTimeValue);	
	   		
	   		Report.Info("Mouse Left Click Open item 'Main_ACM_Ellipse_Ellipse.ListItemStart_Time' at 6;8.");
			repo.Main_ACM_Ellipse_Ellipse.ListItemStart_Time.Click("6;8");
		}			
		
		//************************************************************************************//
		//*************************Records Current End Time Value*****************************//
		//************************************************************************************//
		
		public void EndTime()
		{
			Report.Info("Mouse Left Click Open item 'Main_ACM_Ellipse_Ellipse.ListItemEnd_Time' at 6;8.");
			repo.Main_ACM_Ellipse_Ellipse.ListItemEnd_Time.Click("6;8");
			
			Report.Info("Mouse Left Click item 'Main_ACM_Ellipse_Ellipse.ListItemTime1' at CenterLeft.");
			repo.Main_ACM_Ellipse_Ellipse.ListItemTime1.Click("CenterLeft");
			
			Keyboard.Press(Keys.Tab);
			string hr = CommonUtilLib.Util.Random(1, 24);
			hr = hr.ToString().PadLeft(2, '0');
			string mn = CommonUtilLib.Util.Random(1, 60);
			mn = mn.ToString().PadLeft(2, '0');
			string time = hr + mn;
			Keyboard.Press(time);
			Keyboard.Press(Keys.Tab);	
			
			Accessible accElement1 = new Accessible(repo.Main_ACM_Ellipse_Ellipse.ListItemEnd_Time);  
	   		string EndTimeValue = accElement1.Value;
	   		ValidateEllipse.EndTime = EndTimeValue;
	   		Report.Info("End Time Value Recorded = " + EndTimeValue);	
	   		
	   		Report.Info("Mouse Left Click Close item 'Main_ACM_Ellipse_Ellipse.ListItemEnd_Time' at 6;8.");
			repo.Main_ACM_Ellipse_Ellipse.ListItemEnd_Time.Click("6;8");
		}		
		
		//************************************************************************************//
		//*******************Enters Operational Control Authority Value***********************//
		//************************************************************************************//
		
		public void OCA()
		{
				repo.Main_ACM_Ellipse_Ellipse.ListItemOperational_Control_Auth.Click("CenterLeft");
			  	Keyboard.Press(Keys.Tab);
				string b = CommonUtilLib.Util.Random(1, 1000);
				b = "Test Authority " + b;
				Keyboard.Press(b, 1);
	   			string OCAValue = b;
	   			ValidateEllipse.OCA = OCAValue;
	   			Report.Info("Operational Control Authority Entered = " + OCAValue);
		}		
		
		//************************************************************************************//
		//*******************************Frequency Switch Value*******************************//
		//************************************************************************************//
		
		public void FreqSwitch()
		{
			try
			{
				repo.Main_ACM_Ellipse_Ellipse.ListItemFrequency_Switch.Click("CenterLeft");
				Keyboard.Press(Keys.Tab);
				Keyboard.Press("{LMenu down}{Down}{LMenu up}");
				Ranorex.List list2 = "//list[@processname='RealView']";
		        int AScount = list2.Items.Count;
		        Random ASvalue = new Random();
				int ASnum = ASvalue.Next(1, (AScount-1));
				repo.ListRealView.Self.Items[ASnum].Select();
			    repo.ListRealView.Self.Items[ASnum].Click("center");
				Accessible accElement = new Accessible(repo.Main_ACM_Ellipse_Ellipse.ListItemFrequency_Switch);  
			  	string FreqSwitchValue = accElement.Value;
			  	ValidateEllipse.FreqSwitch = FreqSwitchValue;
			  	Report.Info("frequency Switch Value Entered = " + FreqSwitchValue);
			  	ValidateEllipse.FreqSwitch_OOR = false;
			  	if (ASnum==1)
   				{
   					SpecificRadioFreqFlag = true;
   					ValidateEllipse.SpecificRadioFreqFlag = true;	   						 
   				}
				else
				{
	  				SpecificRadioFreqFlag = false;
	  				ValidateEllipse.SpecificRadioFreqFlag = false;
				}
			}
			catch (ArgumentOutOfRangeException e)
			{								   			
	   			Report.Debug("List Count Out of Range for Frequency Swith, List Item Will Not be Validated");
	   			Report.Debug(e.ToString());	
	   			ValidateEllipse.FreqSwitch_OOR = true;
			}
		}	
		
		//************************************************************************************//
		//*************************Enters Frequency Designator Value**************************//
		//************************************************************************************//
		
		public void FreqDes()
		{
			if (!SpecificRadioFreqFlag)
			{
				repo.Main_ACM_Ellipse_Ellipse.ListItemFrequency_Designator.Click("CenterLeft");
			  	Keyboard.Press(Keys.Tab);
				string b = CommonUtilLib.Util.Random(1, 1000);
				b = "Frequency Designator Test " + b;
				Keyboard.Press(b, 1);
	   			string FreqDesValue = b;
	   			ValidateEllipse.FreqDes = FreqDesValue;
	   			Report.Info("Frequency Designator Value Entered = " + FreqDesValue);
			}
		}			
		
		//************************************************************************************//
		//****************************Enters Radio Frequency Values***************************//
		//************************************************************************************//
		
		public void RadioFreq()
		{
			if (SpecificRadioFreqFlag)
			{				
				// Frequency 1 Values
				repo.Main_ACM_Ellipse_Ellipse.ListItemRadio_Frequency_1.Click("CenterLeft");
			  	Keyboard.Press(Keys.Tab);
				string aa = CommonUtilLib.Util.Random(1, 1000);
				Keyboard.Press(aa, 1);
	   			string Freq1Value = aa;
	   			ValidateEllipse.Freq1 = Freq1Value;
	   			Report.Info("Frequency 1 Value Entered = " + Freq1Value);
	   			
				try
				{
					repo.Main_ACM_Ellipse_Ellipse.ListItemRadio_Frequency_1_Units.Click("CenterLeft");
					Keyboard.Press(Keys.Tab);
					Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List list2 = "//list[@processname='RealView']";
			        int AScount = list2.Items.Count;
			        Random ASvalue = new Random();
					int ASnum = ASvalue.Next(1, (AScount-1));
					repo.ListRealView.Self.Items[ASnum].Select();
				    repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.Main_ACM_Ellipse_Ellipse.ListItemRadio_Frequency_1_Units);  
				  	string Freq1UnitsValue = accElement.Value;
				  	ValidateEllipse.Freq1Units = Freq1UnitsValue;
				  	Report.Info("Frequency 1 Units Value Entered = " + Freq1UnitsValue);
				  	ValidateEllipse.Freq1U_OOR = false;
				}
				catch (ArgumentOutOfRangeException e)
				{		
		   			Report.Debug("List Count Out of Range for Frequency 1 Units, List Item Will Not be Validated");
		   			Report.Debug(e.ToString());	
		   			ValidateEllipse.Freq1U_OOR = true;
				}   							
				
				// Frequency 2 Values
				repo.Main_ACM_Ellipse_Ellipse.ListItemRadio_Frequency_2.Click("CenterLeft");
			  	Keyboard.Press(Keys.Tab);
				string bb = CommonUtilLib.Util.Random(1, 1000);
				Keyboard.Press(bb, 1);
	   			string Freq2Value = bb;
	   			ValidateEllipse.Freq2 = Freq2Value;
	   			Report.Info("Frequency 2 Value Entered = " + Freq2Value);
	   			
				try
				{
					repo.Main_ACM_Ellipse_Ellipse.ListItemRadio_Frequency_2_Units.Click("CenterLeft");
					Keyboard.Press(Keys.Tab);
					Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List list2 = "//list[@processname='RealView']";
			        int AScount = list2.Items.Count;
			        Random ASvalue = new Random();
					int ASnum = ASvalue.Next(1, (AScount-1));
					repo.ListRealView.Self.Items[ASnum].Select();
				    repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.Main_ACM_Ellipse_Ellipse.ListItemRadio_Frequency_2_Units);  
				  	string Freq2UnitsValue = accElement.Value;
				  	ValidateEllipse.Freq2Units = Freq2UnitsValue;
				  	Report.Info("Frequency 2 Units Value Entered = " + Freq2UnitsValue);
				  	ValidateEllipse.Freq2U_OOR = false;
				}
				catch (ArgumentOutOfRangeException e)
				{	
					Report.Debug("List Count Out of Range for Frequency 2 Units, List Item Will Not be Validated");
		   			Report.Debug(e.ToString());	
		   			ValidateEllipse.Freq2U_OOR = true;
				}		
				
				// Frequency 3 Values
				repo.Main_ACM_Ellipse_Ellipse.ListItemRadio_Frequency_3.Click("CenterLeft");
			  	Keyboard.Press(Keys.Tab);
				string cc = CommonUtilLib.Util.Random(1, 1000);
				Keyboard.Press(cc, 1);
	   			string Freq3Value = cc;
	   			ValidateEllipse.Freq3 = Freq3Value;
	   			Report.Info("Frequency 3 Value Entered = " + Freq3Value);
	   			
				try
				{
					repo.Main_ACM_Ellipse_Ellipse.ListItemRadio_Frequency_3_Units.Click("CenterLeft");
					Keyboard.Press(Keys.Tab);
					Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List list2 = "//list[@processname='RealView']";
			        int AScount = list2.Items.Count;
			        Random ASvalue = new Random();
					int ASnum = ASvalue.Next(1, (AScount-1));
					repo.ListRealView.Self.Items[ASnum].Select();
				    repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.Main_ACM_Ellipse_Ellipse.ListItemRadio_Frequency_3_Units);  
				  	string Freq3UnitsValue = accElement.Value;
				  	ValidateEllipse.Freq3Units = Freq3UnitsValue;
				  	Report.Info("Frequency 3 Units Value Entered = " + Freq3UnitsValue);
				  	ValidateEllipse.Freq3U_OOR = false;
				}
				catch (ArgumentOutOfRangeException e)
				{		
		   			Report.Debug("List Count Out of Range for Frequency 3 Units, List Item Will Not be Validated");
		   			Report.Debug(e.ToString());	
		   			ValidateEllipse.Freq3U_OOR = true;
				}				
				
				// Frequency 4 Values
				repo.Main_ACM_Ellipse_Ellipse.ListItemRadio_Frequency_4.Click("CenterLeft");
			  	Keyboard.Press(Keys.Tab);
				string dd = CommonUtilLib.Util.Random(1, 1000);
				Keyboard.Press(dd, 1);
	   			string Freq4Value = dd;
	   			ValidateEllipse.Freq4 = Freq4Value;
	   			Report.Info("Frequency 4 Value Entered = " + Freq4Value);
	   			
				try
				{
					repo.Main_ACM_Ellipse_Ellipse.ListItemRadio_Frequency_4_Units.Click("CenterLeft");
					Keyboard.Press(Keys.Tab);
					Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List list2 = "//list[@processname='RealView']";
			        int AScount = list2.Items.Count;
			        Random ASvalue = new Random();
					int ASnum = ASvalue.Next(1, (AScount-1));
					repo.ListRealView.Self.Items[ASnum].Select();
				    repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.Main_ACM_Ellipse_Ellipse.ListItemRadio_Frequency_4_Units);  
				  	string Freq4UnitsValue = accElement.Value;
				  	ValidateEllipse.Freq4Units = Freq4UnitsValue;
				  	Report.Info("Frequency 4 Units Value Entered = " + Freq4UnitsValue);
				  	ValidateEllipse.Freq4U_OOR = false;
				}
				catch (ArgumentOutOfRangeException e)
				{	
		   			Report.Debug("List Count Out of Range for Frequency 4 Units, List Item Will Not be Validated");
		   			Report.Debug(e.ToString());	
		   			ValidateEllipse.Freq4U_OOR = true;
				}				
				
				// Frequency 5 Values
				repo.Main_ACM_Ellipse_Ellipse.ListItemRadio_Frequency_5.Click("CenterLeft");
			  	Keyboard.Press(Keys.Tab);
				string ff = CommonUtilLib.Util.Random(1, 1000);
				Keyboard.Press(ff);
	   			string Freq5Value = ff;
	   			ValidateEllipse.Freq5 = Freq5Value;
	   			Report.Info("Frequency 5 Value Entered = " + Freq5Value);
	   			
				try
				{
					repo.Main_ACM_Ellipse_Ellipse.ListItemRadio_Frequency_5_Units.Click("CenterLeft");
					Keyboard.Press(Keys.Tab);
					Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List list2 = "//list[@processname='RealView']";
			        int AScount = list2.Items.Count;
			        Random ASvalue = new Random();
					int ASnum = ASvalue.Next(1, (AScount-1));
					repo.ListRealView.Self.Items[ASnum].Select();
				    repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement = new Accessible(repo.Main_ACM_Ellipse_Ellipse.ListItemRadio_Frequency_5_Units);  
				  	string Freq5UnitsValue = accElement.Value;
				  	ValidateEllipse.Freq5Units = Freq5UnitsValue;
				  	Report.Info("Frequency 5 Units Value Entered = " + Freq5UnitsValue);
				  	ValidateEllipse.Freq5U_OOR = false;
				}
				catch (ArgumentOutOfRangeException e)
				{	
		   			Report.Debug("List Count Out of Range for Frequency 5 Units, List Item Will Not be Validated");
		   			Report.Debug(e.ToString());	
		   			ValidateEllipse.Freq5U_OOR = true;
				}	   			
			}
		}	
		
		//************************************************************************************//
		//**************************Enters Amplification Text Value***************************//
		//************************************************************************************//
		
		public void AmpText()
		{
			repo.Main_ACM_Ellipse_Ellipse.ListItemAmplification_Text.Click("CenterLeft");
			Keyboard.Press(Keys.Tab);
			string b = CommonUtilLib.Util.Random(1, 1000);
			b = "Amplification Text " + b;
			Keyboard.Press(b, 1);
	   		string AmpValue = b;
	   		ValidateEllipse.Amp = AmpValue;
	   		Report.Info("Amplification Text Entered = " + AmpValue);
		}			
				
		//************************************************************************************//
		//**************************Enters Gentext Indicator Value****************************//
		//************************************************************************************//
		
		public void GentextInd()
		{
			repo.Main_ACM_Ellipse_Ellipse.ListItemGentext_Indicator.Click("CenterLeft");
			Keyboard.Press(Keys.Tab);
			string b = CommonUtilLib.Util.Random(1, 1000);
			b = "Gentext Indicator " + b;
			Keyboard.Press(b, 1);
	   		string GenIndValue = b;
	   		ValidateEllipse.GenInd = GenIndValue;
	   		Report.Info("Gentext Indicator Entered = " + GenIndValue);
		}			
		
		//************************************************************************************//
		//**************************Enters Gentext Free Text Value****************************//
		//************************************************************************************//
		
		public void GentextFree()
		{
			repo.Main_ACM_Ellipse_Ellipse.ListItemGentext_Free_Text.Click("CenterLeft");
			Keyboard.Press(Keys.Tab);
			string b = CommonUtilLib.Util.Random(1, 1000);
			b = "Gentext Free Text " + b;
			Keyboard.Press(b, 1);
	   		string GenFreeValue = b;
	   		ValidateEllipse.GenFree = GenFreeValue;
	   		Report.Info("Gentext Free Text Entered = " + GenFreeValue);
		}		
		
				
		//************************************************************************************//
		//******************Pages Up if General List Item is Not Visible**********************//
		//************************************************************************************//
		
		public void Mouse_DoubleClick_ListItemGeneral()
		{
			Report.Info("Mouse Left DoubleClick item 'Main_ACM_Ellipse_Ellipse.ListItemGeneral' at CenterLeft.");
			
			if (repo.Main_ACM_Ellipse_Ellipse.ListItemGeneral.Visible == true)
			{
				repo.Main_ACM_Ellipse_Ellipse.ListItemGeneral.DoubleClick(Location.CenterLeft);
			}
			else
			{
				Keyboard.Press("{Tab}{PageUp}{PageUp}");
				repo.Main_ACM_Ellipse_Ellipse.ListItemGeneral.DoubleClick(Location.CenterLeft);
			}			
		}	
		
		//************************************************************************************//
		//*********************************Enters File Name***********************************//
		//************************************************************************************//
		
		public void File()
		{
				repo.Main_ACM_Ellipse_Ellipse.ListItemFile_Name.Click("CenterLeft");
			  	Keyboard.Press(Keys.Tab);
				string b = CommonUtilLib.Util.Random(1, 1000);
				b = "File Name " + b;
				Keyboard.Press(b, 1);
	   			string FileValue = b;
	   			ValidateEllipse.File = FileValue;
	   			Report.Info("File Name Entered = " + FileValue);
		}			
		
		//************************************************************************************//
		//*******************************Enters ACO ID Value**********************************//
		//************************************************************************************//
		
		public void ACO()
		{
				repo.Main_ACM_Ellipse_Ellipse.ListItemACO_ID.Click("CenterLeft");
			  	Keyboard.Press(Keys.Tab);
			  	string b = CommonUtilLib.Util.Random(1, 1000);
				Keyboard.Press(b, 1);
	   			string ACOValue = b;
	   			ValidateEllipse.ACO = ACOValue;
	   			Report.Info("ACO ID Value Entered = " + ACOValue);
		}	
		
		//************************************************************************************//
		//*******************************Operation Codeword***********************************//
		//************************************************************************************//
		
		public void OpCode()
		{
				repo.Main_ACM_Ellipse_Ellipse.ListItemOperation_Codeword.Click("CenterLeft");
			  	Keyboard.Press(Keys.Tab);
			  	string b = CommonUtilLib.Util.Random(1, 1000);
			  	b = "Operation Codeword " + b;
				Keyboard.Press(b, 1);
	   			string OPValue = b;
	   			ValidateEllipse.OP = OPValue;
	   			Report.Info("Operation Codeword Entered = " + OPValue);
		}		
		
		//************************************************************************************//
		//******************************Plan Originator/Number********************************//
		//************************************************************************************//
		
		public void PlanNum()
		{
				repo.Main_ACM_Ellipse_Ellipse.ListItemPlan_Originator_Number.Click("CenterLeft");
			  	Keyboard.Press(Keys.Tab);
			  	string b = CommonUtilLib.Util.Random(1, 1000);
			  	b = "Plan Originator/Number " + b;
				Keyboard.Press(b, 1);
	   			string PlanNumValue = b;
	   			ValidateEllipse.PlanNum = PlanNumValue;
	   			Report.Info("Plan Originator/Number Entered = " + PlanNumValue);
		}			
		
		//************************************************************************************//
		//******************************Primary Option Nickname*******************************//
		//************************************************************************************//
		
		public void PrimaryOpt()
		{
				repo.Main_ACM_Ellipse_Ellipse.ListItemPrimary_Option_Nickname.Click("CenterLeft");
			  	Keyboard.Press(Keys.Tab);
			  	string b = CommonUtilLib.Util.Random(1, 1000);
			  	b = "Primary Option Nickname " + b;
				Keyboard.Press(b, 1);
	   			string PriOptValue = b;
	   			ValidateEllipse.PriOpt = PriOptValue;
	   			Report.Info("Primary Option Nickname Entered = " + PriOptValue);
		}			
		
		//************************************************************************************//
		//*****************************Secondary Option Nickname******************************//
		//************************************************************************************//
		
		public void SecondaryOpt()
		{
				repo.Main_ACM_Ellipse_Ellipse.ListItemSecondary_Option_Nicknam.Click("CenterLeft");
			  	Keyboard.Press(Keys.Tab);
			  	string b = CommonUtilLib.Util.Random(1, 1000);
			  	b = "Secondary Option Nickname " + b;
				Keyboard.Press(b, 1);
	   			string SecOptValue = b;
	   			ValidateEllipse.SecOpt = SecOptValue;
	   			Report.Info("Secondary Option Nickname Entered = " + SecOptValue);
		}			
		
		//************************************************************************************//
		//*********************************Exercise Nickname**********************************//
		//************************************************************************************//
		
		public void Exercise()
		{
				repo.Main_ACM_Ellipse_Ellipse.ListItemExercise_Nickname.Click("CenterLeft");
			  	Keyboard.Press(Keys.Tab);
			  	string b = CommonUtilLib.Util.Random(1, 1000);
			  	b = "Exercise Nickname " + b;
				Keyboard.Press(b, 1);
	   			string ExerciseValue = b;
	   			ValidateEllipse.Exercise = ExerciseValue;
	   			Report.Info("Exercise Nickname Entered = " + ExerciseValue);
		}			
		
		//************************************************************************************//
		//*********************************Exercise ID Value**********************************//
		//************************************************************************************//
		
		public void ExerciseID()
		{
				repo.Main_ACM_Ellipse_Ellipse.ListItemExercise_ID.Click("CenterLeft");
			  	Keyboard.Press(Keys.Tab);
			  	string b = CommonUtilLib.Util.Random(1, 1000);
				Keyboard.Press(b, 1);
	   			string ExerciseIDValue = b;
	   			ValidateEllipse.ExerciseID = ExerciseIDValue;
	   			Report.Info("Exercise ID Entered = " + ExerciseIDValue);
		}	
		
		//************************************************************************************//
		//**************************Enters ACO Gentext Indicator Value****************************//
		//************************************************************************************//
		
		public void ACOGentextInd()
		{
			repo.Main_ACM_Ellipse_Ellipse.ListItemACO_Gentext_Indicator.Click("CenterLeft");
			Keyboard.Press(Keys.Tab);
			string b = CommonUtilLib.Util.Random(1, 1000);
			b = "ACO Gentext Indicator " + b;
			Keyboard.Press(b, 1);
	   		string ACOGenIndValue = b;
	   		ValidateEllipse.ACOGenInd = ACOGenIndValue;
	   		Report.Info("ACO Gentext Indicator Entered = " + ACOGenIndValue);
		}			
		
		//************************************************************************************//
		//**************************Enters Gentext Free Text Value****************************//
		//************************************************************************************//
		
		public void ACOGentextFree()
		{
			repo.Main_ACM_Ellipse_Ellipse.ListItemACO_Gentext_Free_Text.Click("CenterLeft");
			Keyboard.Press(Keys.Tab);
			string b = CommonUtilLib.Util.Random(1, 1000);
			b = "ACO Gentext Free Text " + b;
			Keyboard.Press(b, 1);
	   		string ACOGenFreeValue = b;
	   		ValidateEllipse.ACOGenFree = ACOGenFreeValue;
	   		Report.Info("ACO Gentext Free Text Entered = " + ACOGenFreeValue);
		}		
		
		//************************************************************************************//
		//***********************Records Current ACO Start Time Value*************************//
		//************************************************************************************//
		
		public void ACOStartTime()
		{
			Report.Info("Mouse Left Click item 'Main_ACM_Ellipse_Ellipse.ListItemACO_Start_Time' at 6;8.");
			repo.Main_ACM_Ellipse_Ellipse.ListItemACO_Start_Time.Click("6;8");
			
			Report.Info("Mouse Left Click item 'Main_ACM_Ellipse_Ellipse.ListItemTime1' at CenterLeft.");
			repo.Main_ACM_Ellipse_Ellipse.ListItemTime1.Click("CenterLeft");
			
			Keyboard.Press(Keys.Tab);
			string hr = CommonUtilLib.Util.Random(1, 24);
			hr = hr.ToString().PadLeft(2, '0');
			string mn = CommonUtilLib.Util.Random(1, 60);
			mn = mn.ToString().PadLeft(2, '0');
			string time = hr + mn;
			Keyboard.Press(time);
			Keyboard.Press(Keys.Tab);	
			
			Accessible accElement1 = new Accessible(repo.Main_ACM_Ellipse_Ellipse.ListItemACO_Start_Time);
	   		string ACOStartTimeValue = accElement1.Value;
	   		ValidateEllipse.ACOStartTime = ACOStartTimeValue;
	   		Report.Info("ACO Start Time Value Recorded = " + ACOStartTimeValue);			
		}			
		
		//************************************************************************************//
		//***********************Records Current ACO End Time Value***************************//
		//************************************************************************************//
		
		public void ACOEndTime()
		{
			Report.Info("Mouse Left Click item 'Main_ACM_Ellipse_Ellipse.ListItemACO_End_Time' at 6;8.");
			repo.Main_ACM_Ellipse_Ellipse.ListItemACO_End_Time.Click("6;8");
			
			Report.Info("Mouse Left Click item 'Main_ACM_Ellipse_Ellipse.ListItemTime2' at CenterLeft.");
			repo.Main_ACM_Ellipse_Ellipse.ListItemTime2.Click("CenterLeft");
			
			Keyboard.Press(Keys.Tab);
			string hr = CommonUtilLib.Util.Random(1, 24);
			hr = hr.ToString().PadLeft(2, '0');
			string mn = CommonUtilLib.Util.Random(1, 60);
			mn = mn.ToString().PadLeft(2, '0');
			string time = hr + mn;
			Keyboard.Press(time);
			Keyboard.Press(Keys.Tab);	
			
			Accessible accElement1 = new Accessible(repo.Main_ACM_Ellipse_Ellipse.ListItemACO_End_Time);  
	   		string ACOEndTimeValue = accElement1.Value;
	   		ValidateEllipse.ACOEndTime = ACOEndTimeValue;
	   		Report.Info("ACO End Time Value Recorded = " + ACOEndTimeValue);			
		}			
		
		//************************************************************************************//
		//*************************************Fill Style*************************************//
		//************************************************************************************//
		
		public void FillStyle()
		{
			try
			{
				repo.Main_ACM_Ellipse_Ellipse.ListItemFill_Style.Click("CenterLeft");
				Keyboard.Press(Keys.Tab);
				Keyboard.Press("{LMenu down}{Down}{LMenu up}");
				Ranorex.List list2 = "//list[@processname='RealView']";
		        int AScount = list2.Items.Count;
		        Random ASvalue = new Random();
				int ASnum = ASvalue.Next(0, (AScount-1));
				repo.ListRealView.Self.Items[ASnum].Select();
			    repo.ListRealView.Self.Items[ASnum].Click("center");
				Accessible accElement = new Accessible(repo.Main_ACM_Ellipse_Ellipse.ListItemFill_Style);  
			  	string FillStyleValue = accElement.Value;
			  	ValidateEllipse.FillStyle = FillStyleValue;
			  	Report.Info("Fill Style Selected = " + FillStyleValue);
			  	ValidateEllipse.FillStyle_OOR = false;
			}
			catch (ArgumentOutOfRangeException e)
			{	
	   			Report.Debug("List Count Out of Range for Fill Style, List Item Will Not be Validated");
	   			Report.Debug(e.ToString());	
	   			ValidateEllipse.FillStyle_OOR = true;
			}
		}	
		
		//************************************************************************************//
		//*************************************Fill Color*************************************//
		//************************************************************************************//
		
		public void FillColor()
		{
			repo.Main_ACM_Ellipse_Ellipse.ListItemFill_Color.Click("CenterLeft");
			Accessible accElement1 = new Accessible(repo.Main_ACM_Ellipse_Ellipse.ListItemFill_Color);
	   		string FillColorValue = accElement1.Value;
	   		ValidateEllipse.FillColor = FillColorValue;
	   		Report.Info("Fill Color Value Recorded = " + FillColorValue);
		}
					
		//************************************************************************************//
		//*************************************Edge Style*************************************//
		//************************************************************************************//
		
		public void EdgeStyle()
		{
			try
			{
				repo.Main_ACM_Ellipse_Ellipse.ListItemEdge_Style.Click("CenterLeft");
				Keyboard.Press(Keys.Tab);
				Keyboard.Press("{LMenu down}{Down}{LMenu up}");
				Ranorex.List list2 = "//list[@processname='RealView']";
		        int AScount = list2.Items.Count;
		        Random ASvalue = new Random();
				int ASnum = ASvalue.Next(0, (AScount-1));
				repo.ListRealView.Self.Items[ASnum].Select();
			    repo.ListRealView.Self.Items[ASnum].Click("center");
				Accessible accElement = new Accessible(repo.Main_ACM_Ellipse_Ellipse.ListItemEdge_Style);  
			  	string EdgeStyleValue = accElement.Value;
			  	ValidateEllipse.EdgeStyle = EdgeStyleValue;
			  	Report.Info("Edge Style Selected = " + EdgeStyleValue);
			  	ValidateEllipse.EdgeStyle_OOR = false;
			}
			catch (ArgumentOutOfRangeException e)
			{	
	   			Report.Debug("List Count Out of Range for Edge Style, List Item Will Not be Validated");
	   			Report.Debug(e.ToString());	
	   			ValidateEllipse.EdgeStyle_OOR = true;
			}
		}		

		//************************************************************************************//
		//*************************************Edge Color*************************************//
		//************************************************************************************//
		
		public void EdgeColor()
		{
			repo.Main_ACM_Ellipse_Ellipse.ListItemEdge_Color.Click("CenterLeft");
			Accessible accElement1 = new Accessible(repo.Main_ACM_Ellipse_Ellipse.ListItemEdge_Color);
	   		string EdgeColorValue = accElement1.Value;
	   		ValidateEllipse.EdgeColor = EdgeColorValue;
	   		Report.Info("Edge Color Value Recorded = " + EdgeColorValue);
		}	
		
		//************************************************************************************//
		//***************************Enters Edge Thickness value******************************//
		//************************************************************************************//
		
		public void EdgeThick()
		{
			repo.Main_ACM_Ellipse_Ellipse.ListItemEdge_Thickness.Click("CenterLeft");
			Keyboard.Press(Keys.Tab);
			string b = CommonUtilLib.Util.Random(1, 11);
			Keyboard.Press(b, 1);
	   		string EdgeThickValue = b;
	   		ValidateEllipse.EdgeThick = EdgeThickValue;
	   		Report.Info("Edge Thickness Value Entered = " + EdgeThickValue);
		}			

		//************************************************************************************//
		//********************************Edge Thickness Units********************************//
		//************************************************************************************//
		
		public void EdgeThickUnits()
		{
			try
			{
				repo.Main_ACM_Ellipse_Ellipse.ListItemEdge_Thickness_Units.Click("CenterLeft");
				Keyboard.Press(Keys.Tab);
				Keyboard.Press("{LMenu down}{Down}{LMenu up}");
				Ranorex.List list2 = "//list[@processname='RealView']";
		        int AScount = list2.Items.Count;
		        Random ASvalue = new Random();
				int ASnum = ASvalue.Next(0, (AScount-1));
				repo.ListRealView.Self.Items[ASnum].Select();
			    repo.ListRealView.Self.Items[ASnum].Click("center");
				Accessible accElement = new Accessible(repo.Main_ACM_Ellipse_Ellipse.ListItemEdge_Thickness_Units);  
			  	string EdgeThickUnitsValue = accElement.Value;
			  	ValidateEllipse.EdgeThickUnits = EdgeThickUnitsValue;
			  	Report.Info("Edge Thickness Units Selected = " + EdgeThickUnitsValue);
			  	ValidateEllipse.EdgeThickUnits_OOR = false;
			}
			catch (ArgumentOutOfRangeException e)
			{		
	   			Report.Debug("List Count Out of Range for Edge Thickness Units, List Item Will Not be Validated");
	   			Report.Debug(e.ToString());	
	   			ValidateEllipse.EdgeThickUnits_OOR = true;
			}
		}	
		
		//************************************************************************************//
		//*****************************Display Overlay Name in 3D*****************************//
		//************************************************************************************//
		
		public void Display3D()
		{
			try
			{
				repo.Main_ACM_Ellipse_Ellipse.ListItemDisplay_Overlay_Name_In_.Click("CenterLeft");
				Keyboard.Press(Keys.Tab);
				Keyboard.Press("{LMenu down}{Down}{LMenu up}");
				Ranorex.List list2 = "//list[@processname='RealView']";
		        int AScount = list2.Items.Count;
		        Random ASvalue = new Random();
				int ASnum = ASvalue.Next(0, (AScount-1));
				repo.ListRealView.Self.Items[ASnum].Select();
			    repo.ListRealView.Self.Items[ASnum].Click("center");
				Accessible accElement = new Accessible(repo.Main_ACM_Ellipse_Ellipse.ListItemDisplay_Overlay_Name_In_);  
			  	string Display3DValue = accElement.Value;
			  	ValidateEllipse.Display3D = Display3DValue;
			  	Report.Info("Display Overlay Name in 3D Selected = " + Display3DValue);
			  	ValidateEllipse.Display3D_OOR = false;
			}
			catch (ArgumentOutOfRangeException e)
			{	
	   			Report.Debug("List Count Out of Range for Display Overlay Name in 3D, List Item Will Not be Validated");
	   			Report.Debug(e.ToString());	
	   			ValidateEllipse.Display3D_OOR = true;
			}
		}		
		
		//************************************************************************************//
		//**************************************Read Only*************************************//
		//************************************************************************************//
		
		public void ReadOnly()
		{
			try
			{
				repo.Main_ACM_Ellipse_Ellipse.ListItemRead_Only.Click("CenterLeft");
				Keyboard.Press("{LMenu down}{Down}{LMenu up}");
				Ranorex.List list2 = "//list[@processname='RealView']";
		        int AScount = list2.Items.Count;
		        Random ASvalue = new Random();
				int ASnum = ASvalue.Next(0, (AScount-1));
				repo.ListRealView.Self.Items[ASnum].Select();
			    repo.ListRealView.Self.Items[ASnum].Click("center");
				Accessible accElement = new Accessible(repo.Main_ACM_Ellipse_Ellipse.ListItemRead_Only);  
			  	string ReadOnlyValue = accElement.Value;
			  	ValidateEllipse.ReadOnly = ReadOnlyValue;
			  	Report.Info("Read Only Value Selected = " + ReadOnlyValue);
			  	ValidateEllipse.ReadOnly_OOR = false;
			}
			catch (ArgumentOutOfRangeException e)
			{		
	   			Report.Debug("List Count Out of Range for Read Only, List Item Will Not be Validated");
	   			Report.Debug(e.ToString());	
	   			ValidateEllipse.ReadOnly_OOR = true;
			}
		}

		private void Init()
		{
			// Your recording specific initialization code goes here.
		}
	}
}
