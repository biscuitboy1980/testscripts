///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using System.Windows.Forms;

using Ranorex;
using Ranorex.Core;

namespace TacViewLib.UISpecific.Overlays
{
	/// <summary>
	/// The ValidateEllipse recording.
	/// </summary>
	public partial class ValidateEllipse
	{		
		//ACM Type and Usage
		public string ACMType;	
		public bool OtherDefinedTypeFlag;
		public string ODT;
		public string Usage;	
		public bool OtherDefinedUsageFlag;
		public string ODU;
		
		//General
		public string OverlayName;
		public string Latitude;
		public string Longitude;
		public string UTM;
		public string MGRS;
		public string LowAlt;
		public string LowAltInd;
		public string UpAlt;
		public string UpAltInd;
		public string TransAlt;
		public string OverlayRotate;
		public string X_Radius;
		public string Y_Radius;		
		public string StartTime;
		public string EndTime;
		public string OCA;
		public string FreqSwitch;
		public bool SpecificRadioFreqFlag;
		public string FreqDes;
		public string Amp;
		public string GenInd;
		public string GenFree;
		public string Freq1;
		public string Freq1Units;
		public string Freq2;
		public string Freq2Units;
		public string Freq3;
		public string Freq3Units;
		public string Freq4;
		public string Freq4Units;	
		public string Freq5;
		public string Freq5Units;	
		
		//ACO Info
		public string File;
		public string ACO;
		public string OP;
		public string PlanNum;
		public string PriOpt;
		public string SecOpt;
		public string Exercise;
		public string ExerciseID;
		public string ACOGenInd;
		public string ACOGenFree;
		public string ACOStartTime;
		public string ACOEndTime;
		
		//Visual Options
		public string FillStyle;
		public string FillColor;
		public string EdgeStyle;
		public string EdgeColor;
		public string EdgeThick;
		public string EdgeThickUnits;
		
		//Attributes
		public string Display3D;
		public string ReadOnly;
		
		//Out of Range Flags
		public bool ACMType_OOR;
		public bool Usage_OOR;
		public bool LowAltInd_OOR;
		public bool UpAltInd_OOR;		
		public bool FreqSwitch_OOR;
		public bool Freq1U_OOR;
		public bool Freq2U_OOR;
		public bool Freq3U_OOR;
		public bool Freq4U_OOR;
		public bool Freq5U_OOR;
		public bool FillStyle_OOR;
		public bool EdgeStyle_OOR;
		public bool EdgeThickUnits_OOR;
		public bool Display3D_OOR;
		public bool ReadOnly_OOR;		
		
		//************************************************************************************//
		//***************************Creates Overlay Repo Item********************************//
		//************************************************************************************//
		
		public void CreateOverlayRepo()
		{			
			string currentPath1 = repo.FormTacViewC2.PictureOverlayInfo.Path.ToString();
			repo.FormTacViewC2.PictureOverlayInfo.Path = currentPath1.Replace("%name%", OverlayName);
			Report.Info("Setting repo item FormTacViewC2.PictureOverlayInfo to " + repo.FormTacViewC2.PictureOverlayInfo.Path.ToString());
			
			string currentPath2 = repo.FormRealView.MenuItemElipse_ACMInfo.Path.ToString();
			repo.FormRealView.MenuItemElipse_ACMInfo.Path = currentPath2.Replace("%name%", OverlayName);
			Report.Info("Setting repo item FormRealView.MenuItemElipse_ACMInfo to " + repo.FormRealView.MenuItemElipse_ACMInfo.Path.ToString());			
			
			string currentPath3 = repo.FormElipse_ACM.BasePath.ToString();
			repo.FormElipse_ACM.BasePath = currentPath3.Replace("%name%", OverlayName);
			Report.Info("Setting repo item FormElipse_ACM to " + repo.FormElipse_ACM.BasePath.ToString());			
		}
		
		//************************************************************************************//
		//************************opens Overlay Properties Dialog*****************************//
		//************************************************************************************//
		
		public void ViewOverlayProperties()
		{			
			Duration OrigDur1 = repo.FormRealView.MenuItemOverlay_PropertiesInfo.SearchTimeout;
			repo.FormRealView.MenuItemOverlay_PropertiesInfo.SearchTimeout = 2000;		
			
			Duration OrigDur2 = repo.FormRealView.MenuItemElipse_ACMInfo.SearchTimeout;
			repo.FormRealView.MenuItemElipse_ACMInfo.SearchTimeout = 2000;	
			
			Report.Info("Mouse Right Click item 'FormTacViewC2.PictureEllipse' at Center.");
			repo.FormTacViewC2.PictureOverlay.Click(MouseButtons.Right, "Center");
			Delay.Milliseconds(500);
			if (repo.FormRealView.MenuItemOverlay_PropertiesInfo.Exists())
			{
				Report.Info("Mouse Left Click item 'FormRealView.MenuItemOverlay_Properties'.");
				repo.FormRealView.MenuItemOverlay_Properties.Click();
			}
			else
			{
				Report.Info("Mouse Left Click item 'FormRealView.MenuItemElipse_ACM'.");
				repo.FormRealView.MenuItemElipse_ACM.Click();
				Report.Info("Mouse Left Click item 'FormElipse_ACM.MenuItemOverlay_Properties'.");
				repo.FormElipse_ACM.MenuItemOverlay_Properties.Click();				
			}
			
			repo.FormRealView.MenuItemOverlay_PropertiesInfo.SearchTimeout = OrigDur1;
			repo.FormRealView.MenuItemElipse_ACMInfo.SearchTimeout = OrigDur2;
		}
		
		//************************************************************************************//
		//***************************Resets Overlay Repo Item********************************//
		//************************************************************************************//
		
		public void ResetOverlayRepo()
		{			
			string currentPath = repo.FormTacViewC2.PictureOverlayInfo.Path.ToString();
			repo.FormTacViewC2.PictureOverlayInfo.Path = currentPath.Replace(OverlayName, "%name%");
			Report.Info("Setting repo item FormTacViewC2.PictureOverlayInfo to " + repo.FormTacViewC2.PictureOverlayInfo.Path.ToString());
		}		
		
		//************************************************************************************//
		//*******************************Validates ACM Type***********************************//
		//************************************************************************************//
		
		public void ValidateACMType()
		{
			if (!ACMType_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='ACM Type') on item 'Main_ACM_Ellipse_Ellipse.ListItemACM_TypeInfo'.");
				Report.Info("Value Entered = " + ACMType);
				Validate.Attribute(repo.Main_ACM_Ellipse_Ellipse.ListItemACM_TypeInfo, "AccessibleValue", ACMType, Validate.DefaultMessage, false);
			}
		}
		
		//************************************************************************************//
		//*************************Validates Other Defined Type*******************************//
		//************************************************************************************//
		
		public void ValidateODT()
		{
			if (!ACMType_OOR && OtherDefinedTypeFlag)
			{
				Report.Info("Validating AttributeEqual (Text='Other Defined Type') on item 'Main_ACM_Ellipse_Ellipse.ListItemOther_Defined_TypeInfo'.");
				Report.Info("Value Entered = " + ODT);
				Validate.Attribute(repo.Main_ACM_Ellipse_Ellipse.ListItemOther_Defined_TypeInfo, "AccessibleValue", ODT, Validate.DefaultMessage, false);
			}
		}		
		
		//************************************************************************************//
		//*********************************Validates Usage************************************//
		//************************************************************************************//
		
		public void ValidateUsage()
		{
			if (!Usage_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='Usage') on item 'Main_ACM_Ellipse_Ellipse.ListItemUsageInfo'.");
				Report.Info("Value Entered = " + Usage);
				Validate.Attribute(repo.Main_ACM_Ellipse_Ellipse.ListItemUsageInfo, "AccessibleValue", Usage, Validate.DefaultMessage, false);
			}
		}		
		
		//************************************************************************************//
		//*************************Validates Other Defined Usage******************************//
		//************************************************************************************//
		
		public void ValidateODU()
		{
			if (!Usage_OOR && OtherDefinedUsageFlag)
			{
				Report.Info("Validating AttributeEqual (Text='Other Defined Usage') on item 'Main_ACM_Ellipse_Ellipse.ListItemOther_Defined_UsageInfo'.");
				Report.Info("Value Entered = " + ODT);
				Validate.Attribute(repo.Main_ACM_Ellipse_Ellipse.ListItemOther_Defined_UsageInfo, "AccessibleValue", ODU, Validate.DefaultMessage, false);
			}
		}			
				
		//************************************************************************************//
		//*****************************Validates Overlay Name*********************************//
		//************************************************************************************//
		
		public void ValidateOverlayName()
		{
			Report.Info("Validating AttributeEqual (Text='Overlay Name') on item 'Main_ACM_Ellipse_Ellipse.ListItemOverlay_NameInfo'.");
			Report.Info("Value Entered = " + OverlayName);
			Validate.Attribute(repo.Main_ACM_Ellipse_Ellipse.ListItemOverlay_NameInfo, "AccessibleValue", OverlayName, Validate.DefaultMessage, false);
		}
		
		//************************************************************************************//
		//*******************************Validates Latitude***********************************//
		//************************************************************************************//
		
		public void ValidateLatitude()
		{
			Report.Info("Validating AttributeEqual (Text='Latitude') on item 'Main_ACM_Ellipse_Ellipse.ListItemLatitudeInfo'.");
			Report.Info("Value Entered = " + Latitude);
			Validate.Attribute(repo.Main_ACM_Ellipse_Ellipse.ListItemLatitudeInfo, "AccessibleValue", Latitude, Validate.DefaultMessage, false);
		}
		
		//************************************************************************************//
		//*******************************Validates Longitude**********************************//
		//************************************************************************************//
		
		public void ValidateLongitude()
		{
			Report.Info("Validating AttributeEqual (Text='Longitude') on item 'Main_ACM_Ellipse_Ellipse.ListItemLongitudeInfo'.");
			Report.Info("Value Entered = " + Longitude);
			Validate.Attribute(repo.Main_ACM_Ellipse_Ellipse.ListItemLongitudeInfo, "AccessibleValue", Longitude, Validate.DefaultMessage, false);
		}
		
		//************************************************************************************//
		//*********************************Validates UTM**************************************//
		//************************************************************************************//
		
		public void ValidateUTM()
		{
			Report.Info("Validating AttributeEqual (Text='UTM') on item 'Main_ACM_Ellipse_Ellipse.ListItemUTMInfo'.");
			Report.Info("Value Entered = " + UTM);
			Validate.Attribute(repo.Main_ACM_Ellipse_Ellipse.ListItemUTMInfo, "AccessibleValue", UTM, Validate.DefaultMessage, false);
		}
		
		//************************************************************************************//
		//*******************************Validates Longitude**********************************//
		//************************************************************************************//
		
		public void ValidateMGRS()
		{
			Report.Info("Validating AttributeEqual (Text='MGRS') on item 'Main_ACM_Ellipse_Ellipse.ListItemMGRSInfo'.");
			Report.Info("Value Entered = " + MGRS);
			Validate.Attribute(repo.Main_ACM_Ellipse_Ellipse.ListItemMGRSInfo, "AccessibleValue", MGRS, Validate.DefaultMessage, false);
		}
		
		//************************************************************************************//
		//*****************************Validates Lower Altitude*******************************//
		//************************************************************************************//
		
		public void ValidateLowAltitude()
		{
			Report.Info("Validating AttributeEqual (Text='Lower Altitude') on item 'Main_ACM_Ellipse_Ellipse.ListItemLower_Altitude__feetInfo'.");
			Report.Info("Value Entered = " + LowAlt);
			Validate.Attribute(repo.Main_ACM_Ellipse_Ellipse.ListItemLower_Altitude__feetInfo, "AccessibleValue", LowAlt, Validate.DefaultMessage, false);
		}		
		
		//************************************************************************************//
		//************************Validates Lower Altitude Indicator**************************//
		//************************************************************************************//
		
		public void ValidateLowAltitudeInd()
		{
			if (!LowAltInd_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='Lower Altitude Indicator') on item 'Main_ACM_Ellipse_Ellipse.ListItemLower_Altitude_IndicatorInfo'.");
				Report.Info("Value Entered = " + LowAltInd);
				Validate.Attribute(repo.Main_ACM_Ellipse_Ellipse.ListItemLower_Altitude_IndicatorInfo, "AccessibleValue", LowAltInd, Validate.DefaultMessage, false);
			}
		}		
		
		//************************************************************************************//
		//*****************************Validates Upper Altitude*******************************//
		//************************************************************************************//
		
		public void ValidateUpAltitude()
		{
			Report.Info("Validating AttributeEqual (Text='Upper Altitude') on item 'Main_ACM_Ellipse_Ellipse.ListItemUpper_Altitude__feetInfo'.");
			Report.Info("Value Entered = " + UpAlt);
			Validate.Attribute(repo.Main_ACM_Ellipse_Ellipse.ListItemUpper_Altitude__feetInfo, "AccessibleValue", UpAlt, Validate.DefaultMessage, false);
		}		
		
		//************************************************************************************//
		//************************Validates Upper Altitude Indicator**************************//
		//************************************************************************************//
		
		public void ValidateUpAltitudeInd()
		{
			if (!UpAltInd_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='Upper Altitude Indicator') on item 'Main_ACM_Ellipse_Ellipse.ListItemUpper_Altitude_IndicatorInfo'.");
				Report.Info("Value Entered = " + UpAltInd);
				Validate.Attribute(repo.Main_ACM_Ellipse_Ellipse.ListItemUpper_Altitude_IndicatorInfo, "AccessibleValue", UpAltInd, Validate.DefaultMessage, false);
			}
		}	
		
		//************************************************************************************//
		//*************************Validates Transitional Altitude****************************//
		//************************************************************************************//
		
		public void ValidateTransAltitude()
		{
			Report.Info("Validating AttributeEqual (Text='Transitional Altitude') on item 'Main_ACM_Ellipse_Ellipse.ListItemTransitional_Altitude__fInfo'.");
			Report.Info("Value Entered = " + TransAlt);
			Validate.Attribute(repo.Main_ACM_Ellipse_Ellipse.ListItemTransitional_Altitude__fInfo, "AccessibleValue", TransAlt, Validate.DefaultMessage, false);
		}	
		
		//************************************************************************************//
		//***************************Validates Overlay Rotation*******************************//
		//************************************************************************************//
		
		public void ValidateOverlayRotate()
		{
			Report.Info("Validating AttributeEqual (Text='Overlay Rotation') on item 'Main_ACM_Ellipse_Ellipse.ListItemOverlay_RotationInfo'.");
			double a = Convert.ToInt32(OverlayRotate);
			string b = a.ToString("#0.00");
			Report.Info("Value Entered = " + b);
			Validate.Attribute(repo.Main_ACM_Ellipse_Ellipse.ListItemOverlay_RotationInfo, "AccessibleValue", b, Validate.DefaultMessage, false);
		}	
		
		//************************************************************************************//
		//***************************Validates Ellipse X Radius*******************************//
		//************************************************************************************//
		
		public void ValidateXRadius()
		{
			Report.Info("Validating AttributeEqual (Text='Ellipse X Radius') on item 'Main_ACM_Ellipse_Ellipse.ListItemEllipse_X_Radius__milesInfo'.");
			Report.Info("Value Entered = " + X_Radius);
			Validate.Attribute(repo.Main_ACM_Ellipse_Ellipse.ListItemEllipse_X_Radius__milesInfo, "AccessibleValue", X_Radius, Validate.DefaultMessage, false);
		}	
		
		//************************************************************************************//
		//***************************Validates Ellipse Y Radius*******************************//
		//************************************************************************************//
		
		public void ValidateYRadius()
		{
			Report.Info("Validating AttributeEqual (Text='Ellipse Y Radius') on item 'Main_ACM_Ellipse_Ellipse.ListItemEllipse_Y_Radius__milesInfo'.");
			Report.Info("Value Entered = " + Y_Radius);
			Validate.Attribute(repo.Main_ACM_Ellipse_Ellipse.ListItemEllipse_Y_Radius__milesInfo, "AccessibleValue", Y_Radius, Validate.DefaultMessage, false);
		}	
		
		//************************************************************************************//
		//******************************Validates Start Time**********************************//
		//************************************************************************************//
		
		public void ValidateStartTime()
		{
			Report.Info("Validating AttributeEqual (Text='Start Time') on item 'Main_ACM_Ellipse_Ellipse.ListItemStart_TimeInfo'.");
			Report.Info("Value Entered = " + StartTime);
			Validate.Attribute(repo.Main_ACM_Ellipse_Ellipse.ListItemStart_TimeInfo, "AccessibleValue", StartTime, Validate.DefaultMessage, false);
		}			
		
		//************************************************************************************//
		//*******************************Validates End Time***********************************//
		//************************************************************************************//
		
		public void ValidateEndTime()
		{
			Report.Info("Validating AttributeEqual (Text='End Time') on item 'Main_ACM_Ellipse_Ellipse.ListItemEnd_TimeInfo'.");
			Report.Info("Value Entered = " + EndTime);
			Validate.Attribute(repo.Main_ACM_Ellipse_Ellipse.ListItemEnd_TimeInfo, "AccessibleValue", EndTime, Validate.DefaultMessage, false);
		}	
		
		//************************************************************************************//
		//*********************Validates Operational Control Authority************************//
		//************************************************************************************//
		
		public void ValidateOCA()
		{
			Report.Info("Validating AttributeEqual (Text='Operational Control Authority') on item 'Main_ACM_Ellipse_Ellipse.ListItemOperational_Control_AuthInfo'.");
			Report.Info("Value Entered = " + OCA);
			Validate.Attribute(repo.Main_ACM_Ellipse_Ellipse.ListItemOperational_Control_AuthInfo, "AccessibleValue", OCA, Validate.DefaultMessage, false);
		}			
		
		//************************************************************************************//
		//****************************Validates Frequency Switch******************************//
		//************************************************************************************//
		
		public void ValidateFreqSwitch()
		{
			if (!FreqSwitch_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='Frequency Switch') on item 'Main_ACM_Ellipse_Ellipse.ListItemFrequency_SwitchInfo'.");
				Report.Info("Value Entered = " + FreqSwitch);
				Validate.Attribute(repo.Main_ACM_Ellipse_Ellipse.ListItemFrequency_SwitchInfo, "AccessibleValue", FreqSwitch, Validate.DefaultMessage, false);
			}
		}		
		
		//************************************************************************************//
		//***************************Validates Frequency Designator****************************//
		//************************************************************************************//
		
		public void ValidateFreqDesignate()
		{
			if (!FreqSwitch_OOR && !SpecificRadioFreqFlag)
			{
				Report.Info("Validating AttributeEqual (Text='Frequency Designator') on item 'Main_ACM_Ellipse_Ellipse.ListItemFrequency_DesignatorInfo'.");
				Report.Info("Value Entered = " + FreqDes);
				Validate.Attribute(repo.Main_ACM_Ellipse_Ellipse.ListItemFrequency_DesignatorInfo, "AccessibleValue", FreqDes, Validate.DefaultMessage, false);
			}
		}	
		
		//************************************************************************************//
		//***************************Validates Radio Frequencies *****************************//
		//************************************************************************************//
		
		public void ValidateRadioFreq()
		{
			if (!FreqSwitch_OOR && SpecificRadioFreqFlag)
			{
				//Validate Frequency 1
				Report.Info("Validating AttributeEqual (Text='Frequency 1') on item 'Main_ACM_Ellipse_Ellipse.ListItemRadio_Frequency_1Info'.");
				double a = Convert.ToInt32(Freq1);
				string b = a.ToString("#0.00");
				Report.Info("Value Entered = " + b);
				Validate.Attribute(repo.Main_ACM_Ellipse_Ellipse.ListItemRadio_Frequency_1Info, "AccessibleValue", b, Validate.DefaultMessage, false);
				
				if (!Freq1U_OOR)
				{
					Report.Info("Validating AttributeEqual (Text='Frequency 1 Units') on item 'Main_ACM_Ellipse_Ellipse.ListItemRadio_Frequency_1_UnitsInfo'.");
					Report.Info("Value Entered = " + Freq1Units);
					Validate.Attribute(repo.Main_ACM_Ellipse_Ellipse.ListItemRadio_Frequency_1_UnitsInfo, "AccessibleValue", Freq1Units, Validate.DefaultMessage, false);
					
				}
				
				//Validate Frequency 2
				Report.Info("Validating AttributeEqual (Text='Frequency 2') on item 'Main_ACM_Ellipse_Ellipse.ListItemRadio_Frequency_2Info'.");
				double c = Convert.ToInt32(Freq2);
				string d = c.ToString("#0.00");
				Report.Info("Value Entered = " + d);
				Validate.Attribute(repo.Main_ACM_Ellipse_Ellipse.ListItemRadio_Frequency_2Info, "AccessibleValue", d, Validate.DefaultMessage, false);
				
				if (!Freq2U_OOR)
				{
					Report.Info("Validating AttributeEqual (Text='Frequency 2 Units') on item 'Main_ACM_Ellipse_Ellipse.ListItemRadio_Frequency_2_UnitsInfo'.");
					Report.Info("Value Entered = " + Freq2Units);
					Validate.Attribute(repo.Main_ACM_Ellipse_Ellipse.ListItemRadio_Frequency_2_UnitsInfo, "AccessibleValue", Freq2Units, Validate.DefaultMessage, false);					
				}	
				
				//Validate Frequency 3
				Report.Info("Validating AttributeEqual (Text='Frequency 3') on item 'Main_ACM_Ellipse_Ellipse.ListItemRadio_Frequency_3Info'.");
				double e = Convert.ToInt32(Freq3);
				string f = e.ToString("#0.00");
				Report.Info("Value Entered = " + f);
				Validate.Attribute(repo.Main_ACM_Ellipse_Ellipse.ListItemRadio_Frequency_3Info, "AccessibleValue", f, Validate.DefaultMessage, false);
				
				if (!Freq3U_OOR)
				{
					Report.Info("Validating AttributeEqual (Text='Frequency 3 Units') on item 'Main_ACM_Ellipse_Ellipse.ListItemRadio_Frequency_3_UnitsInfo'.");
					Report.Info("Value Entered = " + Freq3Units);
					Validate.Attribute(repo.Main_ACM_Ellipse_Ellipse.ListItemRadio_Frequency_3_UnitsInfo, "AccessibleValue", Freq3Units, Validate.DefaultMessage, false);					
				}				
				
				//Validate Frequency 4
				Report.Info("Validating AttributeEqual (Text='Frequency 4') on item 'Main_ACM_Ellipse_Ellipse.ListItemRadio_Frequency_4Info'.");
				double g = Convert.ToInt32(Freq4);
				string h = g.ToString("#0.00");
				Report.Info("Value Entered = " + h);
				Validate.Attribute(repo.Main_ACM_Ellipse_Ellipse.ListItemRadio_Frequency_4Info, "AccessibleValue", h, Validate.DefaultMessage, false);
				
				if (!Freq4U_OOR)
				{
					Report.Info("Validating AttributeEqual (Text='Frequency 4 Units') on item 'Main_ACM_Ellipse_Ellipse.ListItemRadio_Frequency_4_UnitsInfo'.");
					Report.Info("Value Entered = " + Freq4Units);
					Validate.Attribute(repo.Main_ACM_Ellipse_Ellipse.ListItemRadio_Frequency_4_UnitsInfo, "AccessibleValue", Freq4Units, Validate.DefaultMessage, false);					
				}
				
				//Validate Frequency 5
				Report.Info("Validating AttributeEqual (Text='Frequency 5') on item 'Main_ACM_Ellipse_Ellipse.ListItemRadio_Frequency_5Info'.");
				double i = Convert.ToInt32(Freq5);
				string j = i.ToString("#0.00");
				Report.Info("Value Entered = " + j);
				Validate.Attribute(repo.Main_ACM_Ellipse_Ellipse.ListItemRadio_Frequency_5Info, "AccessibleValue", j, Validate.DefaultMessage, false);
				
				if (!Freq5U_OOR)
				{
					Report.Info("Validating AttributeEqual (Text='Frequency 5 Units') on item 'Main_ACM_Ellipse_Ellipse.ListItemRadio_Frequency_5_UnitsInfo'.");
					Report.Info("Value Entered = " + Freq5Units);
					Validate.Attribute(repo.Main_ACM_Ellipse_Ellipse.ListItemRadio_Frequency_5_UnitsInfo, "AccessibleValue", Freq5Units, Validate.DefaultMessage, false);					
				}		
			}
		}	
		
		//************************************************************************************//
		//***************************Validates Amplification Text*****************************//
		//************************************************************************************//
		
		public void ValidateAmpText()
		{
			Report.Info("Validating AttributeEqual (Text='Amplification Text') on item 'Main_ACM_Ellipse_Ellipse.ListItemAmplification_TextInfo'.");
			Report.Info("Value Entered = " + Amp);
			Validate.Attribute(repo.Main_ACM_Ellipse_Ellipse.ListItemAmplification_TextInfo, "AccessibleValue", Amp, Validate.DefaultMessage, false);
		}	
		
		//************************************************************************************//
		//***************************Validates Gentext Indicator******************************//
		//************************************************************************************//
		
		public void ValidateGentextInd()
		{
			Report.Info("Validating AttributeEqual (Text='Gentext Indicator') on item 'Main_ACM_Ellipse_Ellipse.ListItemGentext_IndicatorInfo'.");
			Report.Info("Value Entered = " + GenInd);
			Validate.Attribute(repo.Main_ACM_Ellipse_Ellipse.ListItemGentext_IndicatorInfo, "AccessibleValue", GenInd, Validate.DefaultMessage, false);
		}			
		
		//************************************************************************************//
		//***************************Validates Gentext Free Text******************************//
		//************************************************************************************//
		
		public void ValidateGentextFree()
		{
			Report.Info("Validating AttributeEqual (Text='Gentext Free Text') on item 'Main_ACM_Ellipse_Ellipse.ListItemGentext_Free_TextInfo'.");
			Report.Info("Value Entered = " + GenFree);
			Validate.Attribute(repo.Main_ACM_Ellipse_Ellipse.ListItemGentext_Free_TextInfo, "AccessibleValue", GenFree, Validate.DefaultMessage, false);
		}	
		
		//************************************************************************************//
		//********************************Validates File Name*********************************//
		//************************************************************************************//
		
		public void ValidateFileName()
		{
			Report.Info("Validating AttributeEqual (Text='File Name') on item 'Main_ACM_Ellipse_Ellipse.ListItemFile_NameInfo'.");
			Report.Info("Value Entered = " + File);
			Validate.Attribute(repo.Main_ACM_Ellipse_Ellipse.ListItemFile_NameInfo, "AccessibleValue", File, Validate.DefaultMessage, false);
		}	
		
		//************************************************************************************//
		//*********************************Validates ACO ID***********************************//
		//************************************************************************************//
		
		public void ValidateACO()
		{
			Report.Info("Validating AttributeEqual (Text='ACO ID') on item 'Main_ACM_Ellipse_Ellipse.ListItemACO_IDInfo'.");
			Report.Info("Value Entered = " + ACO);
			Validate.Attribute(repo.Main_ACM_Ellipse_Ellipse.ListItemACO_IDInfo, "AccessibleValue", ACO, Validate.DefaultMessage, false);
		}			
		
		//************************************************************************************//
		//********************************Operation Codeword**********************************//
		//************************************************************************************//
		
		public void ValidateOpCode()
		{
			Report.Info("Validating AttributeEqual (Text='Operation Codeword') on item 'Main_ACM_Ellipse_Ellipse.ListItemOperation_CodewordInfo'.");
			Report.Info("Value Entered = " + OP);
			Validate.Attribute(repo.Main_ACM_Ellipse_Ellipse.ListItemOperation_CodewordInfo, "AccessibleValue", OP, Validate.DefaultMessage, false);
		}	
		
		//************************************************************************************//
		//******************************Plan Originator/Number********************************//
		//************************************************************************************//
		
		public void ValidatePlanOrig()
		{
			Report.Info("Validating AttributeEqual (Text='Plan Originator/Number') on item 'Main_ACM_Ellipse_Ellipse.ListItemPlan_Originator_NumberInfo'.");
			Report.Info("Value Entered = " + PlanNum);
			Validate.Attribute(repo.Main_ACM_Ellipse_Ellipse.ListItemPlan_Originator_NumberInfo, "AccessibleValue", PlanNum, Validate.DefaultMessage, false);
		}	
		
		//************************************************************************************//
		//*****************************Primary Option Nickname********************************//
		//************************************************************************************//
		
		public void ValidatePriOpt()
		{
			Report.Info("Validating AttributeEqual (Text='Plan Originator/Number') on item 'Main_ACM_Ellipse_Ellipse.ListItemPrimary_Option_NicknameInfo'.");
			Report.Info("Value Entered = " + PriOpt);
			Validate.Attribute(repo.Main_ACM_Ellipse_Ellipse.ListItemPrimary_Option_NicknameInfo, "AccessibleValue", PriOpt, Validate.DefaultMessage, false);
		}	
		
		//************************************************************************************//
		//****************************Secondary Option Nickname*******************************//
		//************************************************************************************//
		
		public void ValidateSecOpt()
		{
			Report.Info("Validating AttributeEqual (Text='Plan Originator/Number') on item 'Main_ACM_Ellipse_Ellipse.ListItemSecondary_Option_NicknamInfo'.");
			Report.Info("Value Entered = " + SecOpt);
			Validate.Attribute(repo.Main_ACM_Ellipse_Ellipse.ListItemSecondary_Option_NicknamInfo, "AccessibleValue", SecOpt, Validate.DefaultMessage, false);
		}	
		
		//************************************************************************************//
		//********************************Exercise Nickname***********************************//
		//************************************************************************************//
		
		public void ValidateExercise()
		{
			Report.Info("Validating AttributeEqual (Text='Exercise Nickname') on item 'Main_ACM_Ellipse_Ellipse.ListItemExercise_NicknameInfo'.");
			Report.Info("Value Entered = " + Exercise);
			Validate.Attribute(repo.Main_ACM_Ellipse_Ellipse.ListItemExercise_NicknameInfo, "AccessibleValue", Exercise, Validate.DefaultMessage, false);
		}	
		
		//************************************************************************************//
		//********************************Exercise Nickname***********************************//
		//************************************************************************************//
		
		public void ValidateExerciseID()
		{
			Report.Info("Validating AttributeEqual (Text='Exercise ID') on item 'Main_ACM_Ellipse_Ellipse.ListItemExercise_IDInfo'.");
			Report.Info("Value Entered = " + ExerciseID);
			Validate.Attribute(repo.Main_ACM_Ellipse_Ellipse.ListItemExercise_IDInfo, "AccessibleValue", ExerciseID, Validate.DefaultMessage, false);
		}	
		
		//************************************************************************************//
		//******************************ACO Gentext Indicator*********************************//
		//************************************************************************************//
		
		public void ValidateACOGenInd()
		{
			Report.Info("Validating AttributeEqual (Text='ACO Gentext Indicator') on item 'Main_ACM_Ellipse_Ellipse.ListItemACO_Gentext_IndicatorInfo'.");
			Report.Info("Value Entered = " + ACOGenInd);
			Validate.Attribute(repo.Main_ACM_Ellipse_Ellipse.ListItemACO_Gentext_IndicatorInfo, "AccessibleValue", ACOGenInd, Validate.DefaultMessage, false);
		}			
		
		//************************************************************************************//
		//******************************ACO Gentext Free Text*********************************//
		//************************************************************************************//
		
		public void ValidateACOGenFree()
		{
			Report.Info("Validating AttributeEqual (Text='ACO Gentext Free Text') on item 'Main_ACM_Ellipse_Ellipse.ListItemACO_Gentext_Free_TextInfo'.");
			Report.Info("Value Entered = " + ACOGenFree);
			Validate.Attribute(repo.Main_ACM_Ellipse_Ellipse.ListItemACO_Gentext_Free_TextInfo, "AccessibleValue", ACOGenFree, Validate.DefaultMessage, false);
		}			
		
		//************************************************************************************//
		//****************************Validates ACO Start Time********************************//
		//************************************************************************************//
		
		public void ValidateACOStartTime()
		{
			Report.Info("Validating AttributeEqual (Text='ACO Start Time') on item 'Main_ACM_Ellipse_Ellipse.ListItemACO_Start_TimeInfo'.");
			Report.Info("Value Entered = " + ACOStartTime);
			Validate.Attribute(repo.Main_ACM_Ellipse_Ellipse.ListItemACO_Start_TimeInfo, "AccessibleValue", ACOStartTime, Validate.DefaultMessage, false);
		}			
		
		//************************************************************************************//
		//*****************************Validates ACO End Time*********************************//
		//************************************************************************************//
		
		public void ValidateACOEndTime()
		{
			Report.Info("Validating AttributeEqual (Text='ACO End Time') on item 'Main_ACM_Ellipse_Ellipse.ListItemACO_End_TimeInfo'.");
			Report.Info("Value Entered = " + ACOEndTime);
			Validate.Attribute(repo.Main_ACM_Ellipse_Ellipse.ListItemACO_End_TimeInfo, "AccessibleValue", ACOEndTime, Validate.DefaultMessage, false);
		}	
		
		//************************************************************************************//
		//******************************Validates Fill Style**********************************//
		//************************************************************************************//
		
		public void ValidateFillStyle()
		{
			if (!FillStyle_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='Fill Style') on item 'Main_ACM_Ellipse_Ellipse.ListItemFill_StyleInfo'.");
				Report.Info("Value Entered = " + FillStyle);
				Validate.Attribute(repo.Main_ACM_Ellipse_Ellipse.ListItemFill_StyleInfo, "AccessibleValue", FillStyle, Validate.DefaultMessage, false);
			}
		}	
		
		//************************************************************************************//
		//******************************Validates Fill Color**********************************//
		//************************************************************************************//
		
		public void ValidateFillColor()
		{
			Report.Info("Validating AttributeEqual (Text='Fill Color') on item 'Main_ACM_Ellipse_Ellipse.ListItemFill_ColorInfo'.");
			Report.Info("Value Entered = " + FillColor);
			Validate.Attribute(repo.Main_ACM_Ellipse_Ellipse.ListItemFill_ColorInfo, "AccessibleValue", FillColor, Validate.DefaultMessage, false);
		}	
		
		//************************************************************************************//
		//******************************Validates Edge Style**********************************//
		//************************************************************************************//
		
		public void ValidateEdgeStyle()
		{
			if (!EdgeStyle_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='Fill Style') on item 'Main_ACM_Ellipse_Ellipse.ListItemEdge_StyleInfo'.");
				Report.Info("Value Entered = " + EdgeStyle);
				Validate.Attribute(repo.Main_ACM_Ellipse_Ellipse.ListItemEdge_StyleInfo, "AccessibleValue", EdgeStyle, Validate.DefaultMessage, false);
			}
		}	
		
		//************************************************************************************//
		//******************************Validates Fill Color**********************************//
		//************************************************************************************//
		
		public void ValidateEdgeColor()
		{
			Report.Info("Validating AttributeEqual (Text='Edge Color') on item 'Main_ACM_Ellipse_Ellipse.ListItemEdge_ColorInfo'.");
			Report.Info("Value Entered = " + EdgeColor);
			Validate.Attribute(repo.Main_ACM_Ellipse_Ellipse.ListItemEdge_ColorInfo, "AccessibleValue", EdgeColor, Validate.DefaultMessage, false);
		}	
		
		//************************************************************************************//
		//****************************Validates Edge Thickness********************************//
		//************************************************************************************//
		
		public void ValidateEdgeThick()
		{
			Report.Info("Validating AttributeEqual (Text='Edge Thickness') on item 'Main_ACM_Ellipse_Ellipse.ListItemEdge_ThicknessInfo'.");
			Report.Info("Value Entered = " + EdgeThick);
			Validate.Attribute(repo.Main_ACM_Ellipse_Ellipse.ListItemEdge_ThicknessInfo, "AccessibleValue", EdgeThick, Validate.DefaultMessage, false);
		}			
		
		//************************************************************************************//
		//*************************Validates Edge Thickness Units*****************************//
		//************************************************************************************//
		
		public void ValidateEdgeThickUnits()
		{
			if (!EdgeThickUnits_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='Edge Thickness Units') on item 'Main_ACM_Ellipse_Ellipse.ListItemEdge_Thickness_UnitsInfo'.");
				Report.Info("Value Entered = " + EdgeThickUnits);
				Validate.Attribute(repo.Main_ACM_Ellipse_Ellipse.ListItemEdge_Thickness_UnitsInfo, "AccessibleValue", EdgeThickUnits, Validate.DefaultMessage, false);
			}
		}			
		
		//************************************************************************************//
		//*********************Validates Display Overlay Name in 3D***************************//
		//************************************************************************************//
		
		public void ValidateDisplay3D()
		{
//			if (!Display3D_OOR)
//			{
//				Report.Info("Validating AttributeEqual (Text='Edge Thickness Units') on item 'Main_ACM_Ellipse_Ellipse.ListItemDisplay_Overlay_Name_In_Info'.");
//				Report.Info("Value Entered = " + Display3D);
//				Validate.Attribute(repo.Main_ACM_Ellipse_Ellipse.ListItemDisplay_Overlay_Name_In_Info, "AccessibleValue", Display3D, Validate.DefaultMessage, false);
//			}
		}	

		//************************************************************************************//
		//************************************Read Only***************************************//
		//************************************************************************************//
		
		public void ValidateReadOnly()
		{
//			if (!ReadOnly_OOR)
//			{
//				Report.Info("Validating AttributeEqual (Text='Edge Thickness Units') on item 'Main_ACM_Ellipse_Ellipse.ListItemRead_OnlyInfo'.");
//				Report.Info("Value Entered = " + ReadOnly);
//				Validate.Attribute(repo.Main_ACM_Ellipse_Ellipse.ListItemRead_OnlyInfo, "AccessibleValue", ReadOnly, Validate.DefaultMessage, false);
//			}
		}	
		
		static ValidateEllipse()
		{
			//Your recording specific initialization code goes here.
		}

		private void Init()
		{
			// Your recording specific initialization code goes here.
		}
	}
}
