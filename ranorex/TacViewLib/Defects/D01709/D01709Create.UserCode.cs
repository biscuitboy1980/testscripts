///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using System.Windows.Forms;

using Ranorex;
using Ranorex.Core;

namespace TacViewLib.Defects.D01709
{
	/// <summary>
	/// The D01709 recording.
	/// </summary>

	public partial class D01709Create
	{
		//Basic Info
		public static string ID;
		public static string Plat;
		public static string Act;
		public static string TrackNum;
		public static int TCount;
		
		static D01709Create()
		{
		//Your recording specific initialization code goes here.
		}				
		
		//************************************************************************************//
		//*********************************Gets Track Count***********************************//
		//************************************************************************************//
	
		public void GetTrackCount()
		{			
			Ranorex.Container cont1 = repo.FormTacViewC2.ContainerRvView;
			IList<Picture> list1 = cont1.Find<Picture>(@"/form[@title~'^TacViewC2\ \ \ \(map:\ .*']/element/container/picture[@accessiblevalue='Track']");
			TCount = list1.Count;		    
		}
		
		//************************************************************************************//
		//******************************Randomly Plots a Track********************************//
		//************************************************************************************//		
		
		public void RandCoord()
		{	
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			SharedFunctions.RandCoord();
		}
		
		//************************************************************************************//
		//****************************Enters Random Identity value****************************//
		//************************************************************************************//
		
		public void IDval()
		{
			int x = 0;
			
			while (x < 2)
			{
				try
				{
					repo.FormMain__SubSurface_Create.ListItemIdentity.Click("CenterLeft");
				    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List list2 = "//list[@processname='RealView']";
		            int AScount = list2.Items.Count;
		            Random ASvalue = new Random();
					int ASnum = ASvalue.Next(0, AScount++);
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click();
					Accessible accElement = new Accessible(repo.FormMain__SubSurface_Create.ListItemIdentity);  
		   			string IDValue = accElement.Value;
		   			TacViewLib.Defects.D01709.D01709Validate.ID = IDValue;
		   			Report.Info("Identity Entered = " + IDValue);
		   			TacViewLib.Defects.D01709.D01709Validate.ID_OOR = false;
		   			x=2;
				}
				catch (ArgumentOutOfRangeException e)
				{								   			
			   		x++;
			   		if (x == 1)
			   		{
			   			Report.Debug("List Count Out of Range for Identity, Re-Executing Function");
			   			Report.Debug(e.ToString());	
			   		}
			   		else if (x == 2)
			   		{
			   			Report.Debug("List Count Out of Range for Identity, List Item Will Not be Validated");
			   			Report.Debug(e.ToString());	
			   			TacViewLib.Defects.D01709.D01709Validate.ID_OOR = true;
			   		}
				}					
			}
		}
		
		//************************************************************************************//
		//****************************Enters Random Platform value****************************//
		//************************************************************************************//
		
		public void Platval()
		{
			int x = 0;
			
			while (x < 2)
			{
				try
				{
					repo.FormMain__SubSurface_Create.ListItemPlatform.Click("CenterLeft");
				    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List list2 = "//list[@processname='RealView']";
		            int AScount = list2.Items.Count;
		            Random ASvalue = new Random();
		            AScount = AScount - 1;
					int ASnum = ASvalue.Next(1, AScount++);
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click();
					Accessible accElement = new Accessible(repo.FormMain__SubSurface_Create.ListItemPlatform);  
		   			string PlatValue = accElement.Value;
		   			TacViewLib.Defects.D01709.D01709Validate.Plat = PlatValue;
		   			Report.Info("Platform Value Entered = " + PlatValue);
		   			TacViewLib.Defects.D01709.D01709Validate.Plat_OOR = false;
		   			x=2;
				}
				catch (ArgumentOutOfRangeException e)
				{								   			
			   		x++;
			   		if (x == 1)
			   		{
			   			Report.Debug("List Count Out of Range for Platform, Re-Executing Function");
			   			Report.Debug(e.ToString());	
			   		}
			   		else if (x == 2)
			   		{
			   			Report.Debug("List Count Out of Range for Platform, List Item Will Not be Validated");
			   			Report.Debug(e.ToString());	
			   			TacViewLib.Defects.D01709.D01709Validate.Plat_OOR = true;
			   		}
				}					
			}
		}
		
		//************************************************************************************//
		//****************************Enters Random Activity value****************************//
		//************************************************************************************//
		
		public void Actval()
		{
			int x = 0;
			
			while (x < 2)
			{
				try
				{
					repo.FormMain__SubSurface_Create.ListItemActivity.Click("CenterLeft");
				    Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List list2 = "//list[@processname='RealView']";
		            int AScount = list2.Items.Count;
		            Random ASvalue = new Random();
		            AScount = AScount - 1;
					int ASnum = ASvalue.Next(1, AScount++);
		       		repo.ListRealView.Self.Items[ASnum].Select();
		       		repo.ListRealView.Self.Items[ASnum].Click();
					Accessible accElement = new Accessible(repo.FormMain__SubSurface_Create.ListItemActivity);  
		   			string ActValue = accElement.Value;
		   			TacViewLib.Defects.D01709.D01709Validate.Act = ActValue;
		   			Report.Info("Activity Value Entered = " + ActValue);
		   			TacViewLib.Defects.D01709.D01709Validate.Act_OOR = false;
		   			x=2;
				}
				catch (ArgumentOutOfRangeException e)
				{								   			
			   		x++;
			   		if (x == 1)
			   		{
			   			Report.Debug("List Count Out of Range for Activity, Re-Executing Function");
			   			Report.Debug(e.ToString());	
			   		}
			   		else if (x == 2)
			   		{
			   			Report.Debug("List Count Out of Range for Activity, List Item Will Not be Validated");
			   			Report.Debug(e.ToString());	
			   			TacViewLib.Defects.D01709.D01709Validate.Act_OOR = true;
			   		}
				}					
			}
		}
	
		//************************************************************************************//
		//*********************************Gets Track Number**********************************//
		//************************************************************************************//
		
		public void GetTrackNum()			
		{			
		    TCount++;
		    Accessible pic1 = @"/form[@title~'^TacViewC2\ \ \ \(map:\ .*']/element/container/picture[@accessiblevalue='Track']" + "[" + TCount + "]";
   			Accessible accElement = new Accessible(pic1);  
   			string track1 = accElement.Name;
   			Report.Info("Track Number = " + track1);
   			TacViewLib.Defects.D01709.D01709Validate.TrackNum = track1;		
   			TacViewLib.Defects.D01709.D01709Validate.TrackNum = track1;
		}

		private void Init()
		{
			// Your recording specific initialization code goes here.
		}
	}
}