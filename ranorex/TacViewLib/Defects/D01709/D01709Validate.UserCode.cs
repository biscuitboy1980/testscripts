///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using System.Windows.Forms;

using Ranorex;
using Ranorex.Core;

namespace TacViewLib.Defects.D01709
{
	/// <summary>
	/// The Recording1 recording.
	/// </summary>
	public partial class D01709Validate
	{
		static D01709Validate()
		{
			//Your recording specific initialization code goes here.
		}
		
		public static bool ZoomFlag = false;
		
		public static string TrackNum;
		public static int TCount;
		
		//Basic Info
		public static string ID;
		public static string Plat;
		public static string Act;
		
		//Flags
		public static bool ID_OOR;
		public static bool Plat_OOR;
		public static bool Act_OOR;
		
		public void CreateTrackRepoItems()
		{			
			string currentPath = repo.FormTacViewC2.PictureTrackInfo.Path.ToString();
			repo.FormTacViewC2.PictureTrackInfo.Path = currentPath.Replace("%track%", TrackNum);
			Report.Info("Setting repo item FormTacViewC2.PictureTrack to " + repo.FormTacViewC2.PictureTrackInfo.Path.ToString());
			
			string currentPath1 = repo.FormTracks.MenuItemC2_HOST_2_TrackInfo.Path.ToString();
			repo.FormTracks.MenuItemC2_HOST_2_TrackInfo.Path = currentPath1.Replace("%track%", TrackNum);
			Report.Info("Setting repo item FormTracks.MenuItemC2_HOST_2_Track to " + repo.FormTracks.MenuItemC2_HOST_2_TrackInfo.Path.ToString());
			
			string currentPath2 = repo.FormRealView.MenuItemTrackNumber2Info.Path.ToString();
			repo.FormRealView.MenuItemTrackNumber2Info.Path = currentPath2.Replace("%track%", TrackNum);
			Report.Info("Setting repo item FormRealView.MenuItemTrackNumber2 to " + repo.FormRealView.MenuItemTrackNumber2Info.Path.ToString());
			
			string currentPath3 = repo.FormRealView.MenuItemTrackNumberInfo.Path.ToString();
			repo.FormRealView.MenuItemTrackNumberInfo.Path = currentPath3.Replace("%track%", TrackNum);
			Report.Info("Setting repo item FormRealView.MenuItemTrackNumber to " + repo.FormRealView.MenuItemTrackNumberInfo.Path.ToString());
			
			string currentPath4 = repo.FormTracks.MenuItemC2_HOST_TrackInfo.Path.ToString();
			repo.FormTracks.MenuItemC2_HOST_TrackInfo.Path = currentPath4.Replace("%track%", TrackNum);
			Report.Info("Setting repo item FormTracks.MenuItemC2_HOST_Track to " + repo.FormTracks.MenuItemC2_HOST_TrackInfo.Path.ToString());
		}

		public void RightClickTrack()
		{			
			Duration OrigDur = repo.FormTacViewC2.PictureTrackInfo.SearchTimeout;
			repo.FormTacViewC2.PictureTrackInfo.SearchTimeout = 2000;			
			
			if (repo.FormTacViewC2.PictureTrackInfo.Exists())
			{
				Report.Info("Mouse Right Click item 'FormTacViewC2.PictureTrack' at Center.");
				repo.FormTacViewC2.PictureTrack.Click(MouseButtons.Right);
			}
			else
			{
				ZoomFlag = true;
				Report.Info("Track # " + TrackNum + " not found on the current display, going to world wide view");
				repo.FormTacViewC2.ButtonZoom_Out_Max.Click();
				
				if (repo.FormTacViewC2.PictureTrackInfo.Exists())
				{
					Report.Info("Mouse Right Click item 'FormTacViewC2.PictureTrack' at Center.");
					repo.FormTacViewC2.PictureTrack.Click(MouseButtons.Right);
				}
				else
				{
					Report.Error("Unable to find Track # " + TrackNum + " anywhere in the world");
					return;
				}				
			}
			
			repo.FormTacViewC2.PictureTrackInfo.SearchTimeout = OrigDur;
		}
		
		public void ViewTrackProperties()
		{			
			Duration OrigDur = repo.FormRealView.MenuItemTracksInfo.SearchTimeout;
			repo.FormRealView.MenuItemTracksInfo.SearchTimeout = 1000;
			Duration OrigDur1 = repo.FormRealView.MenuItemTrackNumber2Info.SearchTimeout;
			repo.FormRealView.MenuItemTrackNumber2Info.SearchTimeout = 1000;	
			Duration OrigDur2 = repo.FormRealView.MenuItemDrop_TrackInfo.SearchTimeout;
			repo.FormRealView.MenuItemDrop_TrackInfo.SearchTimeout = 1000;	
			
			int i = 0;
						
			while (repo.FormRealView.MenuItemDrop_TrackInfo.Exists() && (i < 4))
				
				{
					i++;
					Report.Debug("Unable to find " + TrackNum + " on C2 HOST Interface, waiting 20 seconds and attempting to re-execute");
					Keyboard.Press(Keys.Escape);
					Delay.Seconds(20);	
					RightClickTrack();
				}
			
			if (i < 4)
			{
				
				if (repo.FormRealView.MenuItemTracksInfo.Exists())
					{
						Report.Info("Mouse Left Click item 'FormRealView.MenuItemTracks'");
						repo.FormRealView.MenuItemTracks.Click();
						Report.Info("Mouse Left Click item 'FormTracks.MenuItemC2_HOST_2_Track'");
					    repo.FormTracks.MenuItemC2_HOST_2_Track.Click();
					    Report.Info("Mouse Left Click item 'FormTracks.MenuItemTrack_Properties' at Center.");
						repo.FormC2_HOST_2.MenuItemTrack_Properties.Click();
					}			
				else if (repo.FormRealView.MenuItemTrackNumber2Info.Exists())
					{
					    Report.Info("Mouse Left Click item 'repo.FormRealView.MenuItemTrackNumber2'");
					    repo.FormRealView.MenuItemTrackNumber2.Click();
					    Report.Info("Mouse Left Click item 'FormTracks.MenuItemTrack_Properties' at Center.");
						repo.FormC2_HOST_2.MenuItemTrack_Properties.Click();
					}
			}			
			else
				{
					Report.Error("Unable to find " + TrackNum + " on C2 HOST Interface aborting validate");
					Keyboard.Press(Keys.Escape);
					RightClickTrack();
					//DropTrack();
					ResetPaths();
					return;
				}

			repo.FormRealView.MenuItemTracksInfo.SearchTimeout = OrigDur;
			repo.FormRealView.MenuItemTrackNumber2Info.SearchTimeout = OrigDur1;
			repo.FormRealView.MenuItemDrop_TrackInfo.SearchTimeout = OrigDur2;
		}
		
		public void Validate_ListItemTrack_3_4_5_4_Indicator()
		{
			//Your code here. Code inside this method will not be changed by the code generator.
			Report.Info("Validating AttributeEqual (AccessibleValue='J5.4 Track(ASW Acoustic Bearing/Range)') on item 'FormMain__SubSurface_Prop.ListItemTrack_3_4_5_4_Indicator'.");
			Validate.Attribute(repo.FormMain__SubSurface_Prop.ListItemTrack_3_4_5_4_IndicatorInfo, "AccessibleValue", "J5.4 Track(ASW Acoustic Bearing/Range)", Validate.DefaultMessage, false);
		}
		
		//************************************************************************************//
		//*****************************Validates Identity value*******************************//
		//************************************************************************************//
		
		public void ValidateID()
		{
			if (!ID_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(ID)') on item 'FormMain__SubSurface_TN.ListItemIdentity'.");
				Report.Info("Value Entered = " + ID);
				Validate.Attribute(repo.FormMain__SubSurface_Prop.ListItemIdentityInfo, "AccessibleValue", ID, Validate.DefaultMessage, false);
			}
		}
		
		//************************************************************************************//
		//****************************Validates Platform value********************************//
		//************************************************************************************//
		
		public void ValidatePlat()
		{
			if (!Plat_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(Plat)') on item 'FormMain__SubSurface_TN.ListItemPlatform'.");
				Report.Info("Value Entered = " + Plat);
				Validate.Attribute(repo.FormMain__SubSurface_Prop.ListItemPlatformInfo, "AccessibleValue", Plat, Validate.DefaultMessage, false);
			}
		}

		
		//************************************************************************************//
		//***************************Validates Activity value*********************************//
		//************************************************************************************//
		
		public void ValidateAct()
		{
			if (!Act_OOR)
			{
				Report.Info("Validating AttributeEqual (Text='(Act)') on item 'FormMain__SubSurface_TN.ListItemActivity'.");
				Report.Info("Value Entered = " + Act);
				Validate.Attribute(repo.FormMain__SubSurface_Prop.ListItemActivityInfo, "AccessibleValue", Act, Validate.DefaultMessage, false);
			}
		}		
		
		//************************************************************************************//
		//***********************************Drops Track**************************************//
		//************************************************************************************//		
		
		public void DropTrack()
		{
			Drop_Track.DropTrack.Start();
		}
		
		//************************************************************************************//
		//*******************************Validates Drop Track*********************************//
		//************************************************************************************//

		public void Validate_DropTrack()
		{
			Duration OrigDur = repo.FormTacViewC2.PictureTrackInfo.SearchTimeout;
			repo.FormTacViewC2.PictureTrackInfo.SearchTimeout = 10000;

			Report.Info("Validating Track # " + TrackNum + " was dropped");
	
			bool result = Validate.NotExists(repo.FormTacViewC2.PictureTrackInfo, Validate.DefaultMessage, false);
			
				if (result == true)
				{
					Report.Success("Successfully dropped track # " + TrackNum);
				}
				else
				{
					Report.Screenshot();
					Report.Debug("Track # " + TrackNum + " failed to drop within 15 seconds, proceeding to next track creation.");
				}
			
			repo.FormTacViewC2.PictureTrackInfo.SearchTimeout = OrigDur;
		}
		
		public void ResetPaths()
		{
			string currentPath = repo.FormTacViewC2.PictureTrackInfo.Path.ToString();
			repo.FormTacViewC2.PictureTrackInfo.Path = currentPath.Replace(TrackNum, "%track%");
			Report.Info("Resetting repo item FormTacViewC2.PictureTrack repo item to" + repo.FormTacViewC2.PictureTrackInfo.Path.ToString());
		
			string currentPath1 = repo.FormTracks.MenuItemC2_HOST_2_TrackInfo.Path.ToString();
			repo.FormTracks.MenuItemC2_HOST_2_TrackInfo.Path = currentPath1.Replace(TrackNum, "%track%");
			Report.Info("Resetting repo item FormTracks.MenuItemC2_HOST_2_Track to " + repo.FormTracks.MenuItemC2_HOST_2_TrackInfo.Path.ToString());
			
			string currentPath2 = repo.FormRealView.MenuItemTrackNumber2Info.Path.ToString();
			repo.FormRealView.MenuItemTrackNumber2Info.Path = currentPath2.Replace(TrackNum, "%track%");
			Report.Info("Resetting repo item FormRealView.MenuItemTrackNumber2 to " + repo.FormRealView.MenuItemTrackNumber2Info.Path.ToString());
			
			string currentPath3 = repo.FormRealView.MenuItemTrackNumberInfo.Path.ToString();
			repo.FormRealView.MenuItemTrackNumberInfo.Path = currentPath3.Replace(TrackNum, "%track%");
			Report.Info("Resetting repo item FormRealView.MenuItemTrackNumber to " + repo.FormRealView.MenuItemTrackNumberInfo.Path.ToString());
			
			string currentPath4 = repo.FormTracks.MenuItemC2_HOST_TrackInfo.Path.ToString();
			repo.FormTracks.MenuItemC2_HOST_TrackInfo.Path = currentPath4.Replace(TrackNum, "%track%");
			Report.Info("Resetting repo item FormTracks.MenuItemC2_HOST_Track to " + repo.FormTracks.MenuItemC2_HOST_TrackInfo.Path.ToString());		
		}

		private void Init()
		{
			// Your recording specific initialization code goes here.
		}
	}
}
