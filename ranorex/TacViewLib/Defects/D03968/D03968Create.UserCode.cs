///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using System.Windows.Forms;

using Ranorex;
using Ranorex.Core;

namespace TacViewLib.Defects.D03968
{
	/// <summary>
	/// The D03968Create recording.
	/// </summary>
	public partial class D03968Create
	{		
		public static int TCount;
		public static int SonoCount = 1;
		
		static D03968Create()
		{
			//Your recording specific initialization code goes here.
		}

		//************************************************************************************//
		//*********************************Gets Track Count***********************************//
		//************************************************************************************//
	
		public void GetTrackCount()
		{			
			Ranorex.Container cont1 = repo.FormTacViewC2.ContainerRvView;
			IList<Picture> list1 = cont1.Find<Picture>(@"/form[@title~'^TacViewC2\ \ \ \(map:\ .*']/element/container/picture[@accessiblevalue='Track']");
			TCount = list1.Count;		    
		}
		
		//************************************************************************************//
		//******************************Randomly Plots a Track********************************//
		//************************************************************************************//		
		
		public void RandCoord()
		{	
			CommonUtilLib.Util SharedFunctions = new CommonUtilLib.Util();
			
			SharedFunctions.RandCoord();
		}
	
		//************************************************************************************//
		//***************************Enters Point Type ***************************************//
		//************************************************************************************//
		
		public void PTypeval()
		{	
			int x = 0;			
			
			while (x < 2)
			{			
				try
				{
					repo.FormMain__Reference_Point_TN.ListItemPoint_Type.Click("CenterLeft");
					Keyboard.Press(Keys.Tab);
					Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					repo.ListRealView.Self.Items[8].Select();
					repo.ListRealView.Self.Items[8].Click("center");
					Accessible accElement = new Accessible(repo.FormMain__Reference_Point_TN.ListItemPoint_Type);  
					string PTypeValue = accElement.Value;
					D03968.D03968Validate.PType = PTypeValue;
					Report.Info("Point Type Entered = " + PTypeValue);
		   			D03968.D03968Validate.Ptype_OOR = false;
		   			x=2;   				
				}
				catch (ArgumentOutOfRangeException e)
				{								   			
				   	x++;
				    if (x == 1)
				   	{
				   		Report.Debug("List Count Out of Range for Point Type, Re-Executing Function");
				   		Report.Debug(e.ToString());	
				   	}
				   	else if (x == 2)
				   	{
				   		Report.Debug("List Count Out of Range for Point Type, List Item Will Not be Validated");
				   		Report.Debug(e.ToString());	
				   		D03968.D03968Validate.Ptype_OOR = true;
				   	}
				}
			}
		}
		
		//************************************************************************************//
		//**************************Enters Amplification*******************************//
		//************************************************************************************//
		
		public void Ampval()
		{	
			int x = 0;
			
			while (x < 2)
			{
				try
				{
					repo.FormMain__Reference_Point_TN.ListItemAmplification.Click("CenterLeft");
					Keyboard.Press(Keys.Tab);
					Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					repo.ListRealView.Self.Items[8].Select();
					repo.ListRealView.Self.Items[8].Click("center");
					Accessible accElement = new Accessible(repo.FormMain__Reference_Point_TN.ListItemAmplification);  
					string AmpValue = accElement.Value;
					D03968.D03968Validate.Amp = AmpValue;
					Report.Info("Amplification Value Entered = " + AmpValue);
					D03968.D03968Validate.Amp_OOR = false;
					x=2;
				}
				catch (ArgumentOutOfRangeException e)
				{								   			
				   	x++;
				    if (x == 1)
				   	{
				   		Report.Debug("List Count Out of Range for Amplification, Re-Executing Function");
				   		Report.Debug(e.ToString());	
				   	}
				   	else if (x == 2)
				   	{
				   		Report.Debug("List Count Out of Range for Amplification, List Item Will Not be Validated");
				   		Report.Debug(e.ToString());	
				   		D03968.D03968Validate.Amp_OOR = true;
				   	}
				}
			}
		}
		
		//Collapses menus//
		
		public void Collapser()
		{
			Report.Info("Mouse Left DoubleClick item 'FormMain__Reference_Point_TN.ListItemPosition_and_Speed' at CenterLeft.");
				repo.FormMain__Reference_Point_TN.ListItemPosition_and_Speed.DoubleClick(Location.CenterLeft);
				
			Report.Info("Mouse Left DoubleClick item 'FormMain__Reference_Point_TN.ListItemInterface_Info' at CenterLeft.");
				repo.FormMain__Reference_Point_TN.ListItemInterface_Info.DoubleClick(Location.CenterLeft);
				
			Report.Info("Mouse Left DoubleClick item 'FormMain__Reference_Point_TN.ListItemSpecial_Codes' at CenterLeft.");
				repo.FormMain__Reference_Point_TN.ListItemSpecial_Codes.DoubleClick(Location.CenterLeft);
				
			Report.Info("Mouse Left DoubleClick item 'FormMain__Reference_Point_TN.ListItemIndicators' at CenterLeft.");
				repo.FormMain__Reference_Point_TN.ListItemIndicators.DoubleClick(Location.CenterLeft);
				
			Report.Info("Mouse Left DoubleClick item 'FormMain__Reference_Point_TN.ListItemReference_Point_Info' at CenterLeft.");
				repo.FormMain__Reference_Point_TN.ListItemReference_Point_Info.DoubleClick(Location.CenterLeft);
				
			Report.Info("Mouse Left DoubleClick item 'FormMain__Reference_Point_TN.ListItemRelated_Track_Info' at CenterLeft.");
				repo.FormMain__Reference_Point_TN.ListItemRelated_Track_Info.DoubleClick(Location.CenterLeft);				
		}		
		
		//************************************************************************************//
		//*********************************Enters Sonobuoy Type*******************************//
		//************************************************************************************//
		
		public void SonoType()
		{			
			int x = 0;
				
			while (x < 2)
			{	
				try
				{
					repo.FormMain__Reference_Point_TN.ListItemSonobuoy_Type.Click("CenterLeft");
					Keyboard.Press(Keys.Tab);
					Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List list1 = "/list[@processname='RealView']";
			      	repo.ListRealView.Self.Items[SonoCount].Select();
			      	repo.ListRealView.Self.Items[SonoCount].Click("center");
					Accessible accElement1 = new Accessible(repo.FormMain__Reference_Point_TN.ListItemSonobuoy_Type);  
			  		string SonoTypeValue = accElement1.Value;
			  		D03968.D03968Validate.SonoType = SonoTypeValue;
			  		Report.Info("Sonobuoy Type Value Entered = " + SonoTypeValue);
			  		D03968.D03968Validate.Sontype_OOR = false;
			  		x=2;
				}
				catch (ArgumentOutOfRangeException e)
				{								   			
					x++;
					if (x == 1)
					{
					   	Report.Debug("List Count Out of Range for Sonobuoy Type, Re-Executing Function");
					   	Report.Debug(e.ToString());	
					}
					else if (x == 2)
					{
					   	Report.Debug("List Count Out of Range for Sonobuoy Type, List Item Will Not be Validated");
					   	Report.Debug(e.ToString());	
					   	D03968.D03968Validate.Sontype_OOR = true;
					}
				}					
			}
		}
	   			
		//************************************************************************************//
		//*************************Enters Sonobuoy Pattern Type*******************************//
		//************************************************************************************//
		
		public void SonoPatternType()
		{	
	   		int x = 0;
	   			
			while (x < 2)
			{	
				try
				{
					repo.FormMain__Reference_Point_TN.ListItemSonobuoy_Pattern_Type.Click("CenterLeft");
					Keyboard.Press(Keys.Tab);
					Keyboard.Press("{LMenu down}{Down}{LMenu up}");
					Ranorex.List list1 = "/list[@processname='RealView']";
			        int AScount = list1.Items.Count;
			        Random ASvalue = new Random();
					int ASnum = ASvalue.Next(1, AScount);
			      	repo.ListRealView.Self.Items[ASnum].Select();
			      	repo.ListRealView.Self.Items[ASnum].Click("center");
					Accessible accElement1 = new Accessible(repo.FormMain__Reference_Point_TN.ListItemSonobuoy_Pattern_Type);  
			  		string SonoPTypeValue = accElement1.Value;
			  		D03968.D03968Validate.SonoPType = SonoPTypeValue;
			  		Report.Info("Sonobuoy Pattern Type Value Entered = " + SonoPTypeValue);
			  		D03968.D03968Validate.SonPattype_OOR = false;
			  		x=2;
				}
				catch (ArgumentOutOfRangeException e)
				{								   			
					x++;
					if (x == 1)
					{
					   	Report.Debug("List Count Out of Range for Sonobuoy Pattern Type, Re-Executing Function");
					   	Report.Debug(e.ToString());	
					}
					else if (x == 2)
					{
					   	Report.Debug("List Count Out of Range for Sonobuoy Pattern Type, List Item Will Not be Validated");
					   	Report.Debug(e.ToString());	
					   	D03968.D03968Validate.SonPattype_OOR = true;
					}
				}					
			}
		}
	   			
		//************************************************************************************//
		//*******************************Saves Reference Point********************************//
		//************************************************************************************//		
		
		public void Click_ButtonSave()
		{
			Duration OrigDur = repo.FormMain__Reference_Point_TN.ButtonSaveInfo.SearchTimeout;
			repo.FormMain__Reference_Point_TN.ButtonSaveInfo.SearchTimeout = 1500;
			
			if (repo.FormMain__Reference_Point_TN.ButtonSave.Enabled == true)
			{
				Report.Info("Mouse Left Click item 'FormMain__Reference_Point_TN.ButtonSave' at Center.");
				repo.FormMain__Reference_Point_TN.ButtonSave.Click();
			}
			else
			{
				Report.Debug("Save button is disabled to an error with the Reference Point Create Dialog. Please check the log report to determine the issue");
				repo.FormMain__Reference_Point_TN.ButtonCLOSE.Click();
				D04457.D04457Create.Start();
			}
			
			repo.FormMain__Reference_Point_TN.ButtonSaveInfo.SearchTimeout = OrigDur;
		}
		
		//************************************************************************************//
		//*********************************Gets Track Number**********************************//
		//************************************************************************************//
		
		public void GetTrackNum()			
		{			
		    TCount++;
		    Accessible pic1 = @"/form[@title~'^TacViewC2\ \ \ \(map:\ .*']/element/container/picture[@accessiblevalue='Track']" + "[" + TCount + "]";
   			Accessible accElement = new Accessible(pic1);  
   			string track1 = accElement.Name;
   			Report.Info("Track Number = " + track1);
   			TacViewLib.Defects.D03968.D03968Validate.TrackNum = track1;		
   			TacViewLib.Defects.Drop_Track.DropTrack.TrackNum = track1;
		}

		private void Init()
		{
			// Your recording specific initialization code goes here.
		}		
	}
}
